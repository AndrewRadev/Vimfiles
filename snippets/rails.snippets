snippet t
	t('${1}')
snippet arb
	ActiveRecord::Base
snippet concern
	module ${1}
		extend ActiveSupport::Concern

		included do
		end

		module InstanceMethods
		end

		module ClassMethods
		end
	end
# Relations
snippet bt
	belongs_to ${1}
snippet hm
	has_many ${1}
snippet habtm
	has_and_belongs_to_many ${1}
# Validations
snippet vpo
	validates_presence_of ${1}
snippet vuo
	validates_uniqueness_of ${1}
snippet vno
	validates_numericality_of ${1}
snippet vfo
	validates_format_of ${1}
# Migrations
snippet addcol
	add_column :${1:table}, :${2:column}, :${3:type}
snippet dropcol
	remove_column :${1:table}, :${2:column}
snippet join
	create_table :$1s_$2s, :id => false do |t|
		t.references :${1:foo}, :${2:bar}
	end
# Factory girl
snippet facdef
	Factory.define(:${1:model}) do |${2:m}|
		${3}
	end
snippet fac
	Factory(:${1:model})
snippet facb
	Factory.build(:${1:model})
snippet faca
	Factory.attributes_for(:${1:model})
# Controllers
snippet bf
	before_filter :${1:method}
snippet rt
	respond_to do |format|
		format.html
		format.js
	end
# Basic REST
snippet defindex
	def index
		@${1:model} = ${2:Model}.all
	end
snippet defshow
	def show
		@${1:model} = ${2:Model}.find(params[:id])
	end
snippet defnew
	def new
		@${1:model} = ${2:Model}.new
	end
snippet defcreate
	def create
		@${1:model} = ${2:Model}.new(params[:$1])

		if @$1.save
			flash[:notice] = '$2 was successfully created.'
			redirect_to :action => :index
		else
			render :action => :new
		end
	end
snippet defedit
	def edit
		@${1:model} = ${2:Model}.find(params[:id])
	end
snippet defupdate
	def update
		@${1:model} = ${2:Model}.find(params[:id])

		if @$1.update_attributes(params[:$1])
			flash[:notice] = '$2 was successfully updated.'
			redirect_to @$1
		else
			render :action => 'edit'
		end
	end
snippet defdestroy
	def destroy
		@${1:model} = ${2:Model}.find(params[:id])
		@$1.destroy

		redirect_to $1s_url
	end
