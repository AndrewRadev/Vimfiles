# #!/usr/bin/ruby
snippet #!
	#! /usr/bin/env ruby

snippet req
	require '${1}'
snippet fdname
	File.expand_path(File.dirname(${1:__FILE__}))
snippet dname
	File.dirname(${1:__FILE__})
snippet cfile
	__FILE__
snippet #t
	# TODO (`strftime("%Y-%m-%d")`) ${1}
snippet debug
	require 'ruby-debug'; debugger
snippet =
	#{${1}}
snippet @
	@${1:attribute} = $1
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
	end
snippet defi
	def initialize${1}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet eif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet wh
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet cla
	class ${1:`lib#CapitalCamelCase(Filename())`}
		${2}
	end
snippet mod
	module ${1:`lib#CapitalCamelCase(Filename())`}
		${2}
	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
# def self
snippet defs
	def self.${1:class_method_name}
		${2}
	end
# def method_missing
snippet defmm
	def method_missing(m, *args, &block)
		${1}
	end
snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}
snippet defds
	def_delegators :${1:@del_obj}, :${2:del_methods}
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end
snippet bm
	Benchmark.bm do |bm|
		bm.report do
			${1}
		end
	end
snippet dir
	Filename.dirname(__FILE__)
snippet l
	lambda { |${1:args}| ${2} }
snippet .e
	.each do |${1:n}|
		${2}
	end
snippet do
	do
		${1}
	end
snippet dov
	do |${1:variable}|
		${2}
	end
snippet here
	<<-EOF
		${1}
	EOF
