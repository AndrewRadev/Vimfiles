#! /usr/bin/env ruby

require 'tempfile'
require 'fileutils'

def generate_tags
  file_tags = [
    '!_TAG_FILE_FORMAT	2	/extended format;/',
    '!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/',
  ]

  ignore_paths = [
    '*.git',
    '*/.git/*',
    '*/.next/*',
    '*/tmp/*',
    '*/node_modules/*',
  ].map { |p| "! -path '#{p}'" }.join(' ')

  %x[find #{ignore_paths}].split("\n").each do |file|
    next if File.directory?(file)

    basename = File.basename(file)
    path     = file.gsub(/^\.\//, '')

    file_tags << "#{basename}\t#{path}\t;\"\tf"
  end

  file_tags.sort
end

# Taken straight from activesupport
#
# Write to a file atomically. Useful for situations where you don't
# want other processes or threads to see half-written files.
#
#   File.atomic_write("important.file") do |file|
#     file.write("hello")
#   end
#
# If your temp directory is not on the same filesystem as the file you're
# trying to write, you can provide a different temporary directory.
#
#   File.atomic_write("/data/something.important", "/data/tmp") do |file|
#     file.write("hello")
#   end
def atomic_write(file_name, temp_dir = Dir.tmpdir)
  temp_file = Tempfile.new(File.basename(file_name), temp_dir)
  temp_file.binmode
  yield temp_file
  temp_file.close

  begin
    # Get original file permissions
    old_stat = File.stat(file_name)
  rescue Errno::ENOENT
    # No old permissions, write a temp file to determine the defaults
    check_name = File.join(File.dirname(file_name), ".permissions_check.#{Thread.current.object_id}.#{Process.pid}.#{rand(1000000)}")
    File.open(check_name, "w") { }
    old_stat = File.stat(check_name)
    File.unlink(check_name)
  end

  # Overwrite original file with temp file
  FileUtils.mv(temp_file.path, file_name)

  # Set correct permissions on new file
  File.chown(old_stat.uid, old_stat.gid, file_name)
  File.chmod(old_stat.mode, file_name)
end

tags = generate_tags.join("\n")
atomic_write('files.tags') do |file|
  file.write(tags)
end
