!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
%	.\plugin\matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	.\plugin\matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	.\plugin\matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
&Plugin.&DiffChanges.&Diff\	.\plugin\diffchanges.vim	/^nnoremenu <script> &Plugin.&DiffChanges.&Diff\\ Toggle  <SID>DiffChangesDiffToggle$/;"	m
&Plugin.&DiffChanges.&Patch\	.\plugin\diffchanges.vim	/^nnoremenu <script> &Plugin.&DiffChanges.&Patch\\ Toggle <SID>DiffChangesPatchToggle$/;"	m
+=	.\plugin\autotag.vim	/^            cmd += " '%s'" % source$/;"	m
,,	.\plugin\LineCommenter.vim	/^nmap <silent>,, :call LineCommenter()<Esc>$/;"	m
.	.\autoload\repeat.vim	/^nnoremap <silent> .     :<C-U>call <SID>repeat(v:count)<CR>$/;"	m
<C-G>S	.\plugin\surround.vim	/^    imap        <C-G>S <Plug>ISurround$/;"	m
<C-R>	.\autoload\repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call <SID>wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<c-r><tab>	.\after\plugin\snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<C-S>	.\plugin\surround.vim	/^        imap     <C-S> <Plug>Isurround$/;"	m
<c-w>o	.\plugin\ZoomWinPlugin.vim	/^ nmap <unique> <c-w>o  <Plug>ZoomWin$/;"	m
<C-X>u	.\ftplugin\sql_iabbr.vim	/^inoremap <buffer> <C-X>u <C-W><C-R>=g:UndoBuffer<CR><C-V><Space>$/;"	m
<Leader>caL	.\plugin\calendar.vim	/^  nmap <unique> <Leader>caL <Plug>CalendarH$/;"	m
<Leader>cal	.\plugin\calendar.vim	/^  nmap <unique> <Leader>cal <Plug>CalendarV$/;"	m
<leader>dcd	.\plugin\diffchanges.vim	/^	nmap <silent> <unique> <leader>dcd <Plug>DiffChangesDiffToggle$/;"	m
<leader>dcp	.\plugin\diffchanges.vim	/^	nmap <silent> <unique> <leader>dcp <Plug>DiffChangesPatchToggle$/;"	m
<Leader>rwp	.\plugin\cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>sal	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>sal :.,.DBVarRangeAssign<CR>$/;"	m
<Leader>sap	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>sap :'<,'>DBVarRangeAssign<CR>$/;"	m
<Leader>sas	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>sas :1,$DBVarRangeAssign<CR>$/;"	m
<Leader>sbp	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sbp <Plug>DBPromptForBufferParameters$/;"	m
<Leader>sdp	.\plugin\dbext.vim	/^        nmap <unique> <Leader>sdp <Plug>DBDescribeProcedure$/;"	m
<Leader>sdpa	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sdpa <Plug>DBDescribeProcedureAskName$/;"	m
<Leader>sdt	.\plugin\dbext.vim	/^        nmap <unique> <Leader>sdt <Plug>DBDescribeTable$/;"	m
<Leader>sdta	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sdta <Plug>DBDescribeTableAskName$/;"	m
<Leader>se	.\plugin\dbext.vim	/^    nmap <unique> <Leader>se <Plug>DBExecSQLUnderCursor$/;"	m
<Leader>sE	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sE <Plug>DBExecSQLUnderTopXCursor$/;"	m
<Leader>sea	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>sea :1,$DBExecRangeSQL<CR>$/;"	m
<Leader>sel	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>sel :.,.DBExecRangeSQL<CR>$/;"	m
<Leader>sep	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>sep :'<,'>DBExecRangeSQL<CR>$/;"	m
<Leader>sh	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sh <Plug>DBHistory$/;"	m
<Leader>slc	.\plugin\dbext.vim	/^        nmap <unique> <Leader>slc <Plug>DBListColumn$/;"	m
<Leader>slp	.\plugin\dbext.vim	/^    nmap <unique> <Leader>slp <Plug>DBListProcedure$/;"	m
<Leader>slr	.\plugin\dbext.vim	/^        nmap <unique> <silent> <Leader>slr :DBListVar<CR>$/;"	m
<Leader>slt	.\plugin\dbext.vim	/^    nmap <unique> <Leader>slt <Plug>DBListTable$/;"	m
<Leader>slv	.\plugin\dbext.vim	/^    nmap <unique> <Leader>slv <Plug>DBListView$/;"	m
<Leader>so	.\plugin\dbext.vim	/^    nmap <unique> <Leader>so <Plug>DBOrientationToggle$/;"	m
<Leader>sq	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sq <Plug>DBExecSQL$/;"	m
<Leader>st	.\plugin\dbext.vim	/^        nmap <unique> <Leader>st <Plug>DBSelectFromTable$/;"	m
<Leader>sT	.\plugin\dbext.vim	/^        nmap <unique> <Leader>sT <Plug>DBSelectFromTopXTable$/;"	m
<Leader>sta	.\plugin\dbext.vim	/^    nmap <unique> <Leader>sta <Plug>DBSelectFromTableAskName$/;"	m
<Leader>stcl	.\plugin\dbext.vim	/^        nmap <unique> <Leader>stcl <Plug>DBListColumn$/;"	m
<Leader>stw	.\plugin\dbext.vim	/^    nmap <unique> <Leader>stw <Plug>DBSelectFromTableWithWhere$/;"	m
<Leader>swp	.\plugin\cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<Leader>va	.\plugin\EasyGrep.vim	/^    map <silent> <Leader>va <plug>EgMapGrepCurrentWord_a$/;"	m
<Leader>va	.\plugin\EasyGrep.vim	/^    vmap <silent> <Leader>va <plug>EgMapGrepSelection_a$/;"	m
<Leader>vo	.\plugin\EasyGrep.vim	/^    map <silent> <Leader>vo <plug>EgMapGrepOptions$/;"	m
<Leader>vr	.\plugin\EasyGrep.vim	/^    map <silent> <Leader>vr <plug>EgMapReplaceCurrentWord_r$/;"	m
<Leader>vr	.\plugin\EasyGrep.vim	/^    vmap <silent> <Leader>vr <plug>EgMapReplaceSelection_r$/;"	m
<Leader>vv	.\plugin\EasyGrep.vim	/^    map <silent> <Leader>vv <plug>EgMapGrepCurrentWord_v$/;"	m
<Leader>vv	.\plugin\EasyGrep.vim	/^    vmap <silent> <Leader>vv <plug>EgMapGrepSelection_v$/;"	m
<LocalLeader>.	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>. :call Qualify()<cr>$/;"	m
<LocalLeader>?	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>? :call Haddock()<cr>$/;"	m
<LocalLeader>?1	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>?1 :call HaskellSearchEngine('hoogle')<cr>$/;"	m
<LocalLeader>?2	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>?2 :call HaskellSearchEngine('hayoo!')<cr>$/;"	m
<LocalLeader>??	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>?? :let es=g:haskell_search_engines$/;"	m
<LocalLeader>ct	.\compiler\ghc.vim	/^map <LocalLeader>ct :call GHC_CreateTagfile()<cr>$/;"	m
<LocalLeader>i	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>i :call Import(0,0)<cr>$/;"	m
<LocalLeader>ie	.\compiler\ghc.vim	/^map <LocalLeader>ie :call GHC_MkImportsExplicit()<cr>$/;"	m
<LocalLeader>im	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>im :call Import(1,0)<cr>$/;"	m
<LocalLeader>iq	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>iq :call Import(0,1)<cr>$/;"	m
<LocalLeader>iqm	.\ftplugin\haskell_doc.vim	/^map <LocalLeader>iqm :call Import(1,1)<cr>$/;"	m
<LocalLeader>lang	.\compiler\ghc.vim	/^    map <LocalLeader>lang :emenu ]LANGUAGES_GHC.$/;"	m
<LocalLeader>lang	.\compiler\ghc.vim	/^    map <LocalLeader>lang :popup ]LANGUAGES_GHC<cr>$/;"	m
<LocalLeader>opt	.\compiler\ghc.vim	/^  map <LocalLeader>opt :emenu ]OPTIONS_GHC.$/;"	m
<LocalLeader>opt	.\compiler\ghc.vim	/^  map <LocalLeader>opt :popup ]OPTIONS_GHC<cr>$/;"	m
<LocalLeader>si	.\compiler\ghc.vim	/^map <LocalLeader>si :call GHC_ShowInfo()<cr>$/;"	m
<LocalLeader>t	.\compiler\ghc.vim	/^map <LocalLeader>t :call GHC_ShowType(0)<cr>$/;"	m
<LocalLeader>T	.\compiler\ghc.vim	/^map <LocalLeader>T :call GHC_ShowType(1)<cr>$/;"	m
<Plug>AlignMapsWrapperEnd	:call	.\plugin\AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:<c-u>set	.\plugin\AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	.\plugin\AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/;"	m
<Plug>AM_a(	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/;"	m
<Plug>AM_a<		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_a=		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Plug>AM_a?		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Plug>AM_abox		<SID>WS:let	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_afnc		:<c-u>set	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/;"	m
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/;"	m
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_Htd	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_t|		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T|	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t#		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T#	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t,		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T,	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t:		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T:	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t;		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T;	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t<		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T<	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t=		<SID>WS:call	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/;"	m
<Plug>AM_T=	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/;"	m
<Plug>AM_t?		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T?	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t@		<SID>WS::call	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/;"	m
<Plug>AM_T@	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Plug>AM_Tab	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tml		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_Ts,	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts:		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts;		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts<		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts=		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_Tsp	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tt		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t~		<SID>WS:AlignCtrl	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T~	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	.\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>CalendarH	.\plugin\calendar.vim	/^nmap <silent> <Plug>CalendarH :cal Calendar(1)<CR>$/;"	m
<Plug>CalendarV	.\plugin\calendar.vim	/^nmap <silent> <Plug>CalendarV :cal Calendar(0)<CR>$/;"	m
<Plug>Csurround	.\plugin\surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DBDescribeProcedure	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeProcedure :DBDescribeProcedure<CR>$/;"	m
<Plug>DBDescribeProcedureAskName	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeProcedureAskName$/;"	m
<Plug>DBDescribeTable	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeTable :DBDescribeTable<CR>$/;"	m
<Plug>DBDescribeTableAskName	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeTableAskName$/;"	m
<Plug>DBExecSQL	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBExecSQL :DBExecSQL<CR>$/;"	m
<Plug>DBExecSQLUnderCursor	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBExecSQLUnderCursor :DBExecSQLUnderCursor<CR>$/;"	m
<Plug>DBExecSQLUnderTopXCursor	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBExecSQLUnderTopXCursor :DBExecSQLUnderCursorTopX<CR>$/;"	m
<Plug>DBHistory	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBHistory :DBHistory<CR>$/;"	m
<Plug>DBListColumn	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBListColumn :DBListColumn<CR>$/;"	m
<Plug>DBListProcedure	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBListProcedure$/;"	m
<Plug>DBListTable	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBListTable$/;"	m
<Plug>DBListView	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBListView$/;"	m
<Plug>DBOrientationToggle	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBOrientationToggle :DBOrientationToggle<CR>$/;"	m
<Plug>DBPromptForBufferParameters	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBPromptForBufferParameters$/;"	m
<Plug>DBSelectFromTable	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTable :DBSelectFromTable<CR>$/;"	m
<Plug>DBSelectFromTableAskName	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTableAskName$/;"	m
<Plug>DBSelectFromTableWithWhere	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTableWithWhere$/;"	m
<Plug>DBSelectFromTopXTable	.\plugin\dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTopXTable :DBSelectFromTableTopX<CR>$/;"	m
<Plug>DiffChangesDiffToggle	.\plugin\diffchanges.vim	/^nnoremap <unique> <script> <Plug>DiffChangesDiffToggle  <SID>DiffChangesDiffToggle$/;"	m
<Plug>DiffChangesPatchToggle	.\plugin\diffchanges.vim	/^nnoremap <unique> <script> <Plug>DiffChangesPatchToggle <SID>DiffChangesPatchToggle$/;"	m
<Plug>Dsurround	.\plugin\surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<plug>EgMapGrepCurrentWord_a	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_a    :call <sid>GrepCurrentWord("add", 0)<CR>$/;"	m
<plug>EgMapGrepCurrentWord_A	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_A    :call <sid>GrepCurrentWord("add", 1)<CR>$/;"	m
<plug>EgMapGrepCurrentWord_v	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_v    :call <sid>GrepCurrentWord("", 0)<CR>$/;"	m
<plug>EgMapGrepCurrentWord_V	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapGrepCurrentWord_V    :call <sid>GrepCurrentWord("", 1)<CR>$/;"	m
<plug>EgMapGrepOptions	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapGrepOptions          :call <sid>GrepOptions()<CR>$/;"	m
<plug>EgMapGrepSelection_a	.\plugin\EasyGrep.vim	/^vmap <silent> <unique> <script> <plug>EgMapGrepSelection_a     y:call <sid>GrepSelection("add", 0)<CR>$/;"	m
<plug>EgMapGrepSelection_A	.\plugin\EasyGrep.vim	/^vmap <silent> <unique> <script> <plug>EgMapGrepSelection_A     y:call <sid>GrepSelection("add", 1)<CR>$/;"	m
<plug>EgMapGrepSelection_v	.\plugin\EasyGrep.vim	/^vmap <silent> <unique> <script> <plug>EgMapGrepSelection_v     y:call <sid>GrepSelection("", 0)<CR>$/;"	m
<plug>EgMapGrepSelection_V	.\plugin\EasyGrep.vim	/^vmap <silent> <unique> <script> <plug>EgMapGrepSelection_V     y:call <sid>GrepSelection("", 1)<CR>$/;"	m
<plug>EgMapReplaceCurrentWord_r	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapReplaceCurrentWord_r :call <sid>ReplaceCurrentWord(0)<CR>$/;"	m
<plug>EgMapReplaceCurrentWord_R	.\plugin\EasyGrep.vim	/^nmap <silent> <unique> <script> <plug>EgMapReplaceCurrentWord_R :call <sid>ReplaceCurrentWord(1)<CR>$/;"	m
<plug>EgMapReplaceSelection_r	.\plugin\EasyGrep.vim	/^vmap <silent> <unique> <script> <plug>EgMapReplaceSelection_r  y:call <sid>ReplaceSelection(0)<CR>$/;"	m
<plug>EgMapReplaceSelection_R	.\plugin\EasyGrep.vim	/^vmap <silent> <unique> <script> <plug>EgMapReplaceSelection_R  y:call <sid>ReplaceSelection(1)<CR>$/;"	m
<Plug>Isurround	.\plugin\surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>ISurround	.\plugin\surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>RestoreWinPosn	:call	.\plugin\cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	.\plugin\cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>Vsurround	.\plugin\surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>VSurround	.\plugin\surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc2(visualmode())<CR>$/;"	m
<Plug>Yssurround	.\plugin\surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>YSsurround	.\plugin\surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	.\plugin\surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Ysurround	.\plugin\surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>ZoomWin	.\plugin\ZoomWinPlugin.vim	/^nnoremap <silent> <script> <Plug>ZoomWin :set lz<CR>:silent call ZoomWin#ZoomWin()<CR>:set nolz<CR>$/;"	m
<s-tab>	.\after\plugin\snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<SID>DiffChangesDiffToggle	.\plugin\diffchanges.vim	/^nnoremap <SID>DiffChangesDiffToggle  :DiffChangesDiffToggle<cr>$/;"	m
<SID>DiffChangesPatchToggle	.\plugin\diffchanges.vim	/^nnoremap <SID>DiffChangesPatchToggle :DiffChangesPatchToggle<cr>$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	.\plugin\AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	.\plugin\AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>xx	.\autoload\rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	.\plugin\taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<tab>	.\after\plugin\snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
=	.\plugin\autotag.vim	/^         cmd = "%s -a " % (self.ctags_cmd,)$/;"	m
=	.\plugin\autotag.vim	/^         cmd = "%s -f %s -a " % (self.ctags_cmd, self.tags_file)$/;"	m
a	.\ftplugin\nerdtree.vim	/^nmap <buffer> a pma$/;"	m
a%	.\plugin\matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
abbr2longArg	.\plugin\utl.vim	/^fu! s:abbr2longArg(...)$/;"	f
Abbrev	.\autoload\rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
abort	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> abort <C-R>=SqlIab_ReplaceConditionally('abort', 'ABORT')<CR>$/;"	m
abstime	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> abstime <C-R>=SqlIab_ReplaceConditionally('abstime', 'ABSTIME')<CR>$/;"	m
access	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> access <C-R>=SqlIab_ReplaceConditionally('access', 'ACCESS')<CR>$/;"	m
aclitem	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> aclitem <C-R>=SqlIab_ReplaceConditionally('aclitem', 'ACLITEM')<CR>$/;"	m
ActivateAll	.\plugin\EasyGrep.vim	/^function! <sid>ActivateAll()$/;"	f
ActivateBuffers	.\plugin\EasyGrep.vim	/^function! <sid>ActivateBuffers()$/;"	f
ActivateChoice	.\plugin\EasyGrep.vim	/^function! s:ActivateChoice(choice)$/;"	f
activateNode	.\plugin\NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
ActivateTracked	.\plugin\EasyGrep.vim	/^function! <sid>ActivateTracked()$/;"	f
ActivateUser	.\plugin\EasyGrep.vim	/^function! <sid>ActivateUser()$/;"	f
add	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> add <C-R>=SqlIab_ReplaceConditionally('add', 'ADD')<CR>$/;"	m
AddBracketExpand	.\autoload\rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	.\autoload\rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
addfilecmds	.\autoload\rails.vim	/^function! s:addfilecmds(type)$/;"	f
AddParenExpand	.\autoload\rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
addprojectdir	.\autoload\rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
AddSelectiveExpand	.\autoload\rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	.\autoload\rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
addtostatus	.\autoload\rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
add_methods	.\autoload\rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
aggregate	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> aggregate <C-R>=SqlIab_ReplaceConditionally('aggregate', 'AGGREGATE')<CR>$/;"	m
Align	.\plugin\AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
Align#Align	.\autoload\Align.vim	/^fun! Align#Align(hasctrl,...) range$/;"	f
Align#AlignCtrl	.\autoload\Align.vim	/^fun! Align#AlignCtrl(...)$/;"	f
Align#AlignPop	.\autoload\Align.vim	/^fun! Align#AlignPop()$/;"	f
Align#AlignPush	.\autoload\Align.vim	/^fun! Align#AlignPush()$/;"	f
Align#AlignReplaceQuotedSpaces	.\autoload\Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/;"	f
AlignCtrl	.\plugin\AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignMaps#Afnc	.\autoload\AlignMaps.vim	/^fun! AlignMaps#Afnc()$/;"	f
AlignMaps#CharJoiner	.\autoload\AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/;"	f
AlignMaps#Equals	.\autoload\AlignMaps.vim	/^fun! AlignMaps#Equals() range$/;"	f
AlignMaps#FixMultiDec	.\autoload\AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/;"	f
AlignMaps#StdAlign	.\autoload\AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/;"	f
AlignMaps#WrapperEnd	.\autoload\AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/;"	f
AlignMaps#WrapperStart	.\autoload\AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/;"	f
AlignPop	.\plugin\AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	.\plugin\AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	.\plugin\AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
all	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> all <C-R>=SqlIab_ReplaceConditionally('all', 'ALL')<CR>$/;"	m
AlreadyExists	.\plugin\EasyGrep.vim	/^function! s:AlreadyExists(pat)$/;"	f
alter	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> alter <C-R>=SqlIab_ReplaceConditionally('alter', 'ALTER')<CR>$/;"	m
Alter	.\plugin\dbext.vim	/^command! -nargs=+ Alter             :call dbext#DB_execSql("alter " . <q-args>)$/;"	c
Alternate	.\autoload\rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
alternate	.\ftplugin\haskell_doc.vim	/^  let alternate = substitute(field,'html','doc\/html','')$/;"	v
analyze	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> analyze <C-R>=SqlIab_ReplaceConditionally('analyze', 'ANALYZE')<CR>$/;"	m
and	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> and <C-R>=SqlIab_ReplaceConditionally('and', 'AND')<CR>$/;"	m
any	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> any <C-R>=SqlIab_ReplaceConditionally('any', 'ANY')<CR>$/;"	m
app_background_ruby_command	.\autoload\rails.vim	/^function! s:app_background_ruby_command(cmd) dict abort$/;"	f
app_dbext_settings	.\autoload\rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	.\autoload\rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	.\autoload\rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	.\autoload\rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	.\autoload\rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_ruby_command	.\autoload\rails.vim	/^function! s:app_execute_ruby_command(cmd) dict abort$/;"	f
app_file	.\autoload\rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	.\autoload\rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	.\autoload\rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	.\autoload\rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	.\autoload\rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	.\autoload\rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	.\autoload\rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	.\autoload\rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	.\autoload\rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	.\autoload\rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	.\autoload\rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	.\autoload\rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	.\autoload\rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	.\autoload\rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	.\autoload\rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	.\autoload\rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_server_command	.\autoload\rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	.\autoload\rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	.\autoload\rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	.\autoload\rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	.\autoload\rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	.\autoload\rails.vim	/^function! s:app_user_classes() dict$/;"	f
as	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> as <C-R>=SqlIab_ReplaceConditionally('as', 'AS')<CR>$/;"	m
asc	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> asc <C-R>=SqlIab_ReplaceConditionally('asc', 'ASC')<CR>$/;"	m
audit	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> audit <C-R>=SqlIab_ReplaceConditionally('audit', 'AUDIT')<CR>$/;"	m
authorization	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> authorization <C-R>=SqlIab_ReplaceConditionally('authorization', 'AUTHORIZATION')<CR>$/;"	m
autocamelize	.\autoload\rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoload	.\plugin\rails.vim	/^function! s:autoload(...)$/;"	f
autotag	.\plugin\autotag.vim	/^augroup autotag$/;"	a
AutoTag	.\plugin\autotag.vim	/^function! AutoTag()$/;"	f
b:current_syntax	.\syntax\jquery.vim	/^let b:current_syntax = 'javascript.jquery'$/;"	v
b:current_syntax	.\syntax\txt.vim	/^let b:current_syntax = "txt"$/;"	v
b:did_indent	.\indent\unused.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/php.vim	/^let b:did_indent = 1$/;"	v
b:did_sql_iabbr	.\ftplugin\sql_iabbr.vim	/^let b:did_sql_iabbr = 1$/;"	v
b:ghc_staticoptions	.\compiler\ghc.vim	/^  let b:ghc_staticoptions = ''$/;"	v
b:ghc_types	.\compiler\ghc.vim	/^  let b:ghc_types = {}$/;"	v
b:my_changedtick	.\compiler\ghc.vim	/^  let b:my_changedtick = b:changedtick$/;"	v
b:php_noindent_switch	.\indent\unused.vim	/^   let b:php_noindent_switch = 1$/;"	v
b:php_noindent_switch	indent/php.vim	/^   let b:php_noindent_switch = 1$/;"	v
BackToForwardSlash	.\plugin\EasyGrep.vim	/^function! s:BackToForwardSlash(arg)$/;"	f
BackwardsSnippet	.\plugin\snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
beep	.\plugin\surround.vim	/^function! s:beep()$/;"	f
begin	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> begin <C-R>=SqlIab_ReplaceConditionally('begin', 'BEGIN')<CR>$/;"	m
between	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> between <C-R>=SqlIab_ReplaceConditionally('between', 'BETWEEN')<CR>$/;"	m
bigint	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> bigint <C-R>=SqlIab_ReplaceConditionally('bigint', 'BIGINT')<CR>$/;"	m
bindMappings	.\plugin\NERD_tree.vim	/^function! s:bindMappings()$/;"	f
BinSearchToAppend	.\autoload\genutils.vim	/^function! s:BinSearchToAppend(start, end, line, cmp, direction)$/;"	f
BinSearchToAppend2	.\autoload\genutils.vim	/^function! s:BinSearchToAppend2(start, end, line, cmp, direction, accessor,$/;"	f
bit	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> bit <C-R>=SqlIab_ReplaceConditionally('bit', 'BIT')<CR>$/;"	m
BMRU_Push	.\autoload\tlib\buffer.vim	/^function! s:BMRU_Push(bnr) "{{{3$/;"	f
Bookmark.AddBookmark	.\plugin\NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	.\plugin\NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	.\plugin\NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	.\plugin\NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	.\plugin\NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	.\plugin\NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	.\plugin\NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.compareTo	.\plugin\NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	.\plugin\NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	.\plugin\NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.GetNodeForName	.\plugin\NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.InvalidBookmarks	.\plugin\NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.mustExist	.\plugin\NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.New	.\plugin\NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.setPath	.\plugin\NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.Sort	.\plugin\NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.str	.\plugin\NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	.\plugin\NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.ToRoot	.\plugin\NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.validate	.\plugin\NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Bookmark.Write	.\plugin\NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
bookmarkNode	.\plugin\NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
boolean	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> boolean <C-R>=SqlIab_ReplaceConditionally('boolean', 'BOOLEAN')<CR>$/;"	m
box	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> box <C-R>=SqlIab_ReplaceConditionally('box', 'BOX')<CR>$/;"	m
BreakDown	.\plugin\EasyGrep.vim	/^function! s:BreakDown(keyList)$/;"	f
BufAbbreviations	.\autoload\rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	.\autoload\rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	.\autoload\rails.vim	/^function! s:BufDatabase(...)$/;"	f
buffer_app	.\autoload\rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_getline	.\autoload\rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	.\autoload\rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_lines	.\autoload\rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	.\autoload\rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	.\autoload\rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	.\autoload\rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_setvar	.\autoload\rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_type_name	.\autoload\rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
BufFinderCommands	.\autoload\rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufInit	.\plugin\rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	.\autoload\rails.vim	/^function! s:BufInitStatusline()$/;"	f
bufInWindows	.\plugin\NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
BufLineAccessor	.\autoload\genutils.vim	/^function! s:BufLineAccessor(line, context)$/;"	f
BufLineMover	.\autoload\genutils.vim	/^function! s:BufLineMover(from, to, context)$/;"	f
BufLineSwapper	.\autoload\genutils.vim	/^function! s:BufLineSwapper(line1, line2, context)$/;"	f
BufMappings	.\autoload\rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	.\autoload\rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	.\autoload\rails.vim	/^function! s:BufNavCommands()$/;"	f
BufScriptWrappers	.\autoload\rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	.\autoload\rails.vim	/^function! s:BufSettings()$/;"	f
BufSyntax	.\autoload\rails.vim	/^function! s:BufSyntax()$/;"	f
BuildPatternList	.\plugin\EasyGrep.vim	/^function! s:BuildPatternList(...)$/;"	f
BuildTabStops	.\autoload\snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
by	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> by <C-R>=SqlIab_ReplaceConditionally('by', 'BY')<CR>$/;"	m
bytea	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> bytea <C-R>=SqlIab_ReplaceConditionally('bytea', 'BYTEA')<CR>$/;"	m
CacheClear	.\plugin\FindFile.vim	/^fun! <SID>CacheClear()$/;"	f
CacheDir	.\plugin\FindFile.vim	/^fun! <SID>CacheDir(...)$/;"	f
cache_clear	.\autoload\rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	.\autoload\rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	.\autoload\rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	.\autoload\rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	.\autoload\rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
Calendar	.\plugin\calendar.vim	/^function! Calendar(...)$/;"	f
CalendarDiary	.\plugin\calendar.vim	/^function! s:CalendarDiary(day, month, year, week, dir)$/;"	f
CalendarDoAction	.\plugin\calendar.vim	/^function! s:CalendarDoAction(...)$/;"	f
CalendarHelp	.\plugin\calendar.vim	/^function! s:CalendarHelp()$/;"	f
CalendarMakeDir	.\plugin\calendar.vim	/^function! s:CalendarMakeDir(dir)$/;"	f
CalendarSign	.\plugin\calendar.vim	/^function! s:CalendarSign(day, month, year)$/;"	f
CalendarVar	.\plugin\calendar.vim	/^function! s:CalendarVar(var)$/;"	f
Call	.\plugin\dbext.vim	/^command! -nargs=+ Call              :call dbext#DB_execSql("call " . <q-args>)$/;"	c
CamelCase	.\ftplugin\haskell_doc.vim	/^function! CamelCase(shorthand,string)$/;"	f
cascade	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> cascade <C-R>=SqlIab_ReplaceConditionally('cascade', 'CASCADE')<CR>$/;"	m
centerView	.\plugin\NERD_tree.vim	/^function! s:centerView()$/;"	f
changesurround	.\plugin\surround.vim	/^function! s:changesurround() " {{{1$/;"	f
char	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> char <C-R>=SqlIab_ReplaceConditionally('char', 'CHAR')<CR>$/;"	m
Char2Num	.\autoload\genutils.vim	/^function! s:Char2Num(c)$/;"	f
character	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> character <C-R>=SqlIab_ReplaceConditionally('character', 'CHARACTER')<CR>$/;"	m
chCwd	.\plugin\NERD_tree.vim	/^function! s:chCwd()$/;"	f
check	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> check <C-R>=SqlIab_ReplaceConditionally('check', 'CHECK')<CR>$/;"	m
CheckAgentReturnValue	.\autoload\tlib\input.vim	/^function! s:CheckAgentReturnValue(name, value) "{{{3$/;"	f
checkForActivate	.\plugin\NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	.\plugin\NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
CheckLinks	.\plugin\EasyGrep.vim	/^function! s:CheckLinks()$/;"	f
checkpoint	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> checkpoint <C-R>=SqlIab_ReplaceConditionally('checkpoint', 'CHECKPOINT')<CR>$/;"	m
Choose	.\plugin\matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	.\plugin\snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
chRoot	.\plugin\NERD_tree.vim	/^function! s:chRoot()$/;"	f
cid	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> cid <C-R>=SqlIab_ReplaceConditionally('cid', 'CID')<CR>$/;"	m
cidr	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> cidr <C-R>=SqlIab_ReplaceConditionally('cidr', 'CIDR')<CR>$/;"	m
circle	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> circle <C-R>=SqlIab_ReplaceConditionally('circle', 'CIRCLE')<CR>$/;"	m
CleanUp	.\plugin\matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
CleanupMarkErrors	.\plugin\cuteErrorMarker.vim	/^command! CleanupMarkErrors call CleanupMarkErrors()$/;"	c
CleanupMarkErrors	.\plugin\cuteErrorMarker.vim	/^fun! CleanupMarkErrors() "{{{$/;"	f
ClearActivated	.\plugin\EasyGrep.vim	/^function! s:ClearActivated()$/;"	f
clearBookmarks	.\plugin\NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
ClearGatewayVariables	.\plugin\EasyGrep.vim	/^function! s:ClearGatewayVariables()$/;"	f
Close	.\ftplugin\html_snip_helper.vim	/^fun! Close()$/;"	f
close	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> close <C-R>=SqlIab_ReplaceConditionally('close', 'CLOSE')<CR>$/;"	m
closeChildren	.\plugin\NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	.\plugin\NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closematch	.\plugin\surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
closeTree	.\plugin\NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	.\plugin\NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	.\plugin\NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	.\plugin\NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
cluster	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> cluster <C-R>=SqlIab_ReplaceConditionally('cluster', 'CLUSTER')<CR>$/;"	m
column	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> column <C-R>=SqlIab_ReplaceConditionally('column', 'COLUMN')<CR>$/;"	m
CommandEdit	.\autoload\rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandList	.\autoload\rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
comment	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> comment <C-R>=SqlIab_ReplaceConditionally('comment', 'COMMENT')<CR>$/;"	m
commit	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> commit <C-R>=SqlIab_ReplaceConditionally('commit', 'COMMIT')<CR>$/;"	m
compact	.\autoload\rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	.\plugin\NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
CompareBufferNrByMRU	.\autoload\tlib\buffer.vim	/^function! s:CompareBufferNrByMRU(a, b) "{{{3$/;"	f
CompareCurrentFileCurrentDirectory	.\plugin\EasyGrep.vim	/^function! s:CompareCurrentFileCurrentDirectory()$/;"	f
compareNodes	.\plugin\NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
CompilerSet	.\compiler\php.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\compiler\tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Complete	.\plugin\proj.vim	/^function! s:Complete(A, L, P)$/;"	f
completeArgs	.\plugin\utl.vim	/^fu! s:completeArgs(dummy_argLead, cmdLine, dummy_cursorPos)$/;"	f
CompleteAux	.\ftplugin\haskell_doc.vim	/^function! CompleteAux(al,cl,cp)$/;"	f
completeBookmarks	.\plugin\NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
CompleteFile	.\plugin\FindFile.vim	/^fun! CompleteFile(findstart, base)$/;"	f
CompleteFlagHeaders	.\ftplugin\haskell_doc.vim	/^  function! CompleteFlagHeaders(al,cl,cp)$/;"	f
CompleteHaddock	.\ftplugin\haskell_doc.vim	/^function! CompleteHaddock(findstart, base)$/;"	f
CompleteHaddockModules	.\ftplugin\haskell_doc.vim	/^function! CompleteHaddockModules(al,cl,cp)$/;"	f
Complete_cd	.\autoload\rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	.\autoload\rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	.\autoload\rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	.\autoload\rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	.\autoload\rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	.\autoload\rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	.\autoload\rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	.\autoload\rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	.\autoload\rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	.\autoload\rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	.\autoload\rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	.\autoload\rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	.\autoload\rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	.\autoload\rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
completion_filter	.\autoload\rails.vim	/^function! s:completion_filter(results,A)$/;"	f
compress	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> compress <C-R>=SqlIab_ReplaceConditionally('compress', 'COMPRESS')<CR>$/;"	m
connect	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> connect <C-R>=SqlIab_ReplaceConditionally('connect', 'CONNECT')<CR>$/;"	m
Console	.\ftplugin\haskell.vim	/^command! -buffer Console !ghci % $/;"	c
constraints	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> constraints <C-R>=SqlIab_ReplaceConditionally('constraints', 'CONSTRAINTS')<CR>$/;"	m
controller	.\autoload\rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	.\autoload\rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	.\autoload\rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
copy	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> copy <C-R>=SqlIab_ReplaceConditionally('copy', 'COPY')<CR>$/;"	m
copyNode	.\plugin\NERD_tree.vim	/^function! s:copyNode()$/;"	f
Count	.\autoload\snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
Count	.\plugin\matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CountHelper	.\autoload\tlib\string.vim	/^function! s:CountHelper() "{{{3$/;"	f
countstr	.\plugin\EasyGrep.vim	/^function! s:countstr(str, ele)$/;"	f
cre	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> cre <C-R>=SqlIab_ReplaceConditionally('cre', 'CREATE')<CR>$/;"	m
create	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> create <C-R>=SqlIab_ReplaceConditionally('create', 'CREATE')<CR>$/;"	m
Create	.\plugin\dbext.vim	/^command! -nargs=+ Create            :call dbext#DB_execSql("create " . <q-args>)$/;"	c
CreateDict	.\plugin\EasyGrep.vim	/^function! s:CreateDict()$/;"	f
CreateMenus	.\plugin\rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreateOptionMappings	.\plugin\EasyGrep.vim	/^function! s:CreateOptionMappings()$/;"	f
CreateOptions	.\plugin\EasyGrep.vim	/^function! s:CreateOptions()$/;"	f
createTreeWin	.\plugin\NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
cs	.\plugin\surround.vim	/^    nmap          cs   <Plug>Csurround$/;"	m
current	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> current <C-R>=SqlIab_ReplaceConditionally('current', 'CURRENT')<CR>$/;"	m
current_compiler	.\compiler\ghc.vim	/^let current_compiler = "ghc"$/;"	v
current_compiler	.\compiler\php.vim	/^let current_compiler = "php"$/;"	v
current_compiler	.\compiler\tidy.vim	/^let current_compiler = "tidy"$/;"	v
cursor	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> cursor <C-R>=SqlIab_ReplaceConditionally('cursor', 'CURSOR')<CR>$/;"	m
CustomComplete	.\autoload\rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
database	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> database <C-R>=SqlIab_ReplaceConditionally('database', 'DATABASE')<CR>$/;"	m
date	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> date <C-R>=SqlIab_ReplaceConditionally('date', 'DATE')<CR>$/;"	m
datetime	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> datetime <C-R>=SqlIab_ReplaceConditionally('datetime', 'DATETIME')<CR>$/;"	m
DBCheckModeline	.\plugin\dbext.vim	/^    command! -nargs=0 DBCheckModeline$/;"	c
DBCommit	.\plugin\dbext.vim	/^command! -nargs=0 DBCommit          :call dbext#DB_commit()$/;"	c
DBCompleteProcedures	.\plugin\dbext.vim	/^    command! -nargs=0 -bang DBCompleteProcedures$/;"	c
DBCompleteTables	.\plugin\dbext.vim	/^    command! -nargs=0 -bang DBCompleteTables$/;"	c
DBCompleteViews	.\plugin\dbext.vim	/^    command! -nargs=0 -bang DBCompleteViews$/;"	c
DBConnect	.\plugin\dbext.vim	/^command! -nargs=0 DBConnect         :call dbext#DB_connect()$/;"	c
DBDescribeProcedure	.\plugin\dbext.vim	/^    command! -nargs=* -range DBDescribeProcedure$/;"	c
DBDescribeProcedureAskName	.\plugin\dbext.vim	/^    command! -nargs=0 DBDescribeProcedureAskName$/;"	c
DBDescribeTable	.\plugin\dbext.vim	/^    command! -nargs=* -range DBDescribeTable$/;"	c
DBDescribeTableAskName	.\plugin\dbext.vim	/^    command! -nargs=0 DBDescribeTableAskName$/;"	c
DBDisconnect	.\plugin\dbext.vim	/^command! -nargs=0 DBDisconnect      :call dbext#DB_disconnect()$/;"	c
DBExecRangeSQL	.\plugin\dbext.vim	/^command! -range -nargs=0 DBExecRangeSQL <line1>,<line2>call dbext#DB_execRangeSql()$/;"	c
DBExecSQL	.\plugin\dbext.vim	/^    command! -nargs=0 DBExecSQL$/;"	c
DBExecSQL	.\plugin\dbext.vim	/^command! -nargs=+ DBExecSQL         :call dbext#DB_execSql(<q-args>)$/;"	c
DBExecSQLTopX	.\plugin\dbext.vim	/^command! -nargs=+ DBExecSQLTopX     :call dbext#DB_execSqlTopX(<q-args>)$/;"	c
DBExecSQLUnderCursor	.\plugin\dbext.vim	/^    command! -nargs=0 DBExecSQLUnderCursor$/;"	c
DBExecSQLUnderCursorTopX	.\plugin\dbext.vim	/^    command! -nargs=0 DBExecSQLUnderCursorTopX$/;"	c
DBExecVisualSQL	.\plugin\dbext.vim	/^    command! -nargs=0 -range DBExecVisualSQL :call dbext#DB_execSql(DB_getVisualBlock())$/;"	c
DBExecVisualSQLTopX	.\plugin\dbext.vim	/^    command! -nargs=0 -range DBExecVisualSQLTopX :call dbext#DB_execSqlTopX(DB_getVisualBlock())$/;"	c
dbext	.\plugin\dbext.vim	/^augroup dbext$/;"	a
dbext#DB_auBufDelete	.\autoload\dbext.vim	/^function! dbext#DB_auBufDelete(del_buf_nr) "{{{$/;"	f
dbext#DB_auVimLeavePre	.\autoload\dbext.vim	/^function! dbext#DB_auVimLeavePre() "{{{$/;"	f
dbext#DB_auVimLeavePreOld	.\autoload\dbext.vim	/^function! dbext#DB_auVimLeavePreOld() "{{{$/;"	f
dbext#DB_checkModeline	.\autoload\dbext.vim	/^function! dbext#DB_checkModeline()$/;"	f
dbext#DB_commit	.\autoload\dbext.vim	/^function! dbext#DB_commit()$/;"	f
dbext#DB_completeSettings	.\autoload\dbext.vim	/^function! dbext#DB_completeSettings(ArgLead, CmdLine, CursorPos)$/;"	f
dbext#DB_completeVariable	.\autoload\dbext.vim	/^function! dbext#DB_completeVariable(ArgLead, CmdLine, CursorPos)$/;"	f
dbext#DB_connect	.\autoload\dbext.vim	/^function! dbext#DB_connect()$/;"	f
dbext#DB_describeProcedure	.\autoload\dbext.vim	/^function! dbext#DB_describeProcedure(...)$/;"	f
dbext#DB_describeProcedurePrompt	.\autoload\dbext.vim	/^function! dbext#DB_describeProcedurePrompt()$/;"	f
dbext#DB_describeTable	.\autoload\dbext.vim	/^function! dbext#DB_describeTable(...)$/;"	f
dbext#DB_describeTablePrompt	.\autoload\dbext.vim	/^function! dbext#DB_describeTablePrompt()$/;"	f
dbext#DB_DictionaryCreate	.\autoload\dbext.vim	/^function! dbext#DB_DictionaryCreate( drop_dict, which ) "{{{$/;"	f
dbext#DB_disconnect	.\autoload\dbext.vim	/^function! dbext#DB_disconnect()$/;"	f
dbext#DB_execFuncTypeWCheck	.\autoload\dbext.vim	/^function! dbext#DB_execFuncTypeWCheck(name,...)$/;"	f
dbext#DB_execFuncWCheck	.\autoload\dbext.vim	/^function! dbext#DB_execFuncWCheck(name,...)$/;"	f
dbext#DB_execRangeSql	.\autoload\dbext.vim	/^function! dbext#DB_execRangeSql() range$/;"	f
dbext#DB_execSql	.\autoload\dbext.vim	/^function! dbext#DB_execSql(query)$/;"	f
dbext#DB_execSqlTopX	.\autoload\dbext.vim	/^function! dbext#DB_execSqlTopX(...)$/;"	f
dbext#DB_execSqlWithDefault	.\autoload\dbext.vim	/^function! dbext#DB_execSqlWithDefault(...)$/;"	f
dbext#DB_getDictionaryName	.\autoload\dbext.vim	/^function! dbext#DB_getDictionaryName( which ) "{{{$/;"	f
dbext#DB_getListColumn	.\autoload\dbext.vim	/^function! dbext#DB_getListColumn(table_name, silent_mode, use_newline_sep ) $/;"	f
dbext#DB_getListConnections	.\autoload\dbext.vim	/^function! dbext#DB_getListConnections()$/;"	f
dbext#DB_getListProcedure	.\autoload\dbext.vim	/^function! dbext#DB_getListProcedure(...)$/;"	f
dbext#DB_getListTable	.\autoload\dbext.vim	/^function! dbext#DB_getListTable(...)$/;"	f
dbext#DB_getListView	.\autoload\dbext.vim	/^function! dbext#DB_getListView(...)$/;"	f
dbext#DB_getQueryUnderCursor	.\autoload\dbext.vim	/^function! dbext#DB_getQueryUnderCursor()$/;"	f
dbext#DB_getSqlWithDefault	.\autoload\dbext.vim	/^function! dbext#DB_getSqlWithDefault(...)$/;"	f
dbext#DB_getWType	.\autoload\dbext.vim	/^function! dbext#DB_getWType(name)$/;"	f
dbext#DB_historyList	.\autoload\dbext.vim	/^function! dbext#DB_historyList()$/;"	f
dbext#DB_listOption	.\autoload\dbext.vim	/^function! dbext#DB_listOption(...)$/;"	f
dbext#DB_orientationToggle	.\autoload\dbext.vim	/^function! dbext#DB_orientationToggle(...)$/;"	f
dbext#DB_parseQuery	.\autoload\dbext.vim	/^function! dbext#DB_parseQuery(query)$/;"	f
dbext#DB_removeVariable	.\autoload\dbext.vim	/^function! dbext#DB_removeVariable() range$/;"	f
dbext#DB_rollback	.\autoload\dbext.vim	/^function! dbext#DB_rollback()$/;"	f
dbext#DB_runPrevCmd	.\autoload\dbext.vim	/^function! dbext#DB_runPrevCmd(...)$/;"	f
dbext#DB_selectTablePrompt	.\autoload\dbext.vim	/^function! dbext#DB_selectTablePrompt()$/;"	f
dbext#DB_setMultipleOptions	.\autoload\dbext.vim	/^function! dbext#DB_setMultipleOptions(multi_options)$/;"	f
dbext#DB_setTitle	.\autoload\dbext.vim	/^function! dbext#DB_setTitle() $/;"	f
dbext#DB_sqlVarAssignment	.\autoload\dbext.vim	/^function! dbext#DB_sqlVarAssignment(drop_var, stmt)$/;"	f
dbext#DB_sqlVarList	.\autoload\dbext.vim	/^function! dbext#DB_sqlVarList(...)$/;"	f
dbext#DB_sqlVarRangeAssignment	.\autoload\dbext.vim	/^function! dbext#DB_sqlVarRangeAssignment(remove_var) range$/;"	f
dbext#DB_switchPrevBuf	.\autoload\dbext.vim	/^function! dbext#DB_switchPrevBuf()$/;"	f
dbext#DB_windowClose	.\autoload\dbext.vim	/^function! dbext#DB_windowClose(buf_name)$/;"	f
dbext#DB_windowOpen	.\autoload\dbext.vim	/^function! dbext#DB_windowOpen()$/;"	f
dbext#DB_windowResize	.\autoload\dbext.vim	/^function! dbext#DB_windowResize()$/;"	f
dbext_dbi#DBI_load_perl_subs	.\autoload\dbext_dbi.vim	/^function! dbext_dbi#DBI_load_perl_subs()$/;"	f
DBGetOption	.\plugin\dbext.vim	/^command! -nargs=* -complete=customlist,dbext#DB_completeSettings DBGetOption :echo DB_listOption(<q-args>)$/;"	c
DBGetOption	.\plugin\dbext.vim	/^command! -nargs=? DBGetOption       :echo DB_listOption(<q-args>)$/;"	c
DBHistory	.\plugin\dbext.vim	/^    command! -nargs=0 DBHistory$/;"	c
DBListColumn	.\plugin\dbext.vim	/^    command! -nargs=* DBListColumn$/;"	c
DBListConnections	.\plugin\dbext.vim	/^command! -nargs=0 DBListConnections :call dbext#DB_getListConnections()$/;"	c
DBListProcedure	.\plugin\dbext.vim	/^    command! -nargs=? DBListProcedure$/;"	c
DBListTable	.\plugin\dbext.vim	/^    command! -nargs=? DBListTable$/;"	c
DBListVar	.\plugin\dbext.vim	/^command! -nargs=0 DBListVar         :call dbext#DB_sqlVarList()$/;"	c
DBListView	.\plugin\dbext.vim	/^    command! -nargs=? DBListView$/;"	c
DBOrientationToggle	.\plugin\dbext.vim	/^    command! -nargs=0 DBOrientationToggle$/;"	c
DBPromptForBufferParameters	.\plugin\dbext.vim	/^    command! -nargs=0 DBPromptForBufferParameters$/;"	c
DBResultsClose	.\plugin\dbext.vim	/^    command! -nargs=0 DBResultsClose$/;"	c
DBResultsOpen	.\plugin\dbext.vim	/^    command! -nargs=0 DBResultsOpen$/;"	c
DBResultsRefresh	.\plugin\dbext.vim	/^    command! -nargs=0 DBResultsRefresh$/;"	c
DBResultsToggleResize	.\plugin\dbext.vim	/^    command! -nargs=0 DBResultsToggleResize$/;"	c
DBRollback	.\plugin\dbext.vim	/^command! -nargs=0 DBRollback        :call dbext#DB_rollback()$/;"	c
DBSelectFromTable	.\plugin\dbext.vim	/^    command! -nargs=* -range DBSelectFromTable$/;"	c
DBSelectFromTableAskName	.\plugin\dbext.vim	/^    command! -nargs=0 DBSelectFromTableAskName$/;"	c
DBSelectFromTableTopX	.\plugin\dbext.vim	/^    command! -nargs=* -range DBSelectFromTableTopX$/;"	c
DBSelectFromTableWithWhere	.\plugin\dbext.vim	/^    command! -nargs=0 DBSelectFromTableWithWhere$/;"	c
DBSetOption	.\plugin\dbext.vim	/^command! -nargs=* -complete=customlist,dbext#DB_completeSettings DBSetOption :call dbext#DB_setMultipleOptions(<q-args>)$/;"	c
DBSetOption	.\plugin\dbext.vim	/^command! -nargs=1 DBSetOption       :call dbext#DB_setMultipleOptions(<q-args>)$/;"	c
DBSetVar	.\plugin\dbext.vim	/^command! -nargs=* -complete=customlist,dbext#DB_completeVariable DBSetVar :call dbext#DB_sqlVarAssignment(<bang>0, 'set '.<q-args>)$/;"	c
DBSetVar	.\plugin\dbext.vim	/^command! -nargs=1 -bang DBSetVar    :call dbext#DB_sqlVarAssignment(<bang>0, 'set '.<q-args>)$/;"	c
DBVarRangeAssign	.\plugin\dbext.vim	/^command! -range -nargs=0 -bang DBVarRangeAssign <line1>,<line2>call dbext#DB_sqlVarRangeAssignment(<bang>0)$/;"	c
DB_addBufDictList	.\autoload\dbext.vim	/^function! s:DB_addBufDictList( buf_nbr ) "{{{$/;"	f
DB_addToResultBuffer	.\autoload\dbext.vim	/^function! s:DB_addToResultBuffer(output, do_clear)$/;"	f
DB_ASA_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_ASA_describeProcedure(proc_name)$/;"	f
DB_ASA_describeTable	.\autoload\dbext.vim	/^function! s:DB_ASA_describeTable(table_name)$/;"	f
DB_ASA_execSql	.\autoload\dbext.vim	/^function! s:DB_ASA_execSql(str)$/;"	f
DB_ASA_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_ASA_getDictionaryProcedure() $/;"	f
DB_ASA_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_ASA_getDictionaryTable() $/;"	f
DB_ASA_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_ASA_getDictionaryView() $/;"	f
DB_ASA_getListColumn	.\autoload\dbext.vim	/^function! s:DB_ASA_getListColumn(table_name) $/;"	f
DB_ASA_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_ASA_getListProcedure(proc_prefix)$/;"	f
DB_ASA_getListTable	.\autoload\dbext.vim	/^function! s:DB_ASA_getListTable(table_prefix)$/;"	f
DB_ASA_getListView	.\autoload\dbext.vim	/^function! s:DB_ASA_getListView(view_prefix)$/;"	f
DB_ASA_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_ASA_stripHeaderFooter(result)$/;"	f
DB_ASE_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_ASE_describeProcedure(procedure_name)$/;"	f
DB_ASE_describeTable	.\autoload\dbext.vim	/^function! s:DB_ASE_describeTable(table_name)$/;"	f
DB_ASE_execSql	.\autoload\dbext.vim	/^function! s:DB_ASE_execSql(str)$/;"	f
DB_ASE_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_ASE_getDictionaryProcedure() "{{{$/;"	f
DB_ASE_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_ASE_getDictionaryTable() "{{{$/;"	f
DB_ASE_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_ASE_getDictionaryView() "{{{$/;"	f
DB_ASE_getListColumn	.\autoload\dbext.vim	/^function! s:DB_ASE_getListColumn(table_name) "{{{$/;"	f
DB_ASE_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_ASE_getListProcedure(proc_prefix)$/;"	f
DB_ASE_getListTable	.\autoload\dbext.vim	/^function! s:DB_ASE_getListTable(table_prefix)$/;"	f
DB_ASE_getListView	.\autoload\dbext.vim	/^function! s:DB_ASE_getListView(view_prefix)$/;"	f
DB_ASE_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_ASE_stripHeaderFooter(result) "{{{$/;"	f
DB_buildLists	.\autoload\dbext.vim	/^function! s:DB_buildLists()$/;"	f
DB_checkModeline	.\plugin\dbext.vim	/^function! s:DB_checkModeline()$/;"	f
DB_DB2_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_DB2_describeProcedure(procedure_name)$/;"	f
DB_DB2_describeTable	.\autoload\dbext.vim	/^function! s:DB_DB2_describeTable(table_name)$/;"	f
DB_DB2_execSql	.\autoload\dbext.vim	/^function! s:DB_DB2_execSql(str)$/;"	f
DB_DB2_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_DB2_getDictionaryProcedure()$/;"	f
DB_DB2_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_DB2_getDictionaryTable()$/;"	f
DB_DB2_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_DB2_getDictionaryView() $/;"	f
DB_DB2_getListColumn	.\autoload\dbext.vim	/^function! s:DB_DB2_getListColumn(table_name) $/;"	f
DB_DB2_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_DB2_getListProcedure(proc_prefix)$/;"	f
DB_DB2_getListTable	.\autoload\dbext.vim	/^function! s:DB_DB2_getListTable(table_prefix)$/;"	f
DB_DB2_getListView	.\autoload\dbext.vim	/^function! s:DB_DB2_getListView(view_prefix)$/;"	f
DB_DB2_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_DB2_stripHeaderFooter(result) $/;"	f
DB_DBI_Autoload	.\autoload\dbext.vim	/^function! s:DB_DBI_Autoload()$/;"	f
DB_DBI_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_DBI_describeProcedure(procedure_name)$/;"	f
DB_DBI_describeTable	.\autoload\dbext.vim	/^function! s:DB_DBI_describeTable(table_name)$/;"	f
DB_DBI_execSql	.\autoload\dbext.vim	/^function! s:DB_DBI_execSql(str)$/;"	f
DB_DBI_execStr	.\autoload\dbext.vim	/^function! s:DB_DBI_execStr(str)$/;"	f
DB_DBI_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_DBI_getDictionaryProcedure() "{{{$/;"	f
DB_DBI_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_DBI_getDictionaryTable() "{{{$/;"	f
DB_DBI_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_DBI_getDictionaryView() "{{{$/;"	f
DB_DBI_getListColumn	.\autoload\dbext.vim	/^function! s:DB_DBI_getListColumn(table_name)$/;"	f
DB_DBI_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_DBI_getListProcedure(proc_prefix)$/;"	f
DB_DBI_getListTable	.\autoload\dbext.vim	/^function! s:DB_DBI_getListTable(table_prefix)$/;"	f
DB_DBI_getListView	.\autoload\dbext.vim	/^function! s:DB_DBI_getListView(view_prefix)$/;"	f
DB_DBI_setOption	.\autoload\dbext.vim	/^function! s:DB_DBI_setOption(option_name, value) "{{{$/;"	f
DB_DBI_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_DBI_stripHeaderFooter(result)$/;"	f
DB_delBufDictList	.\autoload\dbext.vim	/^function! s:DB_delBufDictList( buf_nbr ) "{{{$/;"	f
DB_DictionaryCreate	.\plugin\dbext.vim	/^function! DB_DictionaryCreate( drop_dict, which ) $/;"	f
DB_DictionaryDelete	.\autoload\dbext.vim	/^function! s:DB_DictionaryDelete( which ) "{{{$/;"	f
DB_errorMsg	.\autoload\dbext.vim	/^function! s:DB_errorMsg(msg)$/;"	f
DB_escapeStr	.\autoload\dbext.vim	/^function! s:DB_escapeStr(value)$/;"	f
DB_execCmd	.\plugin\dbext.vim	/^function! DB_execCmd(name, ...)$/;"	f
DB_FIREBIRD_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_describeProcedure(procedure_name)$/;"	f
DB_FIREBIRD_describeTable	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_describeTable(table_name)$/;"	f
DB_FIREBIRD_execSql	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_execSql(str)$/;"	f
DB_FIREBIRD_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getDictionaryProcedure() "{{{$/;"	f
DB_FIREBIRD_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getDictionaryTable() "{{{$/;"	f
DB_FIREBIRD_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getDictionaryView() "{{{$/;"	f
DB_FIREBIRD_getListColumn	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getListColumn(table_name) "{{{$/;"	f
DB_FIREBIRD_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getListProcedure(proc_prefix)$/;"	f
DB_FIREBIRD_getListTable	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getListTable(table_prefix)$/;"	f
DB_FIREBIRD_getListView	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_getListView(view_prefix)$/;"	f
DB_FIREBIRD_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_FIREBIRD_stripHeaderFooter(result) "{{{$/;"	f
DB_fullPath2Bin	.\autoload\dbext.vim	/^function! s:DB_fullPath2Bin(executable_name) $/;"	f
DB_get	.\autoload\dbext.vim	/^function! s:DB_get(name, ...)$/;"	f
DB_getCommentChars	.\autoload\dbext.vim	/^function! s:DB_getCommentChars()$/;"	f
DB_getDefault	.\autoload\dbext.vim	/^function! s:DB_getDefault(name)$/;"	f
DB_getDictionaryName	.\plugin\dbext.vim	/^function! DB_getDictionaryName( which ) $/;"	f
DB_getInput	.\autoload\dbext.vim	/^function! s:DB_getInput(prompt, default_value, cancel_value)$/;"	f
DB_getListColumn	.\plugin\dbext.vim	/^function! DB_getListColumn(...) $/;"	f
DB_getLoginScript	.\autoload\dbext.vim	/^function! s:DB_getLoginScript(filename)$/;"	f
DB_getObjectAndQuote	.\autoload\dbext.vim	/^function! s:DB_getObjectAndQuote(object) "{{{ $/;"	f
DB_getObjectName	.\autoload\dbext.vim	/^function! s:DB_getObjectName(object) "{{{ $/;"	f
DB_getObjectOwner	.\autoload\dbext.vim	/^function! s:DB_getObjectOwner(object) "{{{$/;"	f
DB_getParameters	.\autoload\dbext.vim	/^function! s:DB_getParameters(scope)$/;"	f
DB_getTblAlias	.\autoload\dbext.vim	/^function! s:DB_getTblAlias(table_name) $/;"	f
DB_getTitle	.\autoload\dbext.vim	/^function! s:DB_getTitle() $/;"	f
DB_getVisualBlock	.\plugin\dbext.vim	/^function! DB_getVisualBlock() range$/;"	f
DB_historyAdd	.\autoload\dbext.vim	/^function! s:DB_historyAdd(sql)$/;"	f
DB_historyDel	.\autoload\dbext.vim	/^function! s:DB_historyDel(line)$/;"	f
DB_historyOpen	.\autoload\dbext.vim	/^function! s:DB_historyOpen()$/;"	f
DB_historySave	.\autoload\dbext.vim	/^function! s:DB_historySave(auto_hide)$/;"	f
DB_historyUse	.\autoload\dbext.vim	/^function! s:DB_historyUse(line)$/;"	f
DB_INGRES_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_INGRES_describeProcedure(procedure_name)$/;"	f
DB_INGRES_describeTable	.\autoload\dbext.vim	/^function! s:DB_INGRES_describeTable(table_name)$/;"	f
DB_INGRES_execSql	.\autoload\dbext.vim	/^function! s:DB_INGRES_execSql(str)$/;"	f
DB_INGRES_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_INGRES_getDictionaryProcedure() $/;"	f
DB_INGRES_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_INGRES_getDictionaryTable() $/;"	f
DB_INGRES_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_INGRES_getDictionaryView() $/;"	f
DB_INGRES_getListColumn	.\autoload\dbext.vim	/^function! s:DB_INGRES_getListColumn(table_name) $/;"	f
DB_INGRES_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_INGRES_getListProcedure(proc_prefix)$/;"	f
DB_INGRES_getListTable	.\autoload\dbext.vim	/^function! s:DB_INGRES_getListTable(table_prefix)$/;"	f
DB_INGRES_getListView	.\autoload\dbext.vim	/^function! s:DB_INGRES_getListView(view_prefix)$/;"	f
DB_INGRES_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_INGRES_stripHeaderFooter(result)$/;"	f
DB_INTERBASE_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_describeProcedure(procedure_name)$/;"	f
DB_INTERBASE_describeTable	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_describeTable(table_name)$/;"	f
DB_INTERBASE_execSql	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_execSql(str)$/;"	f
DB_INTERBASE_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getDictionaryProcedure() $/;"	f
DB_INTERBASE_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getDictionaryTable() $/;"	f
DB_INTERBASE_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getDictionaryView() $/;"	f
DB_INTERBASE_getListColumn	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getListColumn(table_name) $/;"	f
DB_INTERBASE_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getListProcedure(proc_prefix)$/;"	f
DB_INTERBASE_getListTable	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getListTable(table_prefix)$/;"	f
DB_INTERBASE_getListView	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_getListView(view_prefix)$/;"	f
DB_INTERBASE_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_INTERBASE_stripHeaderFooter(result)$/;"	f
DB_listOption	.\plugin\dbext.vim	/^function! DB_listOption(...) $/;"	f
DB_MYSQL_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_MYSQL_describeProcedure(procedure_name)$/;"	f
DB_MYSQL_describeTable	.\autoload\dbext.vim	/^function! s:DB_MYSQL_describeTable(table_name)$/;"	f
DB_MYSQL_execSql	.\autoload\dbext.vim	/^function! s:DB_MYSQL_execSql(str)$/;"	f
DB_MYSQL_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getDictionaryProcedure() "{{{$/;"	f
DB_MYSQL_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getDictionaryTable() "{{{$/;"	f
DB_MYSQL_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getDictionaryView() "{{{$/;"	f
DB_MYSQL_getListColumn	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getListColumn(table_name) "{{{$/;"	f
DB_MYSQL_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getListProcedure(proc_prefix)$/;"	f
DB_MYSQL_getListTable	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getListTable(table_prefix)$/;"	f
DB_MYSQL_getListView	.\autoload\dbext.vim	/^function! s:DB_MYSQL_getListView(view_prefix)$/;"	f
DB_MYSQL_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_MYSQL_stripHeaderFooter(result) "{{{$/;"	f
DB_ODBC_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_ODBC_describeProcedure(procedure_name)$/;"	f
DB_ODBC_describeTable	.\autoload\dbext.vim	/^function! s:DB_ODBC_describeTable(table_name)$/;"	f
DB_ODBC_execSql	.\autoload\dbext.vim	/^function! s:DB_ODBC_execSql(str)$/;"	f
DB_ODBC_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_ODBC_getDictionaryProcedure() "{{{$/;"	f
DB_ODBC_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_ODBC_getDictionaryTable() "{{{$/;"	f
DB_ODBC_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_ODBC_getDictionaryView() "{{{$/;"	f
DB_ODBC_getListColumn	.\autoload\dbext.vim	/^function! s:DB_ODBC_getListColumn(table_name)$/;"	f
DB_ODBC_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_ODBC_getListProcedure(proc_prefix)$/;"	f
DB_ODBC_getListTable	.\autoload\dbext.vim	/^function! s:DB_ODBC_getListTable(table_prefix)$/;"	f
DB_ODBC_getListView	.\autoload\dbext.vim	/^function! s:DB_ODBC_getListView(view_prefix)$/;"	f
DB_ODBC_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_ODBC_stripHeaderFooter(result)$/;"	f
DB_option	.\autoload\dbext.vim	/^function! s:DB_option(param, value, separator)$/;"	f
DB_ORA_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_ORA_describeProcedure(procedure_name)$/;"	f
DB_ORA_describeTable	.\autoload\dbext.vim	/^function! s:DB_ORA_describeTable(table_name)$/;"	f
DB_ORA_execSql	.\autoload\dbext.vim	/^function! s:DB_ORA_execSql(str)$/;"	f
DB_ORA_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_ORA_getDictionaryProcedure() "{{{$/;"	f
DB_ORA_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_ORA_getDictionaryTable() "{{{$/;"	f
DB_ORA_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_ORA_getDictionaryView() "{{{$/;"	f
DB_ORA_getListColumn	.\autoload\dbext.vim	/^function! s:DB_ORA_getListColumn(table_name) "{{{$/;"	f
DB_ORA_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_ORA_getListProcedure(proc_prefix)$/;"	f
DB_ORA_getListTable	.\autoload\dbext.vim	/^function! s:DB_ORA_getListTable(table_prefix)$/;"	f
DB_ORA_getListView	.\autoload\dbext.vim	/^function! s:DB_ORA_getListView(view_prefix)$/;"	f
DB_ORA_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_ORA_stripHeaderFooter(result) "{{{$/;"	f
DB_pad	.\autoload\dbext.vim	/^function! s:DB_pad(side, length, value)$/;"	f
DB_parseHostVariables	.\autoload\dbext.vim	/^function! s:DB_parseHostVariables(query)$/;"	f
DB_parseJava	.\autoload\dbext.vim	/^function! s:DB_parseJava(query)$/;"	f
DB_parseJProperties	.\autoload\dbext.vim	/^function! s:DB_parseJProperties(query)$/;"	f
DB_parsePerl	.\autoload\dbext.vim	/^function! s:DB_parsePerl(query)$/;"	f
DB_parsePHP	.\autoload\dbext.vim	/^function! s:DB_parsePHP(query)$/;"	f
DB_parseProfile	.\autoload\dbext.vim	/^function! s:DB_parseProfile(value)$/;"	f
DB_parseSQL	.\autoload\dbext.vim	/^function! s:DB_parseSQL(query)$/;"	f
DB_parseVB	.\autoload\dbext.vim	/^function! s:DB_parseVB(query)$/;"	f
DB_parseVim	.\autoload\dbext.vim	/^function! s:DB_parseVim(query)$/;"	f
DB_PGSQL_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_PGSQL_describeProcedure(procedure_name)$/;"	f
DB_PGSQL_describeTable	.\autoload\dbext.vim	/^function! s:DB_PGSQL_describeTable(table_name)$/;"	f
DB_PGSQL_execSql	.\autoload\dbext.vim	/^function! s:DB_PGSQL_execSql(str)$/;"	f
DB_PGSQL_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getDictionaryProcedure() $/;"	f
DB_PGSQL_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getDictionaryTable() $/;"	f
DB_PGSQL_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getDictionaryView() $/;"	f
DB_PGSQL_getListColumn	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getListColumn(table_name) $/;"	f
DB_PGSQL_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getListProcedure(proc_prefix)$/;"	f
DB_PGSQL_getListTable	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getListTable(table_prefix)$/;"	f
DB_PGSQL_getListView	.\autoload\dbext.vim	/^function! s:DB_PGSQL_getListView(view_prefix)$/;"	f
DB_PGSQL_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_PGSQL_stripHeaderFooter(result)$/;"	f
DB_promptForParameters	.\autoload\dbext.vim	/^function! s:DB_promptForParameters(...)$/;"	f
DB_RDB_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_RDB_describeProcedure(procedure_name) "{{{$/;"	f
DB_RDB_describeTable	.\autoload\dbext.vim	/^function! s:DB_RDB_describeTable(table_name) "{{{$/;"	f
DB_RDB_execSql	.\autoload\dbext.vim	/^function! s:DB_RDB_execSql(str) "{{{$/;"	f
DB_RDB_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_RDB_getDictionaryProcedure() "{{{$/;"	f
DB_RDB_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_RDB_getDictionaryTable() "{{{$/;"	f
DB_RDB_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_RDB_getDictionaryView() "{{{$/;"	f
DB_RDB_getListColumn	.\autoload\dbext.vim	/^function! s:DB_RDB_getListColumn(table_name) "{{{$/;"	f
DB_RDB_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_RDB_getListProcedure(proc_prefix) "{{{$/;"	f
DB_RDB_getListTable	.\autoload\dbext.vim	/^function! s:DB_RDB_getListTable(table_prefix) "{{{$/;"	f
DB_RDB_getListView	.\autoload\dbext.vim	/^function! s:DB_RDB_getListView(view_prefix) "{{{$/;"	f
DB_RDB_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_RDB_stripHeaderFooter(result) "{{{$/;"	f
DB_removeEmptyLines	.\autoload\dbext.vim	/^function! s:DB_removeEmptyLines(sql)$/;"	f
DB_resBufName	.\autoload\dbext.vim	/^function! s:DB_resBufName()$/;"	f
DB_resetBufferParameters	.\autoload\dbext.vim	/^function! s:DB_resetBufferParameters(use_defaults)$/;"	f
DB_resetGlobalParameters	.\autoload\dbext.vim	/^function! s:DB_resetGlobalParameters()$/;"	f
DB_restoreConnParameters	.\autoload\dbext.vim	/^function! s:DB_restoreConnParameters()$/;"	f
DB_runCmd	.\autoload\dbext.vim	/^function! s:DB_runCmd(cmd, sql, result)$/;"	f
DB_saveConnParameters	.\autoload\dbext.vim	/^function! s:DB_saveConnParameters()$/;"	f
DB_saveSize	.\autoload\dbext.vim	/^function! s:DB_saveSize(buf_name)$/;"	f
DB_searchReplace	.\autoload\dbext.vim	/^function! s:DB_searchReplace(str, exp_find_str, exp_get_value, count_matches)$/;"	f
DB_set	.\autoload\dbext.vim	/^function! s:DB_set(name, value)$/;"	f
DB_setGlobal	.\autoload\dbext.vim	/^function! s:DB_setGlobal(name, value)$/;"	f
DB_setWType	.\autoload\dbext.vim	/^function! s:DB_setWType(name, value)$/;"	f
DB_SQLITE_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_SQLITE_describeProcedure(procedure_name)$/;"	f
DB_SQLITE_describeTable	.\autoload\dbext.vim	/^function! s:DB_SQLITE_describeTable(table_name)$/;"	f
DB_SQLITE_execSql	.\autoload\dbext.vim	/^function! s:DB_SQLITE_execSql(str)$/;"	f
DB_SQLITE_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getDictionaryProcedure() $/;"	f
DB_SQLITE_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getDictionaryTable()$/;"	f
DB_SQLITE_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getDictionaryView()$/;"	f
DB_SQLITE_getListColumn	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getListColumn(table_name)$/;"	f
DB_SQLITE_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getListProcedure(proc_prefix)$/;"	f
DB_SQLITE_getListTable	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getListTable(table_prefix)$/;"	f
DB_SQLITE_getListView	.\autoload\dbext.vim	/^function! s:DB_SQLITE_getListView(view_prefix)$/;"	f
DB_SQLITE_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_SQLITE_stripHeaderFooter(result)$/;"	f
DB_SQLSRV_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_describeProcedure(procedure_name)$/;"	f
DB_SQLSRV_describeTable	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_describeTable(table_name)$/;"	f
DB_SQLSRV_execSql	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_execSql(str)$/;"	f
DB_SQLSRV_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getDictionaryProcedure() "{{{$/;"	f
DB_SQLSRV_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getDictionaryTable() "{{{$/;"	f
DB_SQLSRV_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getDictionaryView() "{{{$/;"	f
DB_SQLSRV_getListColumn	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getListColumn(table_name)$/;"	f
DB_SQLSRV_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getListProcedure(proc_prefix)$/;"	f
DB_SQLSRV_getListTable	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getListTable(table_prefix)$/;"	f
DB_SQLSRV_getListView	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_getListView(view_prefix)$/;"	f
DB_SQLSRV_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_SQLSRV_stripHeaderFooter(result)$/;"	f
DB_sqlVarInit	.\autoload\dbext.vim	/^function! s:DB_sqlVarInit()$/;"	f
DB_sqlVarRemoveTemp	.\autoload\dbext.vim	/^function! s:DB_sqlVarRemoveTemp()$/;"	f
DB_sqlVarSet	.\autoload\dbext.vim	/^function! s:DB_sqlVarSet(name, value, temporary)$/;"	f
DB_sqlVarSubstitute	.\autoload\dbext.vim	/^function! s:DB_sqlVarSubstitute(sql)$/;"	f
DB_stripComments	.\autoload\dbext.vim	/^function! s:DB_stripComments(mdl_options)$/;"	f
DB_stripLeadFollowQuotesSpace	.\autoload\dbext.vim	/^function! s:DB_stripLeadFollowQuotesSpace(str)$/;"	f
DB_stripLeadFollowSpaceLines	.\autoload\dbext.vim	/^function! s:DB_stripLeadFollowSpaceLines(str)$/;"	f
DB_switchToBuffer	.\autoload\dbext.vim	/^function! s:DB_switchToBuffer(buf_name, buf_file, get_buf_nr_name)$/;"	f
DB_ULTRALITE_describeProcedure	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_describeProcedure(proc_name)$/;"	f
DB_ULTRALITE_describeTable	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_describeTable(table_name)$/;"	f
DB_ULTRALITE_execSql	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_execSql(str)$/;"	f
DB_ULTRALITE_getDictionaryProcedure	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getDictionaryProcedure() $/;"	f
DB_ULTRALITE_getDictionaryTable	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getDictionaryTable() $/;"	f
DB_ULTRALITE_getDictionaryView	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getDictionaryView() $/;"	f
DB_ULTRALITE_getListColumn	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getListColumn(table_name) $/;"	f
DB_ULTRALITE_getListProcedure	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getListProcedure(proc_prefix)$/;"	f
DB_ULTRALITE_getListTable	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getListTable(table_prefix)$/;"	f
DB_ULTRALITE_getListView	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_getListView(view_prefix)$/;"	f
DB_ULTRALITE_stripHeaderFooter	.\autoload\dbext.vim	/^function! s:DB_ULTRALITE_stripHeaderFooter(result)$/;"	f
DB_validateBufferParameters	.\autoload\dbext.vim	/^function! s:DB_validateBufferParameters()$/;"	f
DB_varToString	.\autoload\dbext.vim	/^function! s:DB_varToString(name)$/;"	f
DB_warningMsg	.\autoload\dbext.vim	/^function! s:DB_warningMsg(msg)$/;"	f
debug	.\autoload\rails.vim	/^function! s:debug(str)$/;"	f
Decho	.\plugin\Decho.vim	/^com! -nargs=+ -complete=expression Decho	call Decho(<args>)$/;"	c
Decho	.\plugin\Decho.vim	/^fun! Decho(...)$/;"	f
DechoDepth	.\plugin\Decho.vim	/^fun! DechoDepth(depth)$/;"	f
DechoMsg	.\plugin\Decho.vim	/^fun! s:DechoMsg(onoff,...)$/;"	f
DechoMsgOff	.\plugin\Decho.vim	/^com! -nargs=0 DechoMsgOff					call s:DechoMsg(0)$/;"	c
DechoMsgOn	.\plugin\Decho.vim	/^com! -nargs=0 DechoMsgOn					call s:DechoMsg(1,expand("<sfile>"))$/;"	c
DechoOff	.\plugin\Decho.vim	/^com! -nargs=0 -range=% DechoOff				call DechoOff(<line1>,<line2>)$/;"	c
DechoOff	.\plugin\Decho.vim	/^fun! DechoOff(line1,line2)$/;"	f
DechoOn	.\plugin\Decho.vim	/^com! -nargs=0 -range=% DechoOn				call DechoOn(<line1>,<line2>)$/;"	c
DechoOn	.\plugin\Decho.vim	/^fun! DechoOn(line1,line2)$/;"	f
DechoPause	.\plugin\Decho.vim	/^com! -nargs=0 DechoPause					call DechoPause()$/;"	c
DechoPause	.\plugin\Decho.vim	/^fun! DechoPause()$/;"	f
DechoRemOff	.\plugin\Decho.vim	/^ com! -nargs=0 DechoRemOff					call s:DechoRemote(0)$/;"	c
DechoRemOn	.\plugin\Decho.vim	/^ com! -nargs=0 DechoRemOn					call s:DechoRemote(1,expand("<sfile>"))$/;"	c
DechoRemote	.\plugin\Decho.vim	/^ fun! s:DechoRemote(mode,...)$/;"	f
DechoSep	.\plugin\Decho.vim	/^com! -nargs=? DechoSep						call DechoSep(<args>)$/;"	c
DechoSep	.\plugin\Decho.vim	/^fun! DechoSep(...)$/;"	f
DechoTab	.\plugin\Decho.vim	/^ fun! s:DechoTab(mode,...)$/;"	f
DechoTabOff	.\plugin\Decho.vim	/^ com! -nargs=? DechoTabOff                  set lz|call s:DechoTab(0)|set nolz$/;"	c
DechoTabOn	.\plugin\Decho.vim	/^ com! -nargs=? DechoTabOn                   set lz|call s:DechoTab(1,expand("<sfile>"))|set nolz$/;"	c
DechoVarOff	.\plugin\Decho.vim	/^com! -nargs=0 DechoVarOff					call s:DechoVarOff()$/;"	c
DechoVarOff	.\plugin\Decho.vim	/^fun! s:DechoVarOff()$/;"	f
DechoVarOn	.\plugin\Decho.vim	/^com! -nargs=? DechoVarOn					call s:DechoVarOn(expand("<sfile>"),<args>)$/;"	c
DechoVarOn	.\plugin\Decho.vim	/^fun! s:DechoVarOn(...)$/;"	f
decimal	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> decimal <C-R>=SqlIab_ReplaceConditionally('decimal', 'DECIMAL')<CR>$/;"	m
declare	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> declare <C-R>=SqlIab_ReplaceConditionally('declare', 'DECLARE')<CR>$/;"	m
default	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> default <C-R>=SqlIab_ReplaceConditionally('default', 'DEFAULT')<CR>$/;"	m
DefineSnips	.\plugin\snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DeHTML	.\ftplugin\haskell_doc.vim	/^function! DeHTML(entry)$/;"	f
delete	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> delete <C-R>=SqlIab_ReplaceConditionally('delete', 'DELETE')<CR>$/;"	m
Delete	.\plugin\dbext.vim	/^command! -nargs=+ Delete            :call dbext#DB_execSql("delete " . <q-args>)$/;"	c
deleteBookmark	.\plugin\NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
deleteNode	.\plugin\NERD_tree.vim	/^function! s:deleteNode()$/;"	f
desc	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> desc <C-R>=SqlIab_ReplaceConditionally('desc', 'DESC')<CR>$/;"	m
DestroyMark	.\plugin\cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detect	.\plugin\rails.vim	/^function! s:Detect(filename)$/;"	f
Dfunc	.\plugin\Decho.vim	/^fun! Dfunc(...)$/;"	f
Dhide	.\plugin\Decho.vim	/^com! -nargs=0 Dhide    						call s:Dhide(1)$/;"	c
Dhide	.\plugin\Decho.vim	/^fun! <SID>Dhide(hide)$/;"	f
did_drchip_decho_syntax	.\syntax\Decho.vim	/^  let did_drchip_decho_syntax= 1$/;"	v
did_lisp_syntax_inits	.\syntax\jquery.vim	/^    let did_lisp_syntax_inits = 1$/;"	v
DiffChangesDiffToggle	.\plugin\diffchanges.vim	/^command! -bar DiffChangesDiffToggle  :call s:DiffChangesToggle('diff')$/;"	c
DiffChangesOff	.\plugin\diffchanges.vim	/^function! s:DiffChangesOff() "{{{1$/;"	f
DiffChangesOn	.\plugin\diffchanges.vim	/^function! s:DiffChangesOn(mode) "{{{1$/;"	f
DiffChangesPair	.\plugin\diffchanges.vim	/^function! s:DiffChangesPair(buf_num) "{{{1$/;"	f
DiffChangesPatchToggle	.\plugin\diffchanges.vim	/^command! -bar DiffChangesPatchToggle :call s:DiffChangesToggle('patch')$/;"	c
DiffChangesToggle	.\plugin\diffchanges.vim	/^function! s:DiffChangesToggle(mode) "{{{1$/;"	f
displayHelp	.\plugin\NERD_tree.vim	/^function! s:displayHelp()$/;"	f
distinct	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> distinct <C-R>=SqlIab_ReplaceConditionally('distinct', 'DISTINCT')<CR>$/;"	m
djump	.\autoload\rails.vim	/^function! s:djump(def)$/;"	f
DM	.\plugin\cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
DoBreakDown	.\plugin\EasyGrep.vim	/^function! s:DoBreakDown(key)$/;"	f
Doc	.\autoload\rails.vim	/^function! s:Doc(bang, string)$/;"	f
Doc	.\ftplugin\haskell_doc.vim	/^command! -nargs=+ Doc  call Doc('v',<f-args>)$/;"	c
Doc	.\ftplugin\haskell_doc.vim	/^function! Doc(kind,qualname,...) $/;"	f
DocBrowser	.\ftplugin\haskell_doc.vim	/^function! DocBrowser(url)$/;"	f
DocIndex	.\ftplugin\haskell_doc.vim	/^command! DocIndex call DocIndex()$/;"	c
DocIndex	.\ftplugin\haskell_doc.vim	/^function! DocIndex()$/;"	f
DocSettings	.\ftplugin\haskell_doc.vim	/^command! DocSettings call DocSettings()$/;"	c
DocSettings	.\ftplugin\haskell_doc.vim	/^function! DocSettings()$/;"	f
Doct	.\ftplugin\haskell_doc.vim	/^command! -nargs=+ Doct call Doc('t',<f-args>)$/;"	c
DoEscapeList	.\plugin\EasyGrep.vim	/^function! s:DoEscapeList(lst, seperator, func)$/;"	f
DoGrep	.\plugin\EasyGrep.vim	/^function! s:DoGrep(word, add, whole, count, escapeArgs)$/;"	f
DoReplace	.\plugin\EasyGrep.vim	/^function! s:DoReplace(target, replacement, whole, escapeArgs)$/;"	f
dosurround	.\plugin\surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
Dredir	.\plugin\Decho.vim	/^com! -nargs=+ -complete=expression Dredir	call Dredir(<args>)$/;"	c
Dredir	.\plugin\Decho.vim	/^fun! Dredir(...)$/;"	f
Dret	.\plugin\Decho.vim	/^fun! Dret(...)$/;"	f
drop	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> drop <C-R>=SqlIab_ReplaceConditionally('drop', 'DROP')<CR>$/;"	m
Drop	.\plugin\dbext.vim	/^command! -nargs=+ Drop              :call dbext#DB_execSql("drop " . <q-args>)$/;"	c
ds	.\plugin\surround.vim	/^    nmap          ds   <Plug>Dsurround$/;"	m
Dsep	.\plugin\Decho.vim	/^com! -nargs=? Dsep						    call DechoSep(<args>)$/;"	c
Dshow	.\plugin\Decho.vim	/^com! -nargs=0 Dshow    						call s:Dhide(0)$/;"	c
dumpHelp	.\plugin\NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
DumpInfo	.\plugin\proj.vim	/^function! s:DumpInfo()$/;"	f
Echo	.\plugin\EasyGrep.vim	/^function! <sid>Echo(message)$/;"	f
echo	.\plugin\NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echo	.\plugin\proj.vim	/^function! s:echo(msg)$/;"	f
echoError	.\plugin\NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoError	.\plugin\proj.vim	/^function! s:echoError(msg)$/;"	f
EchoError	.\plugin\symfony.vim	/^function! g:EchoError(msg)$/;"	f
EchoFilesSearched	.\plugin\EasyGrep.vim	/^function! <sid>EchoFilesSearched()$/;"	f
EchoOptionsSet	.\plugin\EasyGrep.vim	/^function! <sid>EchoOptionsSet()$/;"	f
echoWarning	.\plugin\NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
edit	.\autoload\rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
Edit	.\autoload\rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
EditCallback	.\autoload\tlib\input.vim	/^function! s:EditCallback(...) "{{{3$/;"	f
editcmdfor	.\autoload\rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
EditFile	.\plugin\FindFile.vim	/^fun! <SID>EditFile(f)$/;"	f
EditSimpleRb	.\autoload\rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
else	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> else <C-R>=SqlIab_ReplaceConditionally('else', 'ELSE')<CR>$/;"	m
elsif	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> elsif <C-R>=SqlIab_ReplaceConditionally('elsif', 'ELSIF')<CR>$/;"	m
end	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> end <C-R>=SqlIab_ReplaceConditionally('end', 'END')<CR>$/;"	m
endof	.\autoload\rails.vim	/^function! s:endof(lnum)$/;"	f
environment	.\autoload\rails.vim	/^function! s:environment()$/;"	f
environmentEdit	.\autoload\rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	.\autoload\rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	.\autoload\rails.vim	/^function! s:error(str)$/;"	f
error	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> error <C-R>=SqlIab_ReplaceConditionally('error', 'ERROR')<CR>$/;"	m
Error	.\plugin\diffchanges.vim	/^function! s:Error(message) "{{{1$/;"	f
Error	.\plugin\EasyGrep.vim	/^function! s:Error(message)$/;"	f
error	.\plugin\rails.vim	/^function! s:error(str)$/;"	f
escape	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> escape <C-R>=SqlIab_ReplaceConditionally('escape', 'ESCAPE')<CR>$/;"	m
Escape	.\plugin\EasyGrep.vim	/^function! s:Escape(str, lst)$/;"	f
EscapeChars	.\plugin\FindFile.vim	/^fun! <SID>EscapeChars(toEscape)$/;"	f
EscapeList	.\plugin\EasyGrep.vim	/^function! s:EscapeList(lst, seperator)$/;"	f
EscapeSpecial	.\plugin\EasyGrep.vim	/^function! s:EscapeSpecial(str)$/;"	f
escarg	.\autoload\rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	.\autoload\rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	.\plugin\rails.vim	/^function! s:escvar(r)$/;"	f
exception	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> exception <C-R>=SqlIab_ReplaceConditionally('exception', 'EXCEPTION')<CR>$/;"	m
exclusive	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> exclusive <C-R>=SqlIab_ReplaceConditionally('exclusive', 'EXCLUSIVE')<CR>$/;"	m
exec	.\plugin\NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
execute	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> execute <C-R>=SqlIab_ReplaceConditionally('execute', 'EXECUTE')<CR>$/;"	m
executeNode	.\plugin\NERD_tree.vim	/^function! s:executeNode()$/;"	f
ExecWinCmdNoEa	.\autoload\genutils.vim	/^function! s:ExecWinCmdNoEa(winCmd)$/;"	f
exists	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> exists <C-R>=SqlIab_ReplaceConditionally('exists', 'EXISTS')<CR>$/;"	m
explain	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> explain <C-R>=SqlIab_ReplaceConditionally('explain', 'EXPLAIN')<CR>$/;"	m
ExportDocIndex	.\ftplugin\haskell_doc.vim	/^command! ExportDocIndex call ExportDocIndex()$/;"	c
ExportDocIndex	.\ftplugin\haskell_doc.vim	/^function! ExportDocIndex()$/;"	f
Extract	.\autoload\rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
extractafter	.\plugin\surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	.\plugin\surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	.\autoload\rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
ExtractSnips	.\plugin\snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	.\plugin\snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
false	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> false <C-R>=SqlIab_ReplaceConditionally('false', 'FALSE')<CR>$/;"	m
FC	.\plugin\FindFile.vim	/^command! -nargs=* -complete=dir FC call <SID>CacheDir(<f-args>)$/;"	c
FCC	.\plugin\FindFile.vim	/^command! FCC call <SID>CacheClear()$/;"	c
fetch	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> fetch <C-R>=SqlIab_ReplaceConditionally('fetch', 'FETCH')<CR>$/;"	m
FF	.\plugin\FindFile.vim	/^command! FF call <SID>FindFile()$/;"	c
field	.\ftplugin\haskell_doc.vim	/^  let field = substitute(field,'haddock-html: \\(.*\\)libraries.base','\\1','')$/;"	v
field	.\ftplugin\haskell_doc.vim	/^  let field = substitute(field,'\\\\','\/','g')$/;"	v
file	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> file <C-R>=SqlIab_ReplaceConditionally('file', 'FILE')<CR>$/;"	m
FileEscape	.\plugin\EasyGrep.vim	/^function! s:FileEscape(item)$/;"	f
fileinput	.\plugin\autotag.vim	/^import fileinput$/;"	m
Filename	.\autoload\snipMate.vim	/^fun! Filename(...)$/;"	f
file_getline	.\autoload\rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	.\autoload\rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	.\autoload\rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	.\autoload\rails.vim	/^function! s:file_path() dict abort$/;"	f
FillWindow	.\plugin\EasyGrep.vim	/^function! s:FillWindow()$/;"	f
Find	.\autoload\rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
findamethod	.\autoload\rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	.\autoload\rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
FindBufferForName	.\autoload\genutils.vim	/^function! s:FindBufferForName(fileName)$/;"	f
FindByKey	.\plugin\EasyGrep.vim	/^function! s:FindByKey(key)$/;"	f
FindByPattern	.\plugin\EasyGrep.vim	/^function! s:FindByPattern(pattern)$/;"	f
findcmdfor	.\autoload\rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
FindCurrentAction	.\plugin\symfony.vim	/^function! FindCurrentAction()$/;"	f
FindCurrentFileName	.\plugin\symfony.vim	/^function! FindCurrentFileName()$/;"	f
findedit	.\autoload\rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
FindFile	.\plugin\FindFile.vim	/^command! FindFile call <SID>FindFile()$/;"	c
FindFile	.\plugin\FindFile.vim	/^fun! <SID>FindFile()$/;"	f
FindFileCache	.\plugin\FindFile.vim	/^command! -nargs=* -complete=dir FindFileCache call <SID>CacheDir(<f-args>)$/;"	c
FindFileCacheClear	.\plugin\FindFile.vim	/^command! FindFileCacheClear call <SID>CacheClear()$/;"	c
FindFileSplit	.\plugin\FindFile.vim	/^command! FindFileSplit call <SID>FindFileSplit()$/;"	c
FindFileSplit	.\plugin\FindFile.vim	/^fun! <SID>FindFileSplit()$/;"	f
findfromview	.\autoload\rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	.\autoload\rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	.\autoload\rails.vim	/^function! s:findlayout(name)$/;"	f
findview	.\autoload\rails.vim	/^function! s:findview(name)$/;"	f
firstUsableWindow	.\plugin\NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	.\plugin\surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	.\autoload\rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	.\autoload\rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
FlagReference	.\ftplugin\haskell_doc.vim	/^  command! -nargs=1 -complete=customlist,CompleteFlagHeaders FlagReference call FlagReference(<f-args>)$/;"	c
FlagReference	.\ftplugin\haskell_doc.vim	/^  function! FlagReference(section)$/;"	f
float	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> float <C-R>=SqlIab_ReplaceConditionally('float', 'FLOAT')<CR>$/;"	m
for	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> for <C-R>=SqlIab_ReplaceConditionally('for', 'FOR')<CR>$/;"	m
foreign	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> foreign <C-R>=SqlIab_ReplaceConditionally('foreign', 'FOREIGN')<CR>$/;"	m
foriegn	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> foriegn <C-R>=SqlIab_ReplaceConditionally('foriegn', 'FOREIGN')<CR>$/;"	m
format	.\autoload\rails.vim	/^function! s:format(...)$/;"	f
FormatTag	.\autoload\ttags.vim	/^function! s:FormatTag(tag) "{{{3$/;"	f
from	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> from <C-R>=SqlIab_ReplaceConditionally('from', 'FROM')<CR>$/;"	m
FS	.\plugin\FindFile.vim	/^command! FS call <SID>FindFileSplit()$/;"	c
function	.\autoload\rails.vim	/^function! s:function(name)$/;"	f
function	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> function <C-R>=SqlIab_ReplaceConditionally('function', 'FUNCTION')<CR>$/;"	m
functionaltestEdit	.\autoload\rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	.\autoload\rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	.\autoload\rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g%	.\plugin\matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	.\plugin\matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	.\plugin\matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:Align_xstrlen	.\autoload\Align.vim	/^  let g:Align_xstrlen= 0$/;"	v
g:Align_xstrlen	.\autoload\Align.vim	/^  let g:Align_xstrlen= 1$/;"	v
g:autoloaded_rails	.\autoload\rails.vim	/^let g:autoloaded_rails = '4.0'$/;"	v
g:autotagCtagsCmd	.\plugin\autotag.vim	/^   let g:autotagCtagsCmd="ctags"$/;"	v
g:autotagDisabled	.\plugin\autotag.vim	/^   let g:autotagDisabled=0$/;"	v
g:autotagExcludeSuffixes	.\plugin\autotag.vim	/^   let g:autotagExcludeSuffixes="tml.xml.text.txt"$/;"	v
g:autotagTagsFile	.\plugin\autotag.vim	/^   let g:autotagTagsFile="tags"$/;"	v
g:autotagVerbosityLevel	.\plugin\autotag.vim	/^   let g:autotagVerbosityLevel=0$/;"	v
g:calendar_action	.\plugin\calendar.vim	/^  let g:calendar_action = "<SID>CalendarDiary"$/;"	v
g:calendar_diary	.\plugin\calendar.vim	/^  let g:calendar_diary = "~\/diary"$/;"	v
g:calendar_focus_today	.\plugin\calendar.vim	/^  let g:calendar_focus_today = 0$/;"	v
g:calendar_mark	.\plugin\calendar.vim	/^  let g:calendar_mark = 'left'$/;"	v
g:calendar_navi	.\plugin\calendar.vim	/^  let g:calendar_navi = 'top'$/;"	v
g:calendar_navi_label	.\plugin\calendar.vim	/^  let g:calendar_navi_label = "Prev,Today,Next"$/;"	v
g:calendar_sign	.\plugin\calendar.vim	/^  let g:calendar_sign = "<SID>CalendarSign"$/;"	v
g:calendar_version	.\plugin\calendar.vim	/^let g:calendar_version = "1.7"$/;"	v
g:colors_name	.\colors\custom_elflord.vim	/^let g:colors_name = "custom_elflord"$/;"	v
g:colors_name	.\colors\leo.vim	/^let g:colors_name = "leo256"$/;"	v
g:colors_name	colors/custom_elflord.vim	/^let g:colors_name = "custom_elflord"$/;"	v
g:dbext_dbi_debug	.\autoload\dbext_dbi.vim	/^   let g:dbext_dbi_debug = 0$/;"	v
g:dbext_dbi_max_rows	.\autoload\dbext_dbi.vim	/^   let g:dbext_dbi_max_rows = 300$/;"	v
g:dbext_dbi_msg	.\autoload\dbext_dbi.vim	/^   let g:dbext_dbi_msg = ""$/;"	v
g:dbext_dbi_result	.\autoload\dbext_dbi.vim	/^   let g:dbext_dbi_result = -1$/;"	v
g:dbext_dbi_sql	.\autoload\dbext_dbi.vim	/^   let g:dbext_dbi_sql = ""$/;"	v
g:dbext_dbi_trace_level	.\autoload\dbext_dbi.vim	/^   let g:dbext_dbi_trace_level = 0$/;"	v
g:dbext_default_dbi_column_delimiter	.\autoload\dbext_dbi.vim	/^   let g:dbext_default_dbi_column_delimiter = "  "$/;"	v
g:dbext_default_menu_mode	.\plugin\dbext.vim	/^    let g:dbext_default_menu_mode = 3$/;"	v
g:dechomode	.\plugin\Decho.vim	/^ let g:dechomode= s:DECHOWIN$/;"	v
g:dechovarname	.\plugin\Decho.vim	/^ let g:dechovarname = "g:dechovar"$/;"	v
g:decho_bufenter	.\plugin\Decho.vim	/^ let g:decho_bufenter= 0$/;"	v
g:decho_bufname	.\plugin\Decho.vim	/^ let g:decho_bufname= "DBG"$/;"	v
g:decho_winheight	.\plugin\Decho.vim	/^ let g:decho_winheight= 5$/;"	v
g:did_ft	.\plugin\snipMate.vim	/^let g:did_ft = {}$/;"	v
g:did_info_syntax_inits	.\syntax\info.vim	/^  let g:did_info_syntax_inits = 1$/;"	v
g:diffchanges_diff	.\plugin\diffchanges.vim	/^let g:diffchanges_diff = []$/;"	v
g:diffchanges_patch	.\plugin\diffchanges.vim	/^let g:diffchanges_patch = []$/;"	v
g:diffchanges_patch_cmd	.\plugin\diffchanges.vim	/^	let g:diffchanges_patch_cmd = 'diff -u'$/;"	v
g:DrChipTopLvlMenu	.\plugin\AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:EasyGrepAllOptionsInExplorer	.\plugin\EasyGrep.vim	/^    let g:EasyGrepAllOptionsInExplorer=0$/;"	v
g:EasyGrepCommand	.\plugin\EasyGrep.vim	/^    let g:EasyGrepCommand=0$/;"	v
g:EasyGrepEveryMatch	.\plugin\EasyGrep.vim	/^    let g:EasyGrepEveryMatch=0$/;"	v
g:EasyGrepExtraWarnings	.\plugin\EasyGrep.vim	/^    let g:EasyGrepExtraWarnings=1$/;"	v
g:EasyGrepFileAssociationsInExplorer	.\plugin\EasyGrep.vim	/^    let g:EasyGrepFileAssociationsInExplorer=1$/;"	v
g:EasyGrepHidden	.\plugin\EasyGrep.vim	/^    let g:EasyGrepHidden=0$/;"	v
g:EasyGrepIgnoreCase	.\plugin\EasyGrep.vim	/^    let g:EasyGrepIgnoreCase=&ignorecase$/;"	v
g:EasyGrepInvertWholeWord	.\plugin\EasyGrep.vim	/^    let g:EasyGrepInvertWholeWord=0$/;"	v
g:EasyGrepJumpToMatch	.\plugin\EasyGrep.vim	/^    let g:EasyGrepJumpToMatch=1$/;"	v
g:EasyGrepMode	.\plugin\EasyGrep.vim	/^        let g:EasyGrepMode = 0$/;"	v
g:EasyGrepMode	.\plugin\EasyGrep.vim	/^    let g:EasyGrepMode=0$/;"	v
g:EasyGrepOpenWindowOnMatch	.\plugin\EasyGrep.vim	/^    let g:EasyGrepOpenWindowOnMatch=1$/;"	v
g:EasyGrepOptionPrefix	.\plugin\EasyGrep.vim	/^    let g:EasyGrepOptionPrefix='<leader>vy'$/;"	v
g:EasyGrepRecursive	.\plugin\EasyGrep.vim	/^    let g:EasyGrepRecursive=0$/;"	v
g:EasyGrepReplaceAllPerFile	.\plugin\EasyGrep.vim	/^    let g:EasyGrepReplaceAllPerFile=0$/;"	v
g:EasyGrepReplaceWindowMode	.\plugin\EasyGrep.vim	/^        let g:EasyGrepReplaceWindowMode = 0$/;"	v
g:EasyGrepReplaceWindowMode	.\plugin\EasyGrep.vim	/^    let g:EasyGrepReplaceWindowMode=0$/;"	v
g:EasyGrepVersion	.\plugin\EasyGrep.vim	/^let g:EasyGrepVersion = "0.95"$/;"	v
g:EasyGrepWindow	.\plugin\EasyGrep.vim	/^    let g:EasyGrepWindow=0$/;"	v
g:FindFileIgnore	.\plugin\FindFile.vim	/^    let g:FindFileIgnore = ['*.o', '*.pyc', '*\/tmp\/*']$/;"	v
g:GetLatestVimScripts_allowautoinstall	.\autoload\getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	.\autoload\getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	.\autoload\getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_wget	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	.\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:getscript_cygwin	.\autoload\getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	.\autoload\getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	.\autoload\getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:getscript_shq	.\autoload\getscript.vim	/^   let g:getscript_shq= "'"$/;"	v
g:getscript_shq	.\autoload\getscript.vim	/^   let g:getscript_shq= '"'$/;"	v
g:getscript_shq	.\autoload\getscript.vim	/^  let g:getscript_shq= "'"$/;"	v
g:getscript_shq	.\autoload\getscript.vim	/^  let g:getscript_shq= &shq$/;"	v
g:getscript_shq	.\autoload\getscript.vim	/^  let g:getscript_shq= &sxq$/;"	v
g:getscript_shq	.\autoload\getscript.vim	/^ let g:getscript_shq= g:netrw_shq$/;"	v
g:ghc	.\compiler\ghc.vim	/^    let g:ghc = 'ghc'$/;"	v
g:ghc	.\ftplugin\haskell_doc.vim	/^    let g:ghc = 'ghc'$/;"	v
g:ghc_pkg	.\ftplugin\haskell_doc.vim	/^  let g:ghc_pkg = substitute(g:ghc,'\\(.*\\)ghc','\\1ghc-pkg','')$/;"	v
g:haddock_browser_callformat	.\ftplugin\haskell_doc.vim	/^      let g:haddock_browser_callformat = '%s %s '.printf(&shellredir,'\/dev\/null').' &'$/;"	v
g:haddock_browser_callformat	.\ftplugin\haskell_doc.vim	/^      let g:haddock_browser_callformat = '%s %s'$/;"	v
g:haddock_browser_callformat	.\ftplugin\haskell_doc.vim	/^    let g:haddock_browser_callformat = 'start %s "%s"'$/;"	v
g:haddock_index	.\ftplugin\haskell_doc.vim	/^let g:haddock_index = {}$/;"	v
g:haddock_moduleindex	.\ftplugin\haskell_doc.vim	/^let g:haddock_moduleindex = {}$/;"	v
g:haskell_functions	.\compiler\ghc.vim	/^let g:haskell_functions = "ghc"$/;"	v
g:haskell_search_engines	.\ftplugin\haskell_doc.vim	/^  let g:haskell_search_engines = $/;"	v
g:last_action_line	.\plugin\symfony.vim	/^let g:last_action_line = []$/;"	v
g:last_template_line	.\plugin\symfony.vim	/^let g:last_template_line = []$/;"	v
g:loaded_Align	.\autoload\Align.vim	/^let g:loaded_Align = "v35"$/;"	v
g:loaded_AlignMaps	.\autoload\AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/;"	v
g:loaded_AlignMapsPlugin	.\plugin\AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/;"	v
g:loaded_AlignPlugin	.\plugin\AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/;"	v
g:loaded_cecutil	.\plugin\cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_dbext	.\plugin\dbext.vim	/^let g:loaded_dbext = 1000$/;"	v
g:loaded_dbext_auto	.\autoload\dbext.vim	/^let g:loaded_dbext_auto = 1000$/;"	v
g:loaded_dbext_dbi	.\autoload\dbext_dbi.vim	/^    let g:loaded_dbext_dbi = -1$/;"	v
g:loaded_dbext_dbi	.\autoload\dbext_dbi.vim	/^let g:loaded_dbext_dbi = 1000$/;"	v
g:loaded_dbext_dbi_msg	.\autoload\dbext_dbi.vim	/^    let g:loaded_dbext_dbi_msg = 'Vim does not have perl support enabled'$/;"	v
g:loaded_Decho	.\plugin\Decho.vim	/^let g:loaded_Decho = "v20"$/;"	v
g:loaded_getscript	.\autoload\getscript.vim	/^let g:loaded_getscript= "v29"$/;"	v
g:loaded_getscriptPlugin	.\plugin\getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v29"$/;"	v
g:loaded_rails	.\plugin\rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_repeat	.\autoload\repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_surround	.\plugin\surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntax_info	.\syntax\info.vim	/^let g:loaded_syntax_info= "v1"$/;"	v
g:loaded_ZoomWin	.\autoload\ZoomWin.vim	/^let g:loaded_ZoomWin = "v23"$/;"	v
g:loaded_ZoomWinPlugin	.\plugin\ZoomWinPlugin.vim	/^let g:loaded_ZoomWinPlugin = "v23"$/;"	v
g:makeArgumentList	.\autoload\genutils.vim	/^let g:makeArgumentList = 'exec genutils#MakeArgumentList()'$/;"	v
g:makeArgumentString	.\autoload\genutils.vim	/^let g:makeArgumentString = 'exec genutils#MakeArgumentString()'$/;"	v
g:NERDTreeIgnore	.\plugin\NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	.\plugin\NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:Projects	.\plugin\proj.vim	/^let g:Projects = s:LoadProjects()$/;"	v
g:repeat_tick	.\autoload\repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:sf_app_name	.\plugin\symfony.vim	/^let g:sf_app_name      = ""$/;"	v
g:sf_module_name	.\plugin\symfony.vim	/^let g:sf_module_name   = "" $/;"	v
g:ST_WIN_CMD	.\autoload\genutils.vim	/^let g:ST_WIN_CMD = 0 | let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2$/;"	v
g:utl_cfg_hdl_mt_application_excel	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_application_excel   = ':!soffice %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_application_pdf	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_application_pdf     = ':!evince  %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_application_x_bzip2	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_application_x_bzip2 = ':!squeeze %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_application_x_gzip	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_application_x_gzip  = ':!squeeze %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_application_zip	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_application_zip     = ':!squeeze %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_generic	.\plugin\utl_rc.vim	/^    let g:utl_cfg_hdl_mt_generic = 'silent !cmd \/q \/c start "dummy title" "%P"'$/;"	v
g:utl_cfg_hdl_mt_generic	.\plugin\utl_rc.vim	/^    let g:utl_cfg_hdl_mt_generic = 'silent !xdg-open %p &'$/;"	v
g:utl_cfg_hdl_mt_generic	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_generic = 'silent !cmd \/q \/c start "dummy title" "%P"'$/;"	v
g:utl_cfg_hdl_mt_image_generic	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_image_generic = ':!gliv %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_image_gif	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_image_gif     = ':!gliv %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_image_jpeg	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_image_jpeg    = ':!gliv %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_image_png	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_image_png     = ':!gliv %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_text_directory	.\plugin\utl_rc.vim	/^  let g:utl_cfg_hdl_mt_text_directory=utl_cfg_hdl_mt_text_directory__cmd$/;"	v
g:utl_cfg_hdl_mt_text_directory	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_text_directory = ':!start explorer "%P"'$/;"	v
g:utl_cfg_hdl_mt_text_directory	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_text_directory = ':!thunar %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_mt_text_directory__cmd	.\plugin\utl_rc.vim	/^  let g:utl_cfg_hdl_mt_text_directory__cmd = ':!start explorer "%P"'   " Dos box$/;"	v
g:utl_cfg_hdl_mt_text_directory__cmd	.\plugin\utl_rc.vim	/^  let g:utl_cfg_hdl_mt_text_directory__cmd = ':!thunar %p &'$/;"	v
g:utl_cfg_hdl_mt_text_directory__vim	.\plugin\utl_rc.vim	/^let g:utl_cfg_hdl_mt_text_directory__vim = 'VIM'   " Vim builtin file explorer$/;"	v
g:utl_cfg_hdl_mt_video_x_msvideo	.\startup\utl.vim	/^  let g:utl_cfg_hdl_mt_video_x_msvideo = ':!smplayer %p &> \/dev\/null &'$/;"	v
g:utl_cfg_hdl_scm_http	.\plugin\utl_rc.vim	/^    let g:utl_cfg_hdl_scm_http=g:utl_cfg_hdl_scm_http_system$/;"	v
g:utl_cfg_hdl_scm_http_system	.\plugin\utl_rc.vim	/^    let g:utl_cfg_hdl_scm_http_system = "silent call system('xdg-open %u & &> \/dev\/null') | redraw!"$/;"	v
g:utl_cfg_hdl_scm_http_system	.\plugin\utl_rc.vim	/^    let g:utl_cfg_hdl_scm_http_system = 'silent !cmd \/q \/c start "dummy title" "%u"'$/;"	v
g:utl_cfg_hdl_scm_http__wget	.\plugin\utl_rc.vim	/^let g:utl_cfg_hdl_scm_http__wget="call Utl_if_hdl_scm_http__wget('%u')"$/;"	v
g:utl_cfg_hdl_scm_mailto	.\plugin\utl_rc.vim	/^    let g:utl_cfg_hdl_scm_mailto = 'silent !cmd \/q \/c start "dummy title" "%u"'$/;"	v
g:utl_cfg_hdl_scm_mail__outlook	.\plugin\utl_rc.vim	/^  let g:utl_cfg_hdl_scm_mail__outlook = "call Utl_if_hdl_scm_mail__outlook('%a','%p','%d','%f','%s')"$/;"	v
g:utl_cfg_hdl_scm_scp	.\plugin\utl_rc.vim	/^  let g:utl_cfg_hdl_scm_scp = "silent %d %u"$/;"	v
g:utl__file	.\plugin\utl.vim	/^let g:utl__file = expand("<sfile>")$/;"	v
g:utl__file_scm	.\plugin\utl_scm.vim	/^let g:utl__file_scm = expand("<sfile>")$/;"	v
g:utl__file_uri	.\plugin\utl_uri.vim	/^let g:utl__file_uri = expand("<sfile>")$/;"	v
g:wget	.\ftplugin\haskell_hpaste.vim	/^    let g:wget = "!c:\\\\cygwin\\\\bin\\\\wget -q"$/;"	v
g:wget	.\ftplugin\haskell_hpaste.vim	/^    let g:wget = "!wget -q"$/;"	v
g:__CUTEERRORMARKER_VIM__	.\plugin\cuteErrorMarker.vim	/^let g:__CUTEERRORMARKER_VIM__ = 1$/;"	v
genutils#AddNotifyWindowClose	.\autoload\genutils.vim	/^function! genutils#AddNotifyWindowClose(windowTitle, functionName)$/;"	f
genutils#AddToFCShellPre	.\autoload\genutils.vim	/^function! genutils#AddToFCShellPre(funcName)$/;"	f
genutils#AlignWordWithWordInPreviousLine	.\autoload\genutils.vim	/^function! genutils#AlignWordWithWordInPreviousLine()$/;"	f
genutils#ArrayVarExists	.\autoload\genutils.vim	/^function! genutils#ArrayVarExists(varName, index)$/;"	f
genutils#BinInsertSort	.\autoload\genutils.vim	/^function! genutils#BinInsertSort(cmp, direction) range$/;"	f
genutils#BinInsertSort2	.\autoload\genutils.vim	/^function! genutils#BinInsertSort2(start, end, cmp, direction, accessor, mover, context)$/;"	f
genutils#BinSearchForInsert	.\autoload\genutils.vim	/^function! genutils#BinSearchForInsert(start, end, line, cmp, direction)$/;"	f
genutils#BinSearchForInsert2	.\autoload\genutils.vim	/^function! genutils#BinSearchForInsert2(start, end, line, cmp, direction,$/;"	f
genutils#BinSearchList	.\autoload\genutils.vim	/^function! genutils#BinSearchList(list, start, end, item, cmp)$/;"	f
genutils#CenterWordInSpace	.\autoload\genutils.vim	/^function! genutils#CenterWordInSpace()$/;"	f
genutils#CheckWindowClose	.\autoload\genutils.vim	/^function! genutils#CheckWindowClose()$/;"	f
genutils#CleanDiffOptions	.\autoload\genutils.vim	/^function! genutils#CleanDiffOptions()$/;"	f
genutils#CleanupFileName	.\autoload\genutils.vim	/^function! genutils#CleanupFileName(fileName)$/;"	f
genutils#CleanupFileName2	.\autoload\genutils.vim	/^function! genutils#CleanupFileName2(fileName, win32ProtectedChars)$/;"	f
genutils#ClearAllSigns	.\autoload\genutils.vim	/^function! genutils#ClearAllSigns()$/;"	f
genutils#CloseWindow	.\autoload\genutils.vim	/^function! genutils#CloseWindow(win, force)$/;"	f
genutils#CloseWinNoEa	.\autoload\genutils.vim	/^function! genutils#CloseWinNoEa(winnr, force)$/;"	f
genutils#CmpByLength	.\autoload\genutils.vim	/^function! genutils#CmpByLength(line1, line2, ...)$/;"	f
genutils#CmpByLineLengthNname	.\autoload\genutils.vim	/^function! genutils#CmpByLineLengthNname(line1, line2, ...)$/;"	f
genutils#CmpByNumber	.\autoload\genutils.vim	/^function! genutils#CmpByNumber(line1, line2, ...)$/;"	f
genutils#CmpByString	.\autoload\genutils.vim	/^function! genutils#CmpByString(line1, line2, ...)$/;"	f
genutils#CmpByStringIgnoreCase	.\autoload\genutils.vim	/^function! genutils#CmpByStringIgnoreCase(line1, line2, ...)$/;"	f
genutils#CmpJavaImports	.\autoload\genutils.vim	/^function! genutils#CmpJavaImports(line1, line2, ...)$/;"	f
genutils#CommonPath	.\autoload\genutils.vim	/^function! genutils#CommonPath(path1, path2, ...)$/;"	f
genutils#CommonString	.\autoload\genutils.vim	/^function! genutils#CommonString(str1, str2)$/;"	f
genutils#CreateArgString	.\autoload\genutils.vim	/^function! genutils#CreateArgString(argList, sep, ...)$/;"	f
genutils#CrUnProtectedCharsPattern	.\autoload\genutils.vim	/^function! genutils#CrUnProtectedCharsPattern(chars, ...)$/;"	f
genutils#CurLineHasSign	.\autoload\genutils.vim	/^function! genutils#CurLineHasSign()$/;"	f
genutils#DebugShowArgs	.\autoload\genutils.vim	/^function! genutils#DebugShowArgs(...)$/;"	f
genutils#DeEscape	.\autoload\genutils.vim	/^function! genutils#DeEscape(str)$/;"	f
genutils#DefFCShellInstall	.\autoload\genutils.vim	/^function! genutils#DefFCShellInstall()$/;"	f
genutils#DefFCShellUninstall	.\autoload\genutils.vim	/^function! genutils#DefFCShellUninstall()$/;"	f
genutils#DefFileChangedShell	.\autoload\genutils.vim	/^function! genutils#DefFileChangedShell()$/;"	f
genutils#EatChar	.\autoload\genutils.vim	/^function! genutils#EatChar(pat)$/;"	f
genutils#Escape	.\autoload\genutils.vim	/^function! genutils#Escape(str, chars)$/;"	f
genutils#EscapeCommand	.\autoload\genutils.vim	/^function! genutils#EscapeCommand(cmd, args, pipe)$/;"	f
genutils#ExpandStr	.\autoload\genutils.vim	/^function! genutils#ExpandStr(str)$/;"	f
genutils#ExtractFuncListing	.\autoload\genutils.vim	/^function! genutils#ExtractFuncListing(funcName, hLines, tLines)$/;"	f
genutils#FindBufferForName	.\autoload\genutils.vim	/^function! genutils#FindBufferForName(fileName)$/;"	f
genutils#FindWindowForBuffer	.\autoload\genutils.vim	/^function! genutils#FindWindowForBuffer(bufferName, checkUnlisted)$/;"	f
genutils#GetBufNameForAu	.\autoload\genutils.vim	/^function! genutils#GetBufNameForAu(bufName)$/;"	f
genutils#GetColPosition	.\autoload\genutils.vim	/^function! genutils#GetColPosition(id)$/;"	f
genutils#GetLastWinnrInStack	.\autoload\genutils.vim	/^function! genutils#GetLastWinnrInStack(dir)$/;"	f
genutils#GetLinePosition	.\autoload\genutils.vim	/^function! genutils#GetLinePosition(id)$/;"	f
genutils#GetNextWinnrInStack	.\autoload\genutils.vim	/^function! genutils#GetNextWinnrInStack(dir)$/;"	f
genutils#GetPersistentVar	.\autoload\genutils.vim	/^function! genutils#GetPersistentVar(pluginName, persistentVar, default)$/;"	f
genutils#GetPreviewWinnr	.\autoload\genutils.vim	/^function! genutils#GetPreviewWinnr()$/;"	f
genutils#GetSelectedIndex	.\autoload\genutils.vim	/^function! genutils#GetSelectedIndex()$/;"	f
genutils#GetShellEnvType	.\autoload\genutils.vim	/^function! genutils#GetShellEnvType()$/;"	f
genutils#GetSpacer	.\autoload\genutils.vim	/^function! genutils#GetSpacer(width)$/;"	f
genutils#GetVimCmdOutput	.\autoload\genutils.vim	/^function! genutils#GetVimCmdOutput(cmd)$/;"	f
genutils#IsOnlyHorizontalWindow	.\autoload\genutils.vim	/^function! genutils#IsOnlyHorizontalWindow()$/;"	f
genutils#IsOnlyVerticalWindow	.\autoload\genutils.vim	/^function! genutils#IsOnlyVerticalWindow()$/;"	f
genutils#IsPositionSet	.\autoload\genutils.vim	/^function! genutils#IsPositionSet(id)$/;"	f
genutils#MakeArgumentList	.\autoload\genutils.vim	/^function! genutils#MakeArgumentList(...)$/;"	f
genutils#MakeArgumentString	.\autoload\genutils.vim	/^function! genutils#MakeArgumentString(...)$/;"	f
genutils#MapAppendCascaded	.\autoload\genutils.vim	/^function! genutils#MapAppendCascaded(lhs, rhs, mapMode)$/;"	f
genutils#MarkActiveWindow	.\autoload\genutils.vim	/^function! genutils#MarkActiveWindow()$/;"	f
genutils#MoveCurLineToWinLine	.\autoload\genutils.vim	/^function! genutils#MoveCurLineToWinLine(n)$/;"	f
genutils#MoveCursorToLastInWinStack	.\autoload\genutils.vim	/^function! genutils#MoveCursorToLastInWinStack(dir)$/;"	f
genutils#MoveCursorToNextInWinStack	.\autoload\genutils.vim	/^function! genutils#MoveCursorToNextInWinStack(dir)$/;"	f
genutils#MoveCursorToWindow	.\autoload\genutils.vim	/^function! genutils#MoveCursorToWindow(winno)$/;"	f
genutils#NumberOfWindows	.\autoload\genutils.vim	/^function! genutils#NumberOfWindows()$/;"	f
genutils#OnMS	.\autoload\genutils.vim	/^function! genutils#OnMS()$/;"	f
genutils#OpenWinNoEa	.\autoload\genutils.vim	/^function! genutils#OpenWinNoEa(winOpenCmd)$/;"	f
genutils#OptClearBuffer	.\autoload\genutils.vim	/^function! genutils#OptClearBuffer()$/;"	f
genutils#PathIsAbsolute	.\autoload\genutils.vim	/^function! genutils#PathIsAbsolute(path)$/;"	f
genutils#PathIsFileNameOnly	.\autoload\genutils.vim	/^function! genutils#PathIsFileNameOnly(path)$/;"	f
genutils#PromptForElement	.\autoload\genutils.vim	/^function! genutils#PromptForElement(array, default, msg, skip, useDialog,$/;"	f
genutils#PutPersistentVar	.\autoload\genutils.vim	/^function! genutils#PutPersistentVar(pluginName, persistentVar, value)$/;"	f
genutils#QSort	.\autoload\genutils.vim	/^function! genutils#QSort(cmp, direction) range$/;"	f
genutils#QSort2	.\autoload\genutils.vim	/^function! genutils#QSort2(start, end, cmp, direction, accessor, swapper, context)$/;"	f
genutils#QuoteStr	.\autoload\genutils.vim	/^function! genutils#QuoteStr(str)$/;"	f
genutils#RelPathFromDir	.\autoload\genutils.vim	/^function! genutils#RelPathFromDir(srcDir, tgtFile)$/;"	f
genutils#RelPathFromFile	.\autoload\genutils.vim	/^function! genutils#RelPathFromFile(srcFile, tgtFile)$/;"	f
genutils#RemoveFromFCShellPre	.\autoload\genutils.vim	/^function! genutils#RemoveFromFCShellPre(funcName)$/;"	f
genutils#RemoveNotifyWindowClose	.\autoload\genutils.vim	/^function! genutils#RemoveNotifyWindowClose(windowTitle)$/;"	f
genutils#ResetHardPosition	.\autoload\genutils.vim	/^function! genutils#ResetHardPosition(id)$/;"	f
genutils#ResetHardPositionWithContext	.\autoload\genutils.vim	/^function! genutils#ResetHardPositionWithContext(id)$/;"	f
genutils#ResetSoftPosition	.\autoload\genutils.vim	/^function! genutils#ResetSoftPosition(id)$/;"	f
genutils#ResetWindowSettings	.\autoload\genutils.vim	/^function! genutils#ResetWindowSettings()$/;"	f
genutils#ResetWindowSettings2	.\autoload\genutils.vim	/^function! genutils#ResetWindowSettings2(id)$/;"	f
genutils#RestoreActiveWindow	.\autoload\genutils.vim	/^function! genutils#RestoreActiveWindow()$/;"	f
genutils#RestoreHardPosition	.\autoload\genutils.vim	/^function! genutils#RestoreHardPosition(id)$/;"	f
genutils#RestoreHardPositionWithContext	.\autoload\genutils.vim	/^function! genutils#RestoreHardPositionWithContext(id)$/;"	f
genutils#RestoreSoftPosition	.\autoload\genutils.vim	/^function! genutils#RestoreSoftPosition(id)$/;"	f
genutils#RestoreVisualSelection	.\autoload\genutils.vim	/^function! genutils#RestoreVisualSelection(id)$/;"	f
genutils#RestoreWindowSettings	.\autoload\genutils.vim	/^function! genutils#RestoreWindowSettings()$/;"	f
genutils#RestoreWindowSettings2	.\autoload\genutils.vim	/^function! genutils#RestoreWindowSettings2(id)$/;"	f
genutils#Roman2Decimal	.\autoload\genutils.vim	/^function! genutils#Roman2Decimal(str)$/;"	f
genutils#SaveHardPosition	.\autoload\genutils.vim	/^function! genutils#SaveHardPosition(id)$/;"	f
genutils#SaveHardPositionWithContext	.\autoload\genutils.vim	/^function! genutils#SaveHardPositionWithContext(id)$/;"	f
genutils#SaveSoftPosition	.\autoload\genutils.vim	/^function! genutils#SaveSoftPosition(id)$/;"	f
genutils#SaveVisualSelection	.\autoload\genutils.vim	/^function! genutils#SaveVisualSelection(id)$/;"	f
genutils#SaveWindowSettings	.\autoload\genutils.vim	/^function! genutils#SaveWindowSettings()$/;"	f
genutils#SaveWindowSettings2	.\autoload\genutils.vim	/^function! genutils#SaveWindowSettings2(id, overwrite)$/;"	f
genutils#SetupScratchBuffer	.\autoload\genutils.vim	/^function! genutils#SetupScratchBuffer()$/;"	f
genutils#ShiftWordInSpace	.\autoload\genutils.vim	/^function! genutils#ShiftWordInSpace(dir)$/;"	f
genutils#ShowLinesWithSyntax	.\autoload\genutils.vim	/^function! genutils#ShowLinesWithSyntax() range$/;"	f
genutils#SilentDelete	.\autoload\genutils.vim	/^function! genutils#SilentDelete(arg1, ...)$/;"	f
genutils#SilentSubstitute	.\autoload\genutils.vim	/^function! genutils#SilentSubstitute(pat, cmd)$/;"	f
genutils#UnEscape	.\autoload\genutils.vim	/^function! genutils#UnEscape(str, chars)$/;"	f
genutils#UserDirComplete2	.\autoload\genutils.vim	/^function! genutils#UserDirComplete2(ArgLead, CmdLine, CursorPos, ...)$/;"	f
genutils#UserFileComplete	.\autoload\genutils.vim	/^function! genutils#UserFileComplete(ArgLead, CmdLine, CursorPos, smartSlash,$/;"	f
genutils#UserFileComplete2	.\autoload\genutils.vim	/^function! genutils#UserFileComplete2(ArgLead, CmdLine, CursorPos, ...)$/;"	f
genutils#UserFileExpand	.\autoload\genutils.vim	/^function! genutils#UserFileExpand(fileArgs)$/;"	f
GetActionNameFromAction	.\plugin\symfony.vim	/^function! GetActionNameFromAction(action_name)$/;"	f
GetActionNameFromActionFileName	.\plugin\symfony.vim	/^function! GetActionNameFromActionFileName(action_file_name)$/;"	f
GetBufferIdList	.\plugin\EasyGrep.vim	/^function! s:GetBufferIdList()$/;"	f
GetBufferNamesList	.\plugin\EasyGrep.vim	/^function! s:GetBufferNamesList()$/;"	f
GetBuffersOutput	.\plugin\EasyGrep.vim	/^function! s:GetBuffersOutput()$/;"	f
getchar	.\plugin\surround.vim	/^function! s:getchar()$/;"	f
GetCommenter	.\plugin\LineCommenter.vim	/^function GetCommenter(StringKey)$/;"	f
GetComponentNameFromComponentFileName	.\plugin\symfony.vim	/^function! GetComponentNameFromComponentFileName(component_file_name)$/;"	f
GetErrorList	.\plugin\EasyGrep.vim	/^function! s:GetErrorList()$/;"	f
GetErrorListName	.\plugin\EasyGrep.vim	/^function! s:GetErrorListName()$/;"	f
GetExecuteActionNameFromAction	.\plugin\symfony.vim	/^function! GetExecuteActionNameFromAction(action_name)$/;"	f
GetFileAssociationList	.\plugin\EasyGrep.vim	/^function! s:GetFileAssociationList()$/;"	f
GetFileName	.\plugin\symfony.vim	/^function! GetFileName(file)$/;"	f
GetHeadOfLine	.\plugin\LineCommenter.vim	/^function GetHeadOfLine(Commenter)$/;"	f
GetHeadOfLineWithSpace	.\plugin\LineCommenter.vim	/^function GetHeadOfLineWithSpace(Commenter)$/;"	f
GetKeyFromLink	.\plugin\EasyGrep.vim	/^function! s:GetKeyFromLink(str)$/;"	f
GetLatestVimScripts	.\autoload\getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	.\plugin\getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetNextWinnrInStack	.\autoload\genutils.vim	/^function! s:GetNextWinnrInStack(dir)$/;"	f
GetNthElement	.\autoload\tlib\list.vim	/^function! s:GetNthElement(n, lists, default) "{{{3$/;"	f
GetOneScript	.\autoload\getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
getopt	.\autoload\rails.vim	/^function! s:getopt(opt,...)$/;"	f
getPath	.\plugin\NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
GetPhpIndent	.\indent\unused.vim	/^function GetPhpIndent()$/;"	f
GetPhpIndent	indent/php.vim	/^function GetPhpIndent()$/;"	f
getpidfor	.\autoload\rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
GetProject	.\plugin\proj.vim	/^function! s:GetProject(name)$/;"	f
GetSavedName	.\plugin\EasyGrep.vim	/^function! s:GetSavedName(var)$/;"	f
GetScript	.\autoload\getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
getscript#GetLatestVimScripts	.\autoload\getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
GetScripts	.\plugin\getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetSearchPatternFriendlyName	.\plugin\EasyGrep.vim	/^function! s:GetSearchPatternFriendlyName()$/;"	f
getSelectedBookmark	.\plugin\NERD_tree.vim	/^function! s:getSelectedBookmark()$/;"	f
GetSnippet	.\plugin\snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	.\plugin\snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetSuccessTemplateFromAction	.\plugin\symfony.vim	/^function! GetSuccessTemplateFromAction(action_name)$/;"	f
GetSuccessTemplateFromComponent	.\plugin\symfony.vim	/^function! GetSuccessTemplateFromComponent(component_name)$/;"	f
GetTag	.\autoload\ttags.vim	/^function! s:GetTag(world, id) "{{{3$/;"	f
GetToken	.\plugin\calendar.vim	/^function! s:GetToken(src,dlm,cnt)$/;"	f
getTreeWinNum	.\plugin\NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
GetVisibleBuffers	.\plugin\EasyGrep.vim	/^function! s:GetVisibleBuffers()$/;"	f
GetWinDim	.\autoload\genutils.vim	/^function! s:GetWinDim(dir, win)$/;"	f
GHCi	.\compiler\ghc.vim	/^command! -nargs=1 GHCi redraw | echo system(g:ghc. ' ' . b:ghc_staticoptions .' '.expand("%").' -e "'.escape(<f-args>,'"').'"')$/;"	c
GHCReload	.\compiler\ghc.vim	/^command! GHCReload call GHC_BrowseAll()$/;"	c
GHCStaticOptions	.\compiler\ghc.vim	/^command! GHCStaticOptions call GHC_StaticOptions()$/;"	c
GHC_BrowseAll	.\compiler\ghc.vim	/^function! GHC_BrowseAll()$/;"	f
GHC_BrowseBangStar	.\compiler\ghc.vim	/^function! GHC_BrowseBangStar(module)$/;"	f
GHC_BrowseMultiple	.\compiler\ghc.vim	/^function! GHC_BrowseMultiple(imports,modules)$/;"	f
GHC_CompleteImports	.\compiler\ghc.vim	/^function! GHC_CompleteImports(findstart, base)$/;"	f
GHC_CountErrors	.\compiler\ghc.vim	/^function! GHC_CountErrors()$/;"	f
GHC_CreateTagfile	.\compiler\ghc.vim	/^function! GHC_CreateTagfile()$/;"	f
GHC_HaveTypes	.\compiler\ghc.vim	/^function! GHC_HaveTypes()$/;"	f
GHC_Info	.\compiler\ghc.vim	/^function! GHC_Info(what)$/;"	f
GHC_MkImportsExplicit	.\compiler\ghc.vim	/^function! GHC_MkImportsExplicit()$/;"	f
GHC_NameCurrent	.\compiler\ghc.vim	/^function! GHC_NameCurrent()$/;"	f
GHC_Process	.\compiler\ghc.vim	/^function! GHC_Process(imports,output)$/;"	f
GHC_ProcessBang	.\compiler\ghc.vim	/^function! GHC_ProcessBang(module,output)$/;"	f
GHC_ShowInfo	.\compiler\ghc.vim	/^function! GHC_ShowInfo()$/;"	f
GHC_ShowType	.\compiler\ghc.vim	/^function! GHC_ShowType(addTypeDecl)$/;"	f
GHC_StaticOptions	.\compiler\ghc.vim	/^function! GHC_StaticOptions()$/;"	f
ghc_supported_languages	.\compiler\ghc.vim	/^  let ghc_supported_languages = split(system(g:ghc . ' --supported-languages'),'\\n')$/;"	v
GHC_TypeBalloon	.\compiler\ghc.vim	/^  function! GHC_TypeBalloon()$/;"	f
ghc_version	.\compiler\ghc.vim	/^let ghc_version = substitute(system(g:ghc . ' --numeric-version'),'\\n','','')$/;"	v
GHC_VersionGE	.\compiler\ghc.vim	/^function! GHC_VersionGE(target)$/;"	f
GHC_VersionGE	.\ftplugin\haskell_doc.vim	/^function! GHC_VersionGE(target)$/;"	f
gm	.\ftplugin\php.vim	/^nmap <buffer> gm :exe ":Utl ol http:\/\/php.net\/manual-lookup.php?pattern=" . expand("<cword>")<cr>$/;"	m
gm	ftplugin/php.vim	/^nmap <buffer> gm :exe ":Utl ol http:\/\/php.net\/manual-lookup.php?pattern=" . expand("<cword>")<cr>$/;"	m
GotoWinNum	.\autoload\ZoomWin.vim	/^fun! s:GotoWinNum(winnum)$/;"	f
GoWinbufnr	.\plugin\cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
grant	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> grant <C-R>=SqlIab_ReplaceConditionally('grant', 'GRANT')<CR>$/;"	m
Grep	.\plugin\EasyGrep.vim	/^command! -count -bang -nargs=1 Grep :call s:GrepInput( <f-args> , "", "<bang>", "<count>")$/;"	c
GrepAdd	.\plugin\EasyGrep.vim	/^command! -count -bang -nargs=1 GrepAdd :call s:GrepInput( <f-args>, "add", "<bang>", "<count>")$/;"	c
GrepCurrentWord	.\plugin\EasyGrep.vim	/^function! <sid>GrepCurrentWord(add, whole)$/;"	f
GrepInput	.\plugin\EasyGrep.vim	/^function! s:GrepInput(word, add, bang, count)$/;"	f
GrepOptions	.\plugin\EasyGrep.vim	/^command! GrepOptions :call <sid>GrepOptions()$/;"	c
GrepOptions	.\plugin\EasyGrep.vim	/^function! <sid>GrepOptions()$/;"	f
GrepSelection	.\plugin\EasyGrep.vim	/^function! <sid>GrepSelection(add, whole)$/;"	f
GrepSetManual	.\plugin\EasyGrep.vim	/^function! s:GrepSetManual(str)$/;"	f
group	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> group <C-R>=SqlIab_ReplaceConditionally('group', 'GROUP')<CR>$/;"	m
gsub	.\autoload\rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	.\plugin\rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gu	.\ftplugin\nerdtree.vim	/^nmap <buffer> gu :exe printf("Utl ol file:\/\/%s", lib#GetNERDTreePath())<cr><cr>$/;"	m
gu	.\startup\utl.vim	/^nmap gu :Utl<cr>$/;"	m
GUDebugEcho	.\autoload\genutils.vim	/^command! -complete=file -nargs=* GUDebugEcho :echo <q-args>$/;"	c
Haddock	.\ftplugin\haskell_doc.vim	/^function! Haddock()$/;"	f
HaddockIndexLookup	.\ftplugin\haskell_doc.vim	/^function! HaddockIndexLookup(name)$/;"	f
handleMiddleMouse	.\plugin\NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
HasActivatedItem	.\plugin\EasyGrep.vim	/^function! s:HasActivatedItem()$/;"	f
HasFilesThatMatch	.\plugin\EasyGrep.vim	/^function! s:HasFilesThatMatch()$/;"	f
haskellmode#GatherImport	.\autoload\haskellmode.vim	/^function! haskellmode#GatherImport(lineno)$/;"	f
haskellmode#GatherImports	.\autoload\haskellmode.vim	/^function! haskellmode#GatherImports()$/;"	f
haskellmode#GetNameSymbol	.\autoload\haskellmode.vim	/^function! haskellmode#GetNameSymbol(line,col,off)$/;"	f
haskellmode#ListElem	.\autoload\haskellmode.vim	/^function! haskellmode#ListElem(list,elem)$/;"	f
haskellmode#ListIntersect	.\autoload\haskellmode.vim	/^function! haskellmode#ListIntersect(list1,list2)$/;"	f
haskellmode#ListUnion	.\autoload\haskellmode.vim	/^function! haskellmode#ListUnion(list1,list2)$/;"	f
haskellmode#ListWithout	.\autoload\haskellmode.vim	/^function! haskellmode#ListWithout(list1,list2)$/;"	f
haskellmode#MergeImport	.\autoload\haskellmode.vim	/^function! haskellmode#MergeImport(entry,line,hiding,explicit,module)$/;"	f
haskellmode#UrlEncode	.\autoload\haskellmode.vim	/^function! haskellmode#UrlEncode(string)$/;"	f
HaskellSearchEngine	.\ftplugin\haskell_doc.vim	/^function! HaskellSearchEngine(engine)$/;"	f
HasMatches	.\plugin\EasyGrep.vim	/^function! s:HasMatches()$/;"	f
HaveIndex	.\ftplugin\haskell_doc.vim	/^function! HaveIndex()$/;"	f
HaveModuleIndex	.\ftplugin\haskell_doc.vim	/^function! HaveModuleIndex()$/;"	f
having	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> having <C-R>=SqlIab_ReplaceConditionally('having', 'HAVING')<CR>$/;"	m
helperEdit	.\autoload\rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	.\autoload\rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	.\autoload\rails.vim	/^function! s:helpermethods()$/;"	f
HiDefaults	.\autoload\rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	.\syntax\jquery.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\syntax\jquery.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\syntax\txt.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\syntax\txt.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HLTest	.\syntax\Decho.vim	/^  fun! s:HLTest(hlname)$/;"	f
HpasteEditEntry	.\ftplugin\haskell_hpaste.vim	/^command! -nargs=1 HpasteEditEntry call HpasteEditEntry(<f-args>)$/;"	c
HpasteEditEntry	.\ftplugin\haskell_hpaste.vim	/^function! HpasteEditEntry(entry)$/;"	f
HpasteIndex	.\ftplugin\haskell_hpaste.vim	/^command! HpasteIndex call HpasteIndex()$/;"	c
HpasteIndex	.\ftplugin\haskell_hpaste.vim	/^function! HpasteIndex()$/;"	f
HtmlIndentClose	.\indent\unused.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
HtmlIndentClose	indent/php.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
HtmlIndentCloseAlt	.\indent\unused.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentCloseAlt	indent/php.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentOpen	.\indent\unused.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentOpen	indent/php.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentOpenAlt	.\indent\unused.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentOpenAlt	indent/php.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	.\indent\unused.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentPush	indent/php.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	.\indent\unused.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
HtmlIndentSum	indent/php.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
identified	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> identified <C-R>=SqlIab_ReplaceConditionally('identified', 'IDENTIFIED')<CR>$/;"	m
IDoc	.\ftplugin\haskell_doc.vim	/^command! -nargs=+ IDoc call IDoc(<f-args>)$/;"	c
IDoc	.\ftplugin\haskell_doc.vim	/^function! IDoc(name,...) $/;"	f
if	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> if <C-R>=SqlIab_ReplaceConditionally('if', 'IF')<CR>$/;"	m
ImAmInAComponent	.\plugin\symfony.vim	/^function! ImAmInAComponent() $/;"	f
ImAmInAComponentTemplate	.\plugin\symfony.vim	/^function! ImAmInAComponentTemplate()$/;"	f
ImAmInAModule	.\plugin\symfony.vim	/^function! ImAmInAModule() $/;"	f
ImAmInAnAction	.\plugin\symfony.vim	/^function! ImAmInAnAction() $/;"	f
ImAmInAnActionTemplate	.\plugin\symfony.vim	/^function! ImAmInAnActionTemplate()$/;"	f
immediate	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> immediate <C-R>=SqlIab_ReplaceConditionally('immediate', 'IMMEDIATE')<CR>$/;"	m
Import	.\ftplugin\haskell_doc.vim	/^function! Import(module,qualified)$/;"	f
ImportDocIndex	.\ftplugin\haskell_doc.vim	/^command! ImportDocIndex call ImportDocIndex()$/;"	c
ImportDocIndex	.\ftplugin\haskell_doc.vim	/^function! ImportDocIndex()$/;"	f
in	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> in <C-R>=SqlIab_ReplaceConditionally('in', 'IN')<CR>$/;"	m
IncludeMarks	.\plugin\showmarks.vim	/^fun! s:IncludeMarks()$/;"	f
IncludeMarks	plugin/showmarks.vim	/^fun! s:IncludeMarks()$/;"	f
increment	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> increment <C-R>=SqlIab_ReplaceConditionally('increment', 'INCREMENT')<CR>$/;"	m
indentLevelFor	.\plugin\NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
index	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> index <C-R>=SqlIab_ReplaceConditionally('index', 'INDEX')<CR>$/;"	m
inet	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> inet <C-R>=SqlIab_ReplaceConditionally('inet', 'INET')<CR>$/;"	m
Info	.\plugin\EasyGrep.vim	/^function! s:Info(message)$/;"	f
Init	.\autoload\tlib\input.vim	/^function! s:Init(world, cmd) "{{{3$/;"	f
initial	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> initial <C-R>=SqlIab_ReplaceConditionally('initial', 'INITIAL')<CR>$/;"	m
initializerEdit	.\autoload\rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	.\autoload\rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
initNerdTree	.\plugin\NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	.\plugin\NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	.\plugin\NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	.\autoload\rails.vim	/^function! s:initOpenURL()$/;"	f
InitStatusline	.\autoload\rails.vim	/^function! s:InitStatusline()$/;"	f
initVariable	.\plugin\NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
InjectIntoStatusline	.\autoload\rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
inputreplacement	.\plugin\surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	.\plugin\surround.vim	/^function! s:inputtarget()$/;"	f
ins	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> ins <C-R>=SqlIab_ReplaceConditionally('ins', 'INSERT')<CR>$/;"	m
insert	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> insert <C-R>=SqlIab_ReplaceConditionally('insert', 'INSERT')<CR>$/;"	m
Insert	.\plugin\dbext.vim	/^command! -nargs=+ Insert            :call dbext#DB_execSql("insert " . <q-args>)$/;"	c
insert	.\plugin\surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insertNewNode	.\plugin\NERD_tree.vim	/^function! s:insertNewNode()$/;"	f
InsertRefs	.\plugin\matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
int	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> int <C-R>=SqlIab_ReplaceConditionally('int', 'INTEGER')<CR>$/;"	m
int2vector	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> int2vector <C-R>=SqlIab_ReplaceConditionally('int2vector', 'INT2VECTOR')<CR>$/;"	m
integer	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> integer <C-R>=SqlIab_ReplaceConditionally('integer', 'INTEGER')<CR>$/;"	m
integrationtestEdit	.\autoload\rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	.\autoload\rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
intersect	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> intersect <C-R>=SqlIab_ReplaceConditionally('intersect', 'INTERSECT')<CR>$/;"	m
interval	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> interval <C-R>=SqlIab_ReplaceConditionally('interval', 'INTERVAL')<CR>$/;"	m
into	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> into <C-R>=SqlIab_ReplaceConditionally('into', 'INTO')<CR>$/;"	m
Invert	.\autoload\rails.vim	/^function! s:Invert(bang)$/;"	f
invertrange	.\autoload\rails.vim	/^function! s:invertrange(beg,end)$/;"	f
InvokeFuncs	.\autoload\genutils.vim	/^function! s:InvokeFuncs(funcList)$/;"	f
is	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> is <C-R>=SqlIab_ReplaceConditionally('is', 'IS')<CR>$/;"	m
IsLink	.\plugin\EasyGrep.vim	/^function! s:IsLink(str)$/;"	f
IsModeAll	.\plugin\EasyGrep.vim	/^function! s:IsModeAll()$/;"	f
IsModeBuffers	.\plugin\EasyGrep.vim	/^function! s:IsModeBuffers()$/;"	f
IsModeTracked	.\plugin\EasyGrep.vim	/^function! s:IsModeTracked()$/;"	f
IsModeUser	.\plugin\EasyGrep.vim	/^function! s:IsModeUser()$/;"	f
IsRecursive	.\plugin\EasyGrep.vim	/^function! s:IsRecursive(pattern)$/;"	f
isTreeOpen	.\plugin\NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	.\plugin\NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
javascriptEdit	.\autoload\rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	.\autoload\rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jumpToChild	.\plugin\NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	.\plugin\NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	.\plugin\NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	.\plugin\NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	.\plugin\NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	.\plugin\NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
key	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> key <C-R>=SqlIab_ReplaceConditionally('key', 'KEY')<CR>$/;"	m
language	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> language <C-R>=SqlIab_ReplaceConditionally('language', 'LANGUAGE')<CR>$/;"	m
lastformat	.\autoload\rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	.\autoload\rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	.\autoload\rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	.\autoload\rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
layoutEdit	.\autoload\rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	.\autoload\rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
leader	.\plugin\dbext.vim	/^        let leader = g:mapleader$/;"	v
leader	.\plugin\dbext.vim	/^    let leader = '\\'$/;"	v
leader	.\plugin\dbext.vim	/^    let leader = escape(leader, '\\')$/;"	v
level	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> level <C-R>=SqlIab_ReplaceConditionally('level', 'LEVEL')<CR>$/;"	m
lib#AlignSpace	.\autoload\lib.vim	/^function! lib#AlignSpace() range$/;"	f
lib#Capitalize	.\autoload\lib.vim	/^function! lib#Capitalize(word)$/;"	f
lib#CursorIsInsidePhpMarkup	.\autoload\lib.vim	/^function! lib#CursorIsInsidePhpMarkup()$/;"	f
lib#GetNERDTreePath	.\autoload\lib.vim	/^function! lib#GetNERDTreePath()$/;"	f
lib#MapToggle	.\autoload\lib.vim	/^function! lib#MapToggle(key, opt)$/;"	f
libEdit	.\autoload\rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	.\autoload\rails.vim	/^function! s:libList(A,L,P)$/;"	f
line	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> line <C-R>=SqlIab_ReplaceConditionally('line', 'LINE')<CR>$/;"	m
LineCommenter	.\plugin\LineCommenter.vim	/^function LineCommenter()$/;"	f
linepeak	.\autoload\rails.vim	/^function! s:linepeak()$/;"	f
listen	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> listen <C-R>=SqlIab_ReplaceConditionally('listen', 'LISTEN')<CR>$/;"	m
load	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> load <C-R>=SqlIab_ReplaceConditionally('load', 'LOAD')<CR>$/;"	m
loaded_diffchanges	.\plugin\diffchanges.vim	/^let loaded_diffchanges = 1$/;"	v
loaded_genutils	.\plugin\genutils.vim	/^let loaded_genutils = 205$/;"	v
loaded_matchit	.\plugin\matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_nerd_tree	.\plugin\NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_showmarks	.\plugin\showmarks.vim	/^let loaded_showmarks = 1$/;"	v
loaded_showmarks	plugin/showmarks.vim	/^let loaded_showmarks = 1$/;"	v
loaded_snips	.\plugin\snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	.\plugin\taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	.\plugin\taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	.\plugin\taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	.\plugin\taglist.vim	/^let loaded_taglist = 'available'$/;"	v
loaded_tlib	.\plugin\02tlib.vim	/^let loaded_tlib = 30$/;"	v
loaded_tlib_agent_autoload	.\autoload\tlib\agent.vim	/^let loaded_tlib_agent_autoload = 1$/;"	v
loaded_tlib_arg_autoload	.\autoload\tlib\arg.vim	/^let loaded_tlib_arg_autoload = 1$/;"	v
loaded_tlib_autocmdgroup_autoload	.\autoload\tlib\autocmdgroup.vim	/^let loaded_tlib_autocmdgroup_autoload = 1$/;"	v
loaded_tlib_autoload	.\autoload\tlib.vim	/^let loaded_tlib_autoload = 1$/;"	v
loaded_tlib_buffer_autoload	.\autoload\tlib\buffer.vim	/^let loaded_tlib_buffer_autoload = 1$/;"	v
loaded_tlib_cache_autoload	.\autoload\tlib\cache.vim	/^let loaded_tlib_cache_autoload = 1$/;"	v
loaded_tlib_char_autoload	.\autoload\tlib\char.vim	/^let loaded_tlib_char_autoload = 1$/;"	v
loaded_tlib_cmd_autoload	.\autoload\tlib\cmd.vim	/^let loaded_tlib_cmd_autoload = 1$/;"	v
loaded_tlib_comments_autoload	.\autoload\tlib\comments.vim	/^let loaded_tlib_comments_autoload = 1$/;"	v
loaded_tlib_dir_autoload	.\autoload\tlib\dir.vim	/^let loaded_tlib_dir_autoload = 1$/;"	v
loaded_tlib_eval_autoload	.\autoload\tlib\eval.vim	/^let loaded_tlib_eval_autoload = 1$/;"	v
loaded_tlib_file_autoload	.\autoload\tlib\file.vim	/^let loaded_tlib_file_autoload = 1$/;"	v
loaded_tlib_hook_autoload	.\autoload\tlib\hook.vim	/^let loaded_tlib_hook_autoload = 1$/;"	v
loaded_tlib_input_autoload	.\autoload\tlib\input.vim	/^let loaded_tlib_input_autoload = 1$/;"	v
loaded_tlib_list_autoload	.\autoload\tlib\list.vim	/^let loaded_tlib_list_autoload = 1$/;"	v
loaded_tlib_object_autoload	.\autoload\tlib\Object.vim	/^let loaded_tlib_object_autoload = 1$/;"	v
loaded_tlib_progressbar_autoload	.\autoload\tlib\progressbar.vim	/^let loaded_tlib_progressbar_autoload = 1$/;"	v
loaded_tlib_rx_autoload	.\autoload\tlib\rx.vim	/^let loaded_tlib_rx_autoload = 1$/;"	v
loaded_tlib_scratch_autoload	.\autoload\tlib\scratch.vim	/^let loaded_tlib_scratch_autoload = 1$/;"	v
loaded_tlib_string_autoload	.\autoload\tlib\string.vim	/^let loaded_tlib_string_autoload = 1$/;"	v
loaded_tlib_syntax_autoload	.\autoload\tlib\syntax.vim	/^let loaded_tlib_syntax_autoload = 1$/;"	v
loaded_tlib_tab_autoload	.\autoload\tlib\tab.vim	/^let loaded_tlib_tab_autoload = 1$/;"	v
loaded_tlib_tag_autoload	.\autoload\tlib\tag.vim	/^let loaded_tlib_tag_autoload = 1$/;"	v
loaded_tlib_TestChild_autoload	.\autoload\tlib\TestChild.vim	/^let loaded_tlib_TestChild_autoload = 1$/;"	v
loaded_tlib_Test_autoload	.\autoload\tlib\Test.vim	/^let loaded_tlib_Test_autoload = 1$/;"	v
loaded_tlib_time_autoload	.\autoload\tlib\time.vim	/^let loaded_tlib_time_autoload = 1$/;"	v
loaded_tlib_type_autoload	.\autoload\tlib\type.vim	/^let loaded_tlib_type_autoload = 1$/;"	v
loaded_tlib_url_autoload	.\autoload\tlib\url.vim	/^let loaded_tlib_url_autoload = 1$/;"	v
loaded_tlib_var_autoload	.\autoload\tlib\var.vim	/^let loaded_tlib_var_autoload = 1$/;"	v
loaded_tlib_win_autoload	.\autoload\tlib\win.vim	/^let loaded_tlib_win_autoload = 1$/;"	v
loaded_tlib_world_autoload	.\autoload\tlib\World.vim	/^let loaded_tlib_world_autoload = 1$/;"	v
loaded_ttags	.\plugin\ttags.vim	/^let loaded_ttags = 5$/;"	v
loaded_ttags_autoload	.\autoload\ttags.vim	/^let loaded_ttags_autoload = 1$/;"	v
loaded_utl	.\plugin\utl.vim	/^let loaded_utl = "3.0a"$/;"	v
loaded_utl_scm	.\plugin\utl_scm.vim	/^let loaded_utl_scm = 1$/;"	v
loaded_utl_uri	.\plugin\utl_uri.vim	/^let loaded_utl_uri = 1$/;"	v
LoadProjects	.\plugin\proj.vim	/^function! s:LoadProjects()$/;"	f
localeEdit	.\autoload\rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	.\autoload\rails.vim	/^function! s:localeList(A,L,P)$/;"	f
LocalModelines	.\autoload\rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
location1a	.\ftplugin\haskell_doc.vim	/^  let location1a = s:ghc_libdir . '\/doc\/html\/'$/;"	v
location1b	.\ftplugin\haskell_doc.vim	/^  let location1b = s:ghc_libdir . '\/doc\/'$/;"	v
location2	.\ftplugin\haskell_doc.vim	/^  let location2 = '\/usr\/share\/doc\/ghc-' . s:ghc_version . '\/html\/' $/;"	v
lock	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> lock <C-R>=SqlIab_ReplaceConditionally('lock', 'LOCK')<CR>$/;"	m
Log	.\autoload\rails.vim	/^function! s:Log(bang,arg)$/;"	f
long	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> long <C-R>=SqlIab_ReplaceConditionally('long', 'LONG')<CR>$/;"	m
loop	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> loop <C-R>=SqlIab_ReplaceConditionally('loop', 'LOOP')<CR>$/;"	m
lseg	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> lseg <C-R>=SqlIab_ReplaceConditionally('lseg', 'LSEG')<CR>$/;"	m
m	.\plugin\showmarks.vim	/^noremap <silent> m :exe 'norm \\sm'.nr2char(getchar())<bar>call <sid>ShowMarks()<CR>$/;"	m
m	plugin/showmarks.vim	/^noremap <silent> m :exe 'norm \\sm'.nr2char(getchar())<bar>call <sid>ShowMarks()<CR>$/;"	m
macaddr	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> macaddr <C-R>=SqlIab_ReplaceConditionally('macaddr', 'MACADDR')<CR>$/;"	m
MakeQFE	.\autoload\ttags.vim	/^function! s:MakeQFE(tag) "{{{3$/;"	f
MakeQFL	.\autoload\ttags.vim	/^function! s:MakeQFL(tags) "{{{3$/;"	f
MakeSnip	.\plugin\snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MakeSpace	.\autoload\Align.vim	/^fun! s:MakeSpace(spacecnt)$/;"	f
makewithruby	.\autoload\rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
maplocalleader	.\compiler\ghc.vim	/^  let maplocalleader='_'$/;"	v
maplocalleader	.\ftplugin\haskell_doc.vim	/^  let maplocalleader='_'$/;"	v
MarkErrors	.\plugin\cuteErrorMarker.vim	/^command! MarkErrors call MarkErrors()$/;"	c
MarkErrors	.\plugin\cuteErrorMarker.vim	/^fun! MarkErrors() "{{{$/;"	f
Match	.\autoload\genutils.vim	/^function! s:Match(expr, pat, start)$/;"	f
matchcursor	.\autoload\rails.vim	/^function! s:matchcursor(pat)$/;"	f
MatchDebug	.\plugin\matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
Match_debug	.\plugin\matchit.vim	/^fun! s:Match_debug()$/;"	f
match_type	.\autoload\rails.vim	/^function! s:match_type(type,...)$/;"	f
Match_wrapper	.\plugin\matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
maxextents	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> maxextents <C-R>=SqlIab_ReplaceConditionally('maxextents', 'MAXEXTENTS')<CR>$/;"	m
MayComplete	.\plugin\FindFile.vim	/^fun! <SID>MayComplete(c)$/;"	f
MDoc	.\ftplugin\haskell_doc.vim	/^command! -nargs=1 -complete=customlist,CompleteHaddockModules MDoc call MDoc(<f-args>)$/;"	c
MDoc	.\ftplugin\haskell_doc.vim	/^function! MDoc(module)$/;"	f
menuBufEnter	.\plugin\rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	.\plugin\rails.vim	/^function! s:menuBufLeave()$/;"	f
menucmd	.\plugin\rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	.\plugin\rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
menuRoot	.\plugin\dbext.vim	/^        let menuRoot = '&dbext'$/;"	v
menuRoot	.\plugin\dbext.vim	/^        let menuRoot = '&Plugin.&dbext'$/;"	v
menuRoot	.\plugin\dbext.vim	/^        let menuRoot = 'dbext'$/;"	v
metalEdit	.\autoload\rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	.\autoload\rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	.\autoload\rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	.\autoload\rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	.\autoload\rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	.\autoload\rails.vim	/^function! s:migspc(line)$/;"	f
minus	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> minus <C-R>=SqlIab_ReplaceConditionally('minus', 'MINUS')<CR>$/;"	m
mkeep	.\autoload\rails.vim	/^function! s:mkeep(str)$/;"	f
MkHaddockModuleIndex	.\ftplugin\haskell_doc.vim	/^function! MkHaddockModuleIndex()$/;"	f
mlslabel	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> mlslabel <C-R>=SqlIab_ReplaceConditionally('mlslabel', 'MLSLABEL')<CR>$/;"	m
mode	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> mode <C-R>=SqlIab_ReplaceConditionally('mode', 'MODE')<CR>$/;"	m
model	.\autoload\rails.vim	/^function! s:model(...)$/;"	f
modelEdit	.\autoload\rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	.\autoload\rails.vim	/^function! s:modelList(A,L,P)$/;"	f
modify	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> modify <C-R>=SqlIab_ReplaceConditionally('modify', 'MODIFY')<CR>$/;"	m
money	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> money <C-R>=SqlIab_ReplaceConditionally('money', 'MONEY')<CR>$/;"	m
move	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> move <C-R>=SqlIab_ReplaceConditionally('move', 'MOVE')<CR>$/;"	m
MultiMatch	.\plugin\matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
name	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> name <C-R>=SqlIab_ReplaceConditionally('name', 'NAME')<CR>$/;"	m
NameOfMark	.\plugin\showmarks.vim	/^fun! s:NameOfMark(mark)$/;"	f
NameOfMark	plugin/showmarks.vim	/^fun! s:NameOfMark(mark)$/;"	f
Navcommand	.\autoload\rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NERDTree	.\plugin\NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	.\plugin\NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeClose	.\plugin\NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeFromBookmark	.\plugin\NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeGetCurrentNode	.\plugin\NERD_tree.vim	/^function! NERDTreeGetCurrentNode()$/;"	f
NERDTreeGetCurrentPath	.\plugin\NERD_tree.vim	/^function! NERDTreeGetCurrentPath()$/;"	f
NERDTreeHijackNetrw	.\plugin\NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	.\plugin\NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeToggle	.\plugin\NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NewProject	.\autoload\rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	.\autoload\rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
nextBufferName	.\plugin\NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
noaudit	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> noaudit <C-R>=SqlIab_ReplaceConditionally('noaudit', 'NOAUDIT')<CR>$/;"	m
nocompress	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> nocompress <C-R>=SqlIab_ReplaceConditionally('nocompress', 'NOCOMPRESS')<CR>$/;"	m
not	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> not <C-R>=SqlIab_ReplaceConditionally('not', 'NOT')<CR>$/;"	m
NoTags	.\autoload\ttags.vim	/^function! s:NoTags() "{{{3$/;"	f
notify	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> notify <C-R>=SqlIab_ReplaceConditionally('notify', 'NOTIFY')<CR>$/;"	m
nowait	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> nowait <C-R>=SqlIab_ReplaceConditionally('nowait', 'NOWAIT')<CR>$/;"	m
null	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> null <C-R>=SqlIab_ReplaceConditionally('null', 'NULL')<CR>$/;"	m
number	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> number <C-R>=SqlIab_ReplaceConditionally('number', 'NUMBER')<CR>$/;"	m
numeric	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> numeric <C-R>=SqlIab_ReplaceConditionally('numeric', 'NUMERIC')<CR>$/;"	m
observerEdit	.\autoload\rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	.\autoload\rails.vim	/^function! s:observerList(A,L,P)$/;"	f
of	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> of <C-R>=SqlIab_ReplaceConditionally('of', 'OF')<CR>$/;"	m
offline	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> offline <C-R>=SqlIab_ReplaceConditionally('offline', 'OFFLINE')<CR>$/;"	m
oid	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> oid <C-R>=SqlIab_ReplaceConditionally('oid', 'OID')<CR>$/;"	m
oidvector	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> oidvector <C-R>=SqlIab_ReplaceConditionally('oidvector', 'OIDVECTOR')<CR>$/;"	m
on	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> on <C-R>=SqlIab_ReplaceConditionally('on', 'ON')<CR>$/;"	m
online	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> online <C-R>=SqlIab_ReplaceConditionally('online', 'ONLINE')<CR>$/;"	m
OnOrOff	.\plugin\EasyGrep.vim	/^function! s:OnOrOff(num)$/;"	f
openBookmark	.\plugin\NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	.\plugin\NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	.\plugin\NERD_tree.vim	/^function! s:openExplorer()$/;"	f
OpenFile	.\plugin\proj.vim	/^function! s:OpenFile()$/;"	f
openInNewTab	.\plugin\NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	.\plugin\NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
OpenNotes	.\plugin\proj.vim	/^function! s:OpenNotes()$/;"	f
OpenOptionsExplorer	.\plugin\EasyGrep.vim	/^function! s:OpenOptionsExplorer()$/;"	f
OpenProject	.\plugin\proj.vim	/^function! s:OpenProject(name)$/;"	f
OpenURL	.\startup\utl.vim	/^command! -bar -nargs=1 OpenURL :Utl openLink <args>$/;"	c
OpenVimFile	.\plugin\proj.vim	/^function! s:OpenVimFile()$/;"	f
operator	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> operator <C-R>=SqlIab_ReplaceConditionally('operator', 'OPERATOR')<CR>$/;"	m
opfunc	.\plugin\surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	.\plugin\surround.vim	/^function! s:opfunc2(arg)$/;"	f
option	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> option <C-R>=SqlIab_ReplaceConditionally('option', 'OPTION')<CR>$/;"	m
opts	.\autoload\rails.vim	/^function! s:opts()$/;"	f
opts	.\compiler\ghc.vim	/^  let opts = filter(split(substitute(system(g:ghc . ' -v0 --interactive', ':set'), '  ', '','g'), '\\n'), 'v:val =~ "-f"')$/;"	v
opts	.\compiler\ghc.vim	/^  let opts = ["-fglasgow-exts","-fallow-undecidable-instances","-fallow-overlapping-instances","-fno-monomorphism-restriction","-fno-mono-pat-binds","-fno-cse","-fbang-patterns","-funbox-strict-fields"]$/;"	v
or	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> or <C-R>=SqlIab_ReplaceConditionally('or', 'OR')<CR>$/;"	m
order	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> order <C-R>=SqlIab_ReplaceConditionally('order', 'ORDER')<CR>$/;"	m
os	.\plugin\autotag.vim	/^import os$/;"	m
os.path	.\plugin\autotag.vim	/^import os.path$/;"	m
out	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> out <C-R>=SqlIab_ReplaceConditionally('out', 'OUT')<CR>$/;"	m
output	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> output <C-R>=SqlIab_ReplaceConditionally('output', 'OUTPUT')<CR>$/;"	m
ParseArgs	.\autoload\ttags.vim	/^function! s:ParseArgs(keyargs_as_string) "{{{3$/;"	f
ParseFileAssociationList	.\plugin\EasyGrep.vim	/^function! s:ParseFileAssociationList()$/;"	f
ParseSkip	.\plugin\matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseWords	.\plugin\matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
path	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> path <C-R>=SqlIab_ReplaceConditionally('path', 'PATH')<CR>$/;"	m
Path.AbsolutePathFor	.\plugin\NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.bookmarkNames	.\plugin\NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	.\plugin\NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	.\plugin\NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	.\plugin\NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	.\plugin\NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.CopyingSupported	.\plugin\NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.copyingWillOverwrite	.\plugin\NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.Create	.\plugin\NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.delete	.\plugin\NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.equals	.\plugin\NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	.\plugin\NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	.\plugin\NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	.\plugin\NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	.\plugin\NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	.\plugin\NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getPathTrunk	.\plugin\NERD_tree.vim	/^function! s:Path.getPathTrunk()$/;"	f
Path.getSortOrderIndex	.\plugin\NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	.\plugin\NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.JoinPathStrings	.\plugin\NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	.\plugin\NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.readInfoFromDisk	.\plugin\NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	.\plugin\NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	.\plugin\NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	.\plugin\NERD_tree.vim	/^function! s:Path.str(esc)$/;"	f
Path.strAbs	.\plugin\NERD_tree.vim	/^function! s:Path.strAbs()$/;"	f
Path.strDisplay	.\plugin\NERD_tree.vim	/^function! s:Path.strDisplay()$/;"	f
Path.strForCd	.\plugin\NERD_tree.vim	/^function! s:Path.strForCd()$/;"	f
Path.strForEditCmd	.\plugin\NERD_tree.vim	/^function! s:Path.strForEditCmd()$/;"	f
Path.strForGlob	.\plugin\NERD_tree.vim	/^function! s:Path.strForGlob()$/;"	f
Path.strForOS	.\plugin\NERD_tree.vim	/^function! s:Path.strForOS(esc)$/;"	f
Path.strTrunk	.\plugin\NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
Path.WinToUnixPath	.\plugin\NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
pathjoin	.\autoload\rails.vim	/^function! s:pathjoin(...) abort$/;"	f
pathsplit	.\autoload\rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pctfree	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> pctfree <C-R>=SqlIab_ReplaceConditionally('pctfree', 'PCTFREE')<CR>$/;"	m
PersistentVarName	.\autoload\genutils.vim	/^function! s:PersistentVarName(pluginName, persistentVar)$/;"	f
php_baselib	.\ftplugin\php.vim	/^let php_baselib       = 1$/;"	v
php_baselib	ftplugin/php.vim	/^let php_baselib       = 1$/;"	v
php_folding	.\ftplugin\php.vim	/^let php_folding       = 1$/;"	v
php_folding	ftplugin/php.vim	/^let php_folding       = 1$/;"	v
php_htmlInStrings	.\ftplugin\php.vim	/^let php_htmlInStrings = 1$/;"	v
php_htmlInStrings	ftplugin/php.vim	/^let php_htmlInStrings = 1$/;"	v
php_noindent_switch	.\indent\unused.vim	/^let php_noindent_switch = 0    " set this to '1' to not try to indent switch\/case statements$/;"	v
php_noindent_switch	indent/php.vim	/^let php_noindent_switch = 0    " set this to '1' to not try to indent switch\/case statements$/;"	v
PlaceErrorMarkersHook	.\plugin\cuteErrorMarker.vim	/^fun! PlaceErrorMarkersHook() "{{{$/;"	f
pluginEdit	.\autoload\rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	.\autoload\rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
point	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> point <C-R>=SqlIab_ReplaceConditionally('point', 'POINT')<CR>$/;"	m
polygon	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> polygon <C-R>=SqlIab_ReplaceConditionally('polygon', 'POLYGON')<CR>$/;"	m
pop_command	.\autoload\rails.vim	/^function! s:pop_command()$/;"	f
PostCreate	.\plugin\EasyGrep.vim	/^function! s:PostCreate(str, sp)$/;"	f
prephelp	.\autoload\rails.vim	/^function! s:prephelp()$/;"	f
Preview	.\autoload\rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
previewNode	.\plugin\NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
primary	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> primary <C-R>=SqlIab_ReplaceConditionally('primary', 'PRIMARY')<CR>$/;"	m
PrintFormat	.\autoload\tlib\string.vim	/^function! s:PrintFormat(format, string) "{{{3$/;"	f
prior	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> prior <C-R>=SqlIab_ReplaceConditionally('prior', 'PRIOR')<CR>$/;"	m
privileges	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> privileges <C-R>=SqlIab_ReplaceConditionally('privileges', 'PRIVILEGES')<CR>$/;"	m
procedure	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> procedure <C-R>=SqlIab_ReplaceConditionally('procedure', 'PROCEDURE')<CR>$/;"	m
process	.\plugin\surround.vim	/^function! s:process(string)$/;"	f
ProcessFile	.\plugin\snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessHaddockIndexes	.\ftplugin\haskell_doc.vim	/^function! ProcessHaddockIndexes(location,files)$/;"	f
ProcessHaddockIndexes2	.\ftplugin\haskell_doc.vim	/^function! ProcessHaddockIndexes2(location,files)$/;"	f
ProcessSnippet	.\autoload\snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Proj	.\plugin\proj.vim	/^command! -complete=customlist,s:Complete -nargs=1 Proj :call s:OpenProject('<args>')$/;"	c
Project	.\autoload\rails.vim	/^function! s:Project(bang,arg)$/;"	f
ProjectMenu	.\plugin\rails.vim	/^function! s:ProjectMenu()$/;"	f
ProjFile	.\plugin\proj.vim	/^command! ProjFile :call s:OpenFile()$/;"	c
ProjInfo	.\plugin\proj.vim	/^command! ProjInfo :call s:DumpInfo()$/;"	c
ProjNotes	.\plugin\proj.vim	/^command! ProjNotes :call s:OpenNotes()$/;"	c
ProjRefresh	.\plugin\proj.vim	/^command! ProjRefresh :call s:RefreshCurrent()$/;"	c
ProjReload	.\plugin\proj.vim	/^command! ProjReload :call s:LoadProjects()$/;"	c
ProjVim	.\plugin\proj.vim	/^command! ProjVim :call s:OpenVimFile()$/;"	c
promptToDelBuffer	.\plugin\NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
prototype.AssessName	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.AssessName(world, name) dict "{{{3$/;"	f
prototype.BuildTable	.\autoload\tlib\World.vim	/^function! s:prototype.BuildTable() dict "{{{3$/;"	f
prototype.CleanFilter	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\autoload\tlib\World.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.ClearAllMarks	.\autoload\tlib\World.vim	/^function! s:prototype.ClearAllMarks() dict "{{{3$/;"	f
prototype.CloseScratch	.\autoload\tlib\World.vim	/^function! s:prototype.CloseScratch(...) dict "{{{3$/;"	f
prototype.CurrentItem	.\autoload\tlib\World.vim	/^function! s:prototype.CurrentItem() dict "{{{3$/;"	f
prototype.DisplayFilter	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	.\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	.\autoload\tlib\World.vim	/^function! s:prototype.DisplayFilter() dict "{{{3$/;"	f
prototype.DisplayHelp	.\autoload\tlib\World.vim	/^function! s:prototype.DisplayHelp() dict "{{{3$/;"	f
prototype.DisplayList	.\autoload\tlib\World.vim	/^function! s:prototype.DisplayList(query, ...) dict "{{{3$/;"	f
prototype.DisplayListMark	.\autoload\tlib\World.vim	/^function! s:prototype.DisplayListMark(x, y, mark) dict "{{{3$/;"	f
prototype.Dummy	.\autoload\tlib\Test.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
prototype.Dummy	.\autoload\tlib\TestChild.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
prototype.Extend	.\autoload\tlib\Object.vim	/^function! s:prototype.Extend(dictionary) dict "{{{3$/;"	f
prototype.FilterIsEmpty	.\autoload\tlib\World.vim	/^function! s:prototype.FilterIsEmpty() dict "{{{3$/;"	f
prototype.FilterRxPrefix	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.FilterRxPrefix	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.FilterRxPrefix	.\autoload\tlib\World.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.FollowCursor	.\autoload\tlib\World.vim	/^function! s:prototype.FollowCursor() dict "{{{3$/;"	f
prototype.FormatArgs	.\autoload\tlib\World.vim	/^function! s:prototype.FormatArgs(format_string, arg) dict "{{{3$/;"	f
prototype.FormatFilename	.\autoload\tlib\World.vim	/^function! s:prototype.FormatFilename(file) dict "{{{3$/;"	f
prototype.FormatName	.\autoload\tlib\World.vim	/^function! s:prototype.FormatName(format, value) dict "{{{3$/;"	f
prototype.GetBaseIdx	.\autoload\tlib\World.vim	/^function! s:prototype.GetBaseIdx(idx) dict "{{{3$/;"	f
prototype.GetBaseIdx0	.\autoload\tlib\World.vim	/^function! s:prototype.GetBaseIdx0(idx) dict "{{{3$/;"	f
prototype.GetBaseItem	.\autoload\tlib\World.vim	/^function! s:prototype.GetBaseItem(idx) dict "{{{3$/;"	f
prototype.GetItem	.\autoload\tlib\World.vim	/^function! s:prototype.GetItem(idx) dict "{{{3$/;"	f
prototype.GetListIdx	.\autoload\tlib\World.vim	/^function! s:prototype.GetListIdx(baseidx) dict "{{{3$/;"	f
prototype.GetRx	.\autoload\tlib\World.vim	/^function! s:prototype.GetRx(filter) dict "{{{3$/;"	f
prototype.GetRx0	.\autoload\tlib\World.vim	/^function! s:prototype.GetRx0(...) dict "{{{3$/;"	f
prototype.GetSelectedItems	.\autoload\tlib\World.vim	/^function! s:prototype.GetSelectedItems(current) dict "{{{3$/;"	f
prototype.Highlight_filename	.\autoload\tlib\World.vim	/^function! s:prototype.Highlight_filename() dict "{{{3$/;"	f
prototype.Inherit	.\autoload\tlib\Object.vim	/^function! s:prototype.Inherit(object) dict "{{{3$/;"	f
prototype.IsA	.\autoload\tlib\Object.vim	/^function! s:prototype.IsA(class) dict "{{{3$/;"	f
prototype.IsRelated	.\autoload\tlib\Object.vim	/^function! s:prototype.IsRelated(object) dict "{{{3$/;"	f
prototype.IsValidFilter	.\autoload\tlib\World.vim	/^function! s:prototype.IsValidFilter() dict "{{{3$/;"	f
prototype.MarkCurrent	.\autoload\tlib\World.vim	/^function! s:prototype.MarkCurrent(y) dict "{{{3$/;"	f
prototype.Match	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/;"	f
prototype.Match	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/;"	f
prototype.MatchBaseIdx	.\autoload\tlib\World.vim	/^function! s:prototype.MatchBaseIdx(idx) dict "{{{3$/;"	f
prototype.Methods	.\autoload\tlib\Object.vim	/^function! s:prototype.Methods(...) dict "{{{3$/;"	f
prototype.New	.\autoload\tlib\Object.vim	/^function! s:prototype.New(...) dict "{{{3$/;"	f
prototype.PopFilter	.\autoload\tlib\World.vim	/^function! s:prototype.PopFilter() dict "{{{3$/;"	f
prototype.PushFrontFilter	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\autoload\tlib\World.vim	/^function! s:prototype.PushFrontFilter(char) dict "{{{3$/;"	f
prototype.ReduceFilter	.\autoload\tlib\World.vim	/^function! s:prototype.ReduceFilter() dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.Reset	.\autoload\tlib\World.vim	/^function! s:prototype.Reset(...) dict "{{{3$/;"	f
prototype.ResetSelected	.\autoload\tlib\World.vim	/^function! s:prototype.ResetSelected() dict "{{{3$/;"	f
prototype.Resize	.\autoload\tlib\World.vim	/^function! s:prototype.Resize(hsize, vsize) dict "{{{3$/;"	f
prototype.RespondTo	.\autoload\tlib\Object.vim	/^function! s:prototype.RespondTo(name) dict "{{{3$/;"	f
prototype.RestoreOrigin	.\autoload\tlib\World.vim	/^function! s:prototype.RestoreOrigin(...) dict "{{{3$/;"	f
prototype.Retrieve	.\autoload\tlib\World.vim	/^function! s:prototype.Retrieve(anyway) dict "{{{3$/;"	f
prototype.SelectItem	.\autoload\tlib\World.vim	/^function! s:prototype.SelectItem(mode, index) dict "{{{3$/;"	f
prototype.SetBaseItem	.\autoload\tlib\World.vim	/^function! s:prototype.SetBaseItem(idx, item) dict "{{{3$/;"	f
prototype.SetFilter	.\autoload\tlib\World.vim	/^function! s:prototype.SetFilter() dict "{{{3$/;"	f
prototype.SetFrontFilter	.\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\autoload\tlib\Filter_seq.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\autoload\tlib\World.vim	/^function! s:prototype.SetFrontFilter(pattern) dict "{{{3$/;"	f
prototype.SetInitialFilter	.\autoload\tlib\World.vim	/^function! s:prototype.SetInitialFilter(filter) dict "{{{3$/;"	f
prototype.SetMatchMode	.\autoload\tlib\World.vim	/^function! s:prototype.SetMatchMode(match_mode) dict "{{{3$/;"	f
prototype.SetOffset	.\autoload\tlib\World.vim	/^function! s:prototype.SetOffset() dict "{{{3$/;"	f
prototype.SetOrigin	.\autoload\tlib\World.vim	/^function! s:prototype.SetOrigin(...) dict "{{{3$/;"	f
prototype.SetPrefIdx	.\autoload\tlib\World.vim	/^function! s:prototype.SetPrefIdx() dict "{{{3$/;"	f
prototype.Set_display_format	.\autoload\tlib\World.vim	/^function! s:prototype.Set_display_format(value) dict "{{{3$/;"	f
prototype.Set_highlight_filename	.\autoload\tlib\World.vim	/^function! s:prototype.Set_highlight_filename() dict "{{{3$/;"	f
prototype.Super	.\autoload\tlib\Object.vim	/^function! s:prototype.Super(method, arglist) dict "{{{3$/;"	f
prototype.SwitchWindow	.\autoload\tlib\World.vim	/^function! s:prototype.SwitchWindow(where) dict "{{{3$/;"	f
prototype.UseInputListScratch	.\autoload\tlib\World.vim	/^function! s:prototype.UseInputListScratch() dict "{{{3$/;"	f
prototype.UseScratch	.\autoload\tlib\World.vim	/^function! s:prototype.UseScratch() dict "{{{3$/;"	f
public	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> public <C-R>=SqlIab_ReplaceConditionally('public', 'PUBLIC')<CR>$/;"	m
push_chdir	.\autoload\rails.vim	/^function! s:push_chdir(...)$/;"	f
putCursorInTreeWin	.\plugin\NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	.\plugin\NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
QArgSplitter	.\autoload\Align.vim	/^fun! s:QArgSplitter(qarg)$/;"	f
QArgSplitter	.\plugin\cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
qsort	test.hs	/^qsort (x:xs) = (qsort lesser) ++ [x] ++ (qsort higher)$/;"	f
qsort	test.hs	/^qsort [] = []$/;"	f
QSortR	.\autoload\genutils.vim	/^function! s:QSortR(start, end, cmp, direction, accessor, swapper, context)$/;"	f
Qualify	.\ftplugin\haskell_doc.vim	/^function! Qualify()$/;"	f
Quit	.\plugin\EasyGrep.vim	/^function! <sid>Quit()$/;"	f
QuitBuff	.\plugin\FindFile.vim	/^fun! <SID>QuitBuff()$/;"	f
Rails	.\plugin\rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
rails#app	.\autoload\rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	.\autoload\rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	.\autoload\rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	.\autoload\rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	.\autoload\rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	.\autoload\rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	.\autoload\rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	.\autoload\rails.vim	/^function! rails#singularize(word)$/;"	f
rails#statusline	.\autoload\rails.vim	/^function! rails#statusline(...)$/;"	f
rails#underscore	.\autoload\rails.vim	/^function! rails#underscore(str)$/;"	f
RailsBufInit	.\autoload\rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	.\autoload\rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	.\autoload\rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	.\autoload\rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	.\autoload\rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	.\autoload\rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	.\autoload\rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	.\autoload\rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	.\autoload\rails.vim	/^function! RailsNamedRoutes()$/;"	f
railsPluginAuto	.\autoload\rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	.\plugin\rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	.\plugin\rails.vim	/^augroup railsPluginMenu$/;"	a
RailsRevision	.\autoload\rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	.\autoload\rails.vim	/^function! RailsRoot()$/;"	f
Rake	.\autoload\rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
raw	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> raw <C-R>=SqlIab_ReplaceConditionally('raw', 'RAW')<CR>$/;"	m
readable_app	.\autoload\rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	.\autoload\rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	.\autoload\rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	.\autoload\rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	.\autoload\rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	.\autoload\rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	.\autoload\rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	.\autoload\rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	.\autoload\rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	.\autoload\rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	.\autoload\rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	.\autoload\rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	.\autoload\rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	.\autoload\rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	.\autoload\rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	.\autoload\rails.vim	/^function! s:readfile(path,...)$/;"	f
real	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> real <C-R>=SqlIab_ReplaceConditionally('real', 'REAL')<CR>$/;"	m
ReconfigPaths	.\plugin\symfony.vim	/^function! ReconfigPaths()$/;"	f
redraw	.\plugin\surround.vim	/^function! s:redraw()$/;"	f
Ref	.\plugin\matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
refcursor	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> refcursor <C-R>=SqlIab_ReplaceConditionally('refcursor', 'REFCURSOR')<CR>$/;"	m
references	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> references <C-R>=SqlIab_ReplaceConditionally('references', 'REFERENCES')<CR>$/;"	m
Refresh	.\autoload\rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	.\autoload\rails.vim	/^function! s:RefreshBuffer()$/;"	f
refreshCurrent	.\plugin\NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
RefreshCurrent	.\plugin\proj.vim	/^function! s:RefreshCurrent()$/;"	f
refreshRoot	.\plugin\NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
refs	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> refs <C-R>=SqlIab_ReplaceConditionally('refs', 'REFERENCES')<CR>$/;"	m
regproc	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> regproc <C-R>=SqlIab_ReplaceConditionally('regproc', 'REGPROC')<CR>$/;"	m
reindent	.\plugin\surround.vim	/^function! s:reindent() " {{{1$/;"	f
reindex	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> reindex <C-R>=SqlIab_ReplaceConditionally('reindex', 'REINDEX')<CR>$/;"	m
Related	.\autoload\rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
relglob	.\autoload\rails.vim	/^function! s:relglob(...)$/;"	f
reltime	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> reltime <C-R>=SqlIab_ReplaceConditionally('reltime', 'RELTIME')<CR>$/;"	m
RemoveErrorMarkersHook	.\plugin\cuteErrorMarker.vim	/^fun! RemoveErrorMarkersHook() "{{{$/;"	f
RemoveSnippet	.\autoload\snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
rename	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rename <C-R>=SqlIab_ReplaceConditionally('rename', 'RENAME')<CR>$/;"	m
renameCurrent	.\plugin\NERD_tree.vim	/^function! s:renameCurrent()$/;"	f
renderBookmarks	.\plugin\NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	.\plugin\NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	.\plugin\NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repeat	.\autoload\repeat.vim	/^function! s:repeat(count)$/;"	f
repeat	.\plugin\surround.vim	/^function! s:repeat(str,count)$/;"	f
repeat#set	.\autoload\repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeatPlugin	.\autoload\repeat.vim	/^augroup repeatPlugin$/;"	a
replace	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> replace <C-R>=SqlIab_ReplaceConditionally('replace', 'REPLACE')<CR>$/;"	m
Replace	.\plugin\EasyGrep.vim	/^command! -bang -nargs=+ Replace :call s:Replace("<bang>", <q-args>)$/;"	c
Replace	.\plugin\EasyGrep.vim	/^function! s:Replace(whole, argv)$/;"	f
ReplaceCurrentWord	.\plugin\EasyGrep.vim	/^function! <sid>ReplaceCurrentWord(whole)$/;"	f
ReplaceSelection	.\plugin\EasyGrep.vim	/^function! <sid>ReplaceSelection(whole)$/;"	f
ReplaceString	.\plugin\EasyGrep.vim	/^function! s:ReplaceString(str, whole, escapeArgs)$/;"	f
ReplaceUndo	.\plugin\EasyGrep.vim	/^command! -bang ReplaceUndo :call s:ReplaceUndo("<bang>")$/;"	c
ReplaceUndo	.\plugin\EasyGrep.vim	/^function! s:ReplaceUndo(bang)$/;"	f
reset	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> reset <C-R>=SqlIab_ReplaceConditionally('reset', 'RESET')<CR>$/;"	m
resetomnicomplete	.\autoload\rails.vim	/^function! s:resetomnicomplete()$/;"	f
ResetSnippets	.\plugin\snipMate.vim	/^fun! ResetSnippets()$/;"	f
Resolve	.\plugin\matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
resource	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> resource <C-R>=SqlIab_ReplaceConditionally('resource', 'RESOURCE')<CR>$/;"	m
RestoreMark	.\plugin\cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestoreOrigin	.\autoload\ttags.vim	/^function! s:RestoreOrigin(world) "{{{3$/;"	f
RestorePosn	.\autoload\ZoomWin.vim	/^fun! s:RestorePosn(savedposn)$/;"	f
restoreScreenState	.\plugin\NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
RestoreUserMaps	.\plugin\cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreVariable	.\plugin\EasyGrep.vim	/^function! s:RestoreVariable(var, ...)$/;"	f
RestoreWindowSettings2	.\autoload\genutils.vim	/^function! s:RestoreWindowSettings2(id)$/;"	f
RestoreWinPosn	.\plugin\cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
return	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> return <C-R>=SqlIab_ReplaceConditionally('return', 'RETURN')<CR>$/;"	m
revealBookmark	.\plugin\NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
revoke	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> revoke <C-R>=SqlIab_ReplaceConditionally('revoke', 'REVOKE')<CR>$/;"	m
RewriteFormatString	.\autoload\tlib\string.vim	/^function! s:RewriteFormatString(format, pattern, string) "{{{3$/;"	f
RM	.\plugin\cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
rollback	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rollback <C-R>=SqlIab_ReplaceConditionally('rollback', 'ROLLBACK')<CR>$/;"	m
row	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> row <C-R>=SqlIab_ReplaceConditionally('row', 'ROW')<CR>$/;"	m
rowid	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rowid <C-R>=SqlIab_ReplaceConditionally('rowid', 'ROWID')<CR>$/;"	m
rowlabel	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rowlabel <C-R>=SqlIab_ReplaceConditionally('rowlabel', 'ROWLABEL')<CR>$/;"	m
rownum	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rownum <C-R>=SqlIab_ReplaceConditionally('rownum', 'ROWNUM')<CR>$/;"	m
rows	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rows <C-R>=SqlIab_ReplaceConditionally('rows', 'ROWS')<CR>$/;"	m
rquote	.\autoload\rails.vim	/^function! s:rquote(str)$/;"	f
rule	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> rule <C-R>=SqlIab_ReplaceConditionally('rule', 'RULE')<CR>$/;"	m
RWP	.\plugin\cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
S	.\plugin\surround.vim	/^            vmap  S    <Plug>VSurround$/;"	m
s:all_marks	.\plugin\showmarks.vim	/^let s:all_marks = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.'`^<>[]{}()\\""$/;"	v
s:all_marks	plugin/showmarks.vim	/^let s:all_marks = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.'`^<>[]{}()\\""$/;"	v
s:apps	.\autoload\rails.vim	/^  let s:apps = {}$/;"	v
s:app_prototype	.\autoload\rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	.\autoload\rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:autoinstall	.\autoload\getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	.\autoload\getscript.vim	/^let s:autoinstall= ""$/;"	v
s:bmru	.\autoload\tlib\buffer.vim	/^let s:bmru = []$/;"	v
s:Bookmark	.\plugin\NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:buffer_prototype	.\autoload\rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:C	.\autoload\genutils.vim	/^let s:C = 100$/;"	v
s:cache_prototype	.\autoload\rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:choices	.\ftplugin\haskell_doc.vim	/^let s:choices=[]$/;"	v
s:CommandChoice	.\plugin\EasyGrep.vim	/^let s:CommandChoice = g:EasyGrepCommand < len(s:Commands) ? g:EasyGrepCommand : 0$/;"	v
s:Commands	.\plugin\EasyGrep.vim	/^let s:Commands = [ "vimgrep", "grep" ]$/;"	v
s:contents	.\ftplugin\haskell_doc.vim	/^  let s:contents      = join(readfile(s:flagref))$/;"	v
s:cpo_save	.\autoload\rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\compiler\php.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\plugin\surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\plugin\taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:CurrentFileCurrentDirChecked	.\plugin\EasyGrep.vim	/^let s:CurrentFileCurrentDirChecked = 0$/;"	v
s:D	.\autoload\genutils.vim	/^let s:D = 500$/;"	v
s:d1	.\plugin\utl.vim	/^let s:d1= { 'o': 'openLink', 'ol': 'openLink', 'cl': 'copyLink', 'cf': 'copyFileName', 'cfn': 'copyFileName', 'h': 'help' }$/;"	v
s:d21	.\plugin\utl.vim	/^let s:d21={ 'u': 'underCursor', 'uc': 'underCursor', 'v': 'visual', 'c': 'currentFile', 'cf': 'currentFile' }$/;"	v
s:d22	.\plugin\utl.vim	/^let s:d22={ 'm': 'manual', 'c': 'commands' }$/;"	v
s:d31	.\plugin\utl.vim	/^let s:d31={ 'e': 'edit', 's': 'split', 'vs': 'vsplit', 't': 'tabedit', 'te': 'tabedit', 'vi': 'view',  'r': 'read' }$/;"	v
s:d32	.\plugin\utl.vim	/^let s:d32={ 'n': 'native', 'b': 'backSlash', 'bs': 'backSlash', 's': 'slash' }$/;"	v
s:dbext_buffers_with_dict_files	.\autoload\dbext.vim	/^let s:dbext_buffers_with_dict_files = []$/;"	v
s:dbext_buffer_last	.\autoload\dbext.vim	/^let s:dbext_buffer_last       = -1$/;"	v
s:dbext_buffer_last_winnr	.\autoload\dbext.vim	/^let s:dbext_buffer_last_winnr = -1$/;"	v
s:dbext_prev_sql	.\autoload\dbext.vim	/^let s:dbext_prev_sql     = ''$/;"	v
s:dbext_result_count	.\autoload\dbext.vim	/^let s:dbext_result_count = 0$/;"	v
s:dbext_tempfile	.\autoload\dbext.vim	/^let s:dbext_tempfile = fnamemodify(tempname(), ":h").$/;"	v
s:DECHOMSG	.\plugin\Decho.vim	/^ let s:DECHOMSG = 2$/;"	v
s:DECHOREM	.\plugin\Decho.vim	/^ let s:DECHOREM = 4$/;"	v
s:DECHOTAB	.\plugin\Decho.vim	/^ let s:DECHOTAB = 5$/;"	v
s:DECHOVAR	.\plugin\Decho.vim	/^ let s:DECHOVAR = 3$/;"	v
s:DECHOWIN	.\plugin\Decho.vim	/^ let s:DECHOWIN = 1$/;"	v
s:decho_depth	.\plugin\Decho.vim	/^ let s:decho_depth  = 0$/;"	v
s:defFCShellInstalled	.\autoload\genutils.vim	/^let s:defFCShellInstalled = 0$/;"	v
s:did_snips_mappings	.\after\plugin\snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:did_snip_helper	.\ftplugin\html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:diffchanges_modes	.\plugin\diffchanges.vim	/^let s:diffchanges_modes = ['diff', 'patch']$/;"	v
s:dir_stack	.\autoload\tlib\dir.vim	/^let s:dir_stack = []$/;"	v
s:docdir	.\ftplugin\haskell_doc.vim	/^    let s:docdir = alternate$/;"	v
s:docdir	.\ftplugin\haskell_doc.vim	/^    let s:docdir = field$/;"	v
s:docdir	.\ftplugin\haskell_doc.vim	/^    let s:docdir = location1a$/;"	v
s:docdir	.\ftplugin\haskell_doc.vim	/^    let s:docdir = location1b$/;"	v
s:docdir	.\ftplugin\haskell_doc.vim	/^    let s:docdir = location2$/;"	v
s:docdir	.\ftplugin\haskell_doc.vim	/^  let s:docdir = g:haddock_docdir$/;"	v
s:dotvim	.\autoload\getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	.\autoload\getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:efm_backtrace	.\autoload\rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:emapleader	.\plugin\AlignMapsPlugin.vim	/^  let s:emapleader= escape(s:mapleader,'\\ ')$/;"	v
s:escape_chars	.\plugin\NERD_tree.vim	/^let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:ext	.\plugin\cuteErrorMarker.vim	/^    let s:ext = '.ico'$/;"	v
s:ext	.\plugin\cuteErrorMarker.vim	/^    let s:ext = '.png'$/;"	v
s:fcShellPreFuncs	.\autoload\genutils.vim	/^  let s:fcShellPreFuncs = {}$/;"	v
s:fg_hlname	.\syntax\Decho.vim	/^  let s:fg_hlname= synIDattr(synIDtrans(s:id_hlname),"fg")$/;"	v
s:file	.\autoload\rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:fileCache	.\plugin\FindFile.vim	/^let s:fileCache = {}$/;"	v
s:fileKeys	.\plugin\FindFile.vim	/^let s:fileKeys = []$/;"	v
s:FilesToGrep	.\plugin\EasyGrep.vim	/^let s:FilesToGrep="*"$/;"	v
s:file_prototype	.\autoload\rails.vim	/^let s:file_prototype = {}$/;"	v
s:firstmenu	.\plugin\AlignMapsPlugin.vim	/^ let s:firstmenu= 1$/;"	v
s:flagheaderids	.\ftplugin\haskell_doc.vim	/^    let s:flagheaderids[s:title] = s:id$/;"	v
s:flagheaderids	.\ftplugin\haskell_doc.vim	/^  let s:flagheaderids = {}$/;"	v
s:flagheaders	.\ftplugin\haskell_doc.vim	/^    let s:flagheaders            = add(s:flagheaders, s:title)$/;"	v
s:flagheaders	.\ftplugin\haskell_doc.vim	/^  let s:flagheaders   = []$/;"	v
s:flagref	.\ftplugin\haskell_doc.vim	/^let s:flagref = s:guide . 'flag-reference.html'$/;"	v
s:format	.\autoload\tlib\progressbar.vim	/^let s:format = []$/;"	v
s:ghc_libdir	.\ftplugin\haskell_doc.vim	/^  let s:ghc_libdir = substitute(system(g:ghc . ' --print-libdir'),'\\n','','')$/;"	v
s:ghc_templates	.\compiler\ghc.vim	/^let s:ghc_templates = ["module _ () where","class _ where","class _ => _ where","instance _ where","instance _ => _ where","type family _","type instance _ = ","data _ = ","newtype _ = ","type _ = "]$/;"	v
s:ghc_version	.\ftplugin\haskell_doc.vim	/^  let s:ghc_version = substitute(system(g:ghc . ' --numeric-version'),'\\n','','')$/;"	v
s:guide	.\ftplugin\haskell_doc.vim	/^let s:guide             = s:docdir . 'users_guide\/'$/;"	v
s:haddock_indexfile	.\ftplugin\haskell_doc.vim	/^let s:haddock_indexfile = s:haddock_indexfiledir . 'haddock_index.vim'$/;"	v
s:haddock_indexfiledir	.\ftplugin\haskell_doc.vim	/^  let s:haddock_indexfiledir = $HOME.'\/'$/;"	v
s:haddock_indexfiledir	.\ftplugin\haskell_doc.vim	/^  let s:haddock_indexfiledir = g:haddock_indexfiledir $/;"	v
s:haddock_indexfiledir	.\ftplugin\haskell_doc.vim	/^  let s:haddock_indexfiledir = s:libraries$/;"	v
s:headerPat	.\ftplugin\haskell_doc.vim	/^  let s:headerPat     = '.\\{-}<h3 class="title"><a name="\\([^"]*\\)"><\\\/a>\\([^<]*\\)<\\\/h3>\\(.*\\)'$/;"	v
s:I	.\autoload\genutils.vim	/^let s:I = 1$/;"	v
s:id_counter	.\autoload\tlib\Object.vim	/^let s:id_counter = 0$/;"	v
s:id_hlname	.\syntax\Decho.vim	/^  let s:id_hlname= hlID("Warning")$/;"	v
s:index	.\ftplugin\haskell_doc.vim	/^let s:index             = 'index.html'$/;"	v
s:isuriref	.\plugin\utl.vim	/^let s:isuriref="@,48-57,#,;,\/,?,:,@-@,&,=,+,$,,,-,_,.,!,~,*,',(,),%"$/;"	v
s:keepcpo	.\autoload\Align.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	.\autoload\AlignMaps.vim	/^let s:keepcpo         = &cpo$/;"	v
s:keepcpo	.\autoload\getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	.\autoload\ZoomWin.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	.\plugin\AlignMapsPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	.\plugin\AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	.\plugin\cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	.\plugin\Decho.vim	/^let s:keepcpo      = &cpo$/;"	v
s:keepcpo	.\plugin\getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	.\plugin\ZoomWinPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:L	.\autoload\genutils.vim	/^let s:L = 50$/;"	v
s:laststatus	.\autoload\tlib\progressbar.vim	/^let s:laststatus = []$/;"	v
s:last_mps	.\plugin\matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	.\plugin\matchit.vim	/^let s:last_words = ":"$/;"	v
s:libraries	.\ftplugin\haskell_doc.vim	/^let s:libraries         = s:docdir . 'libraries\/'$/;"	v
s:M	.\autoload\genutils.vim	/^let s:M = 1000$/;"	v
s:makeArgumentList	.\autoload\genutils.vim	/^let s:makeArgumentList = ''$/;"	v
s:makeArgumentString	.\autoload\genutils.vim	/^let s:makeArgumentString = ''$/;"	v
s:mapleader	.\plugin\AlignMapsPlugin.vim	/^  let s:mapleader = exists("g:mapleader")? g:mapleader : '\\'$/;"	v
s:max	.\autoload\tlib\progressbar.vim	/^let s:max = []$/;"	v
s:menu_char_prefix	.\plugin\taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:ml	.\ftplugin\haskell_doc.vim	/^    let s:ml = matchlist(s:r,s:headerPat)$/;"	v
s:ml	.\ftplugin\haskell_doc.vim	/^  let s:ml = matchlist(s:contents,s:headerPat)$/;"	v
s:modifier	.\plugin\cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	.\plugin\cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:mySNR	.\autoload\genutils.vim	/^let s:mySNR = ''$/;"	v
s:NERDTreeBufName	.\plugin\NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	.\plugin\NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	.\plugin\NERD_tree.vim	/^let s:NERD_tree_version = '3.1.1'$/;"	v
s:next_buffer_number	.\plugin\NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:notifyWindow	.\autoload\genutils.vim	/^let s:notifyWindow = {}$/;"	v
s:notslash	.\plugin\matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:old_cpo	.\plugin\NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:OptionsExplorerOpen	.\plugin\EasyGrep.vim	/^let s:OptionsExplorerOpen = 0$/;"	v
s:os_slash	.\plugin\NERD_tree.vim	/^    let s:os_slash = '\\'$/;"	v
s:os_slash	.\plugin\NERD_tree.vim	/^let s:os_slash = '\/'$/;"	v
s:path	.\plugin\cuteErrorMarker.vim	/^let s:path = globpath( &rtp, 'signs\/err' . s:ext )$/;"	v
s:Path	.\plugin\NERD_tree.vim	/^let s:Path = {}$/;"	v
s:ProjVersion	.\plugin\proj.vim	/^let s:ProjVersion = '1.0'$/;"	v
s:prototype	.\autoload\tlib\Filter_cnf.vim	/^let s:prototype = tlib#Object#New({'_class': ['Filter_cnf'], 'name': 'cnf'}) "{{{2$/;"	v
s:prototype	.\autoload\tlib\Filter_cnfd.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_cnfd'], 'name': 'cnfd'}) "{{{2$/;"	v
s:prototype	.\autoload\tlib\Filter_fuzzy.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_fuzzy'], 'name': 'fuzzy'}) "{{{2$/;"	v
s:prototype	.\autoload\tlib\Filter_seq.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_seq'], 'name': 'seq'}) "{{{2$/;"	v
s:prototype	.\autoload\tlib\Object.vim	/^let s:prototype  = {'_class': ['object'], '_super': [], '_id': 0} "{{{2$/;"	v
s:prototype	.\autoload\tlib\Test.vim	/^let s:prototype = tlib#Object#New({'_class': ['Test']}) "{{{2$/;"	v
s:prototype	.\autoload\tlib\TestChild.vim	/^let s:prototype = tlib#Test#New({'_class': ['TestChild']}) "{{{2$/;"	v
s:prototype	.\autoload\tlib\World.vim	/^let s:prototype = tlib#Object#New({$/;"	v
s:readable_prototype	.\autoload\rails.vim	/^let s:readable_prototype = {}$/;"	v
s:running_windows	.\plugin\NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	.\autoload\dbext_dbi.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\genutils.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\autocmdgroup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\comments.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\Filter_cnf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\Filter_cnfd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\Filter_fuzzy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\Filter_seq.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\normal.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\notify.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\autoload\tlib\syntax.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\02tlib.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\diffchanges.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\ttags.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\utl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\utl_scm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\plugin\utl_uri.vim	/^let s:save_cpo = &cpo$/;"	v
s:scriptname	.\compiler\ghc.vim	/^let s:scriptname = "ghc.vim"$/;"	v
s:scriptname	.\ftplugin\haskell_doc.vim	/^let s:scriptname = "haskell_doc.vim"$/;"	v
s:seen	.\plugin\sudo.vim	/^let s:seen=1$/;"	v
s:selection	.\autoload\genutils.vim	/^let s:selection = -1$/;"	v
s:sid	.\autoload\rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:signCount	.\plugin\cuteErrorMarker.vim	/^let s:signCount = 0$/;"	v
s:signId	.\plugin\cuteErrorMarker.vim	/^let s:signId = 33000$/;"	v
s:snippets	.\plugin\snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:SortChoice	.\plugin\EasyGrep.vim	/^let s:SortChoice = 0$/;"	v
s:SortFunctions	.\plugin\EasyGrep.vim	/^let s:SortFunctions = [ "SortName", "SortNameReversed", "SortExtension", "SortExtensionReversed" ]$/;"	v
s:SortOptions	.\plugin\EasyGrep.vim	/^let s:SortOptions = [ "Name", "Name Reversed", "Extension", "Extension Reversed" ]$/;"	v
s:spacer	.\autoload\genutils.vim	/^let s:spacer= "                                                               ".$/;"	v
s:statusline	.\autoload\tlib\progressbar.vim	/^let s:statusline = []$/;"	v
s:tags	.\autoload\ttags.vim	/^let s:tags = {}$/;"	v
s:timestamp	.\autoload\tlib\progressbar.vim	/^let s:timestamp = -1$/;"	v
s:tlist_app_name	.\plugin\taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	.\plugin\taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	.\plugin\taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	.\plugin\taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	.\plugin\taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	.\plugin\taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	.\plugin\taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	.\plugin\taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	.\plugin\taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	.\plugin\taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_cobol_settings	.\plugin\taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	.\plugin\taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_csh_settings	.\plugin\taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_cs_settings	.\plugin\taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_c_settings	.\plugin\taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_eiffel_settings	.\plugin\taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	.\plugin\taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	.\plugin\taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	.\plugin\taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	.\plugin\taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_javascript_settings	.\plugin\taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_java_settings	.\plugin\taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_lisp_settings	.\plugin\taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	.\plugin\taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	.\plugin\taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	.\plugin\taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	.\plugin\taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	.\plugin\taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	.\plugin\taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	.\plugin\taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	.\plugin\taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	.\plugin\taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	.\plugin\taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	.\plugin\taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	.\plugin\taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	.\plugin\taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	.\plugin\taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	.\plugin\taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	.\plugin\taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	.\plugin\taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	.\plugin\taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	.\plugin\taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	.\plugin\taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	.\plugin\taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_names	.\plugin\taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_file_name_idx_cache	.\plugin\taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_ftype_count	.\plugin\taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	.\plugin\taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	.\plugin\taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	.\plugin\taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	.\plugin\taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:Tlist_Skip_Refresh	.\plugin\taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:tlist_winsize_chgd	.\plugin\taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tlist_win_maximized	.\plugin\taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:TrackedExt	.\plugin\EasyGrep.vim	/^let s:TrackedExt = "*"$/;"	v
s:TreeDirNode	.\plugin\NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	.\plugin\NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:tree_markup_reg	.\plugin\NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	.\plugin\NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	.\plugin\NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:UNPROTECTED_CHAR_PRFX	.\autoload\genutils.vim	/^let s:UNPROTECTED_CHAR_PRFX = '\\%(\\%([^\\\\]\\|^\\)\\\\\\%(\\\\\\\\\\)*\\)\\@<!' " Doesn't eat slashes.$/;"	v
s:utl_esccmdspecial	.\plugin\utl.vim	/^let s:utl_esccmdspecial = '%#'	" keep equal to utl_scm.vim#__esc$/;"	v
s:utl_esccmdspecial	.\plugin\utl_scm.vim	/^let s:utl_esccmdspecial = '%#'  " keep equal to utl.vim#__esc$/;"	v
s:utl_trace_buffer	.\plugin\utl.vim	/^let s:utl_trace_buffer = ''$/;"	v
s:utl_trace_level	.\plugin\utl.vim	/^let s:utl_trace_level = 0$/;"	v
s:V	.\autoload\genutils.vim	/^let s:V = 5$/;"	v
s:value	.\autoload\tlib\progressbar.vim	/^let s:value = []$/;"	v
s:view_types	.\autoload\rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:width	.\autoload\tlib\progressbar.vim	/^let s:width = []$/;"	v
s:X	.\autoload\genutils.vim	/^let s:X = 10$/;"	v
SaveMark	.\plugin\cecutil.vim	/^fun! SaveMark(markname)$/;"	f
savepoint	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> savepoint <C-R>=SqlIab_ReplaceConditionally('savepoint', 'SAVEPOINT')<CR>$/;"	m
SavePosn	.\autoload\ZoomWin.vim	/^fun! s:SavePosn(savewinhoriz)$/;"	f
saveScreenState	.\plugin\NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
SaveUserMaps	.\plugin\cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveVariable	.\plugin\EasyGrep.vim	/^function! s:SaveVariable(var)$/;"	f
SaveWinPosn	.\plugin\cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
scanlineforuris	.\autoload\rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scrub	.\autoload\rails.vim	/^function! s:scrub(collection,item)$/;"	f
select	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> select <C-R>=SqlIab_ReplaceConditionally('select', 'SELECT')<CR>$/;"	m
Select	.\plugin\dbext.vim	/^command! -nargs=+ Select            :call dbext#DB_execSql("select " . <q-args>)$/;"	c
Select	.\plugin\EasyGrep.vim	/^function! <sid>Select()$/;"	f
SelectClass	.\plugin\cuteErrorMarker.vim	/^fun! s:SelectClass( error ) "{{{$/;"	f
selectiveexpand	.\autoload\rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
SelectWord	.\autoload\snipMate.vim	/^fun s:SelectWord()$/;"	f
sequence	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> sequence <C-R>=SqlIab_ReplaceConditionally('sequence', 'SEQUENCE')<CR>$/;"	m
serial	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> serial <C-R>=SqlIab_ReplaceConditionally('serial', 'SERIAL')<CR>$/;"	m
session	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> session <C-R>=SqlIab_ReplaceConditionally('session', 'SESSION')<CR>$/;"	m
Set	.\autoload\rails.vim	/^function! s:Set(bang,...)$/;"	f
set	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> set <C-R>=SqlIab_ReplaceConditionally('set', 'SET')<CR>$/;"	m
Set	.\plugin\proj.vim	/^function! s:Set(var, val)$/;"	f
SetAppConfig	.\plugin\symfony.vim	/^function! SetAppConfig()$/;"	f
SetBasePath	.\autoload\rails.vim	/^function! s:SetBasePath()$/;"	f
SetCurrentExtension	.\plugin\EasyGrep.vim	/^function! s:SetCurrentExtension()$/;"	f
SetGatewayVariables	.\plugin\EasyGrep.vim	/^function! s:SetGatewayVariables()$/;"	f
SetModuleConfig	.\plugin\symfony.vim	/^function! SetModuleConfig()$/;"	f
setopt	.\autoload\rails.vim	/^function! s:setopt(opt,val)$/;"	f
SetOptDefault	.\plugin\rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetOrigin	.\autoload\ttags.vim	/^function! s:SetOrigin(world) "{{{3$/;"	f
SetProjectConfig	.\plugin\symfony.vim	/^function! SetProjectConfig()$/;"	f
SetScrollBind	.\autoload\tlib\file.vim	/^function! s:SetScrollBind(world) "{{{3$/;"	f
setupStatusline	.\plugin\NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	.\plugin\NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
SetWatchExtension	.\plugin\EasyGrep.vim	/^function! s:SetWatchExtension()$/;"	f
SfPluginLoad	.\plugin\symfony.vim	/^command! -nargs=1 -complete=dir SfPluginLoad :call SfPluginLoad(<args>)$/;"	c
SfPluginLoad	.\plugin\symfony.vim	/^function! SfPluginLoad(path)$/;"	f
SfSwitchView	.\plugin\symfony.vim	/^command! -n=? -complete=dir SfSwitchView :call Switch()$/;"	c
share	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> share <C-R>=SqlIab_ReplaceConditionally('share', 'SHARE')<CR>$/;"	m
ShellEscape	.\plugin\EasyGrep.vim	/^function! s:ShellEscape(item)$/;"	f
ShellEscapeList	.\plugin\EasyGrep.vim	/^function! s:ShellEscapeList(lst, seperator)$/;"	f
show	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> show <C-R>=SqlIab_ReplaceConditionally('show', 'SHOW')<CR>$/;"	m
ShowAvailableSnips	.\plugin\snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
showFileSystemMenu	.\plugin\NERD_tree.vim	/^function! s:showFileSystemMenu()$/;"	f
ShowMarks	.\plugin\showmarks.vim	/^	aug ShowMarks$/;"	a
ShowMarks	.\plugin\showmarks.vim	/^fun! s:ShowMarks()$/;"	f
ShowMarks	plugin/showmarks.vim	/^	aug ShowMarks$/;"	a
ShowMarks	plugin/showmarks.vim	/^fun! s:ShowMarks()$/;"	f
ShowMarksClearAll	.\plugin\showmarks.vim	/^com! -nargs=0 ShowMarksClearAll  :call <sid>ShowMarksClearAll()$/;"	c
ShowMarksClearAll	.\plugin\showmarks.vim	/^fun! s:ShowMarksClearAll()$/;"	f
ShowMarksClearAll	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksClearAll  :call <sid>ShowMarksClearAll()$/;"	c
ShowMarksClearAll	plugin/showmarks.vim	/^fun! s:ShowMarksClearAll()$/;"	f
ShowMarksClearMark	.\plugin\showmarks.vim	/^com! -nargs=0 ShowMarksClearMark :call <sid>ShowMarksClearMark()$/;"	c
ShowMarksClearMark	.\plugin\showmarks.vim	/^fun! s:ShowMarksClearMark()$/;"	f
ShowMarksClearMark	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksClearMark :call <sid>ShowMarksClearMark()$/;"	c
ShowMarksClearMark	plugin/showmarks.vim	/^fun! s:ShowMarksClearMark()$/;"	f
ShowMarksHideAll	.\plugin\showmarks.vim	/^fun! s:ShowMarksHideAll()$/;"	f
ShowMarksHideAll	plugin/showmarks.vim	/^fun! s:ShowMarksHideAll()$/;"	f
ShowMarksOn	.\plugin\showmarks.vim	/^com! -nargs=0 ShowMarksOn        :call <sid>ShowMarksOn()$/;"	c
ShowMarksOn	.\plugin\showmarks.vim	/^fun! s:ShowMarksOn()$/;"	f
ShowMarksOn	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksOn        :call <sid>ShowMarksOn()$/;"	c
ShowMarksOn	plugin/showmarks.vim	/^fun! s:ShowMarksOn()$/;"	f
ShowMarksPlaceMark	.\plugin\showmarks.vim	/^com! -nargs=0 ShowMarksPlaceMark :call <sid>ShowMarksPlaceMark()$/;"	c
ShowMarksPlaceMark	.\plugin\showmarks.vim	/^fun! s:ShowMarksPlaceMark()$/;"	f
ShowMarksPlaceMark	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksPlaceMark :call <sid>ShowMarksPlaceMark()$/;"	c
ShowMarksPlaceMark	plugin/showmarks.vim	/^fun! s:ShowMarksPlaceMark()$/;"	f
ShowMarksSetup	.\plugin\showmarks.vim	/^fun! s:ShowMarksSetup()$/;"	f
ShowMarksSetup	plugin/showmarks.vim	/^fun! s:ShowMarksSetup()$/;"	f
ShowMarksToggle	.\plugin\showmarks.vim	/^com! -nargs=0 ShowMarksToggle    :call <sid>ShowMarksToggle()$/;"	c
ShowMarksToggle	.\plugin\showmarks.vim	/^fun! s:ShowMarksToggle()$/;"	f
ShowMarksToggle	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksToggle    :call <sid>ShowMarksToggle()$/;"	c
ShowMarksToggle	plugin/showmarks.vim	/^fun! s:ShowMarksToggle()$/;"	f
ShowTag	.\autoload\ttags.vim	/^function! s:ShowTag(world, tagline) "{{{3$/;"	f
size	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> size <C-R>=SqlIab_ReplaceConditionally('size', 'SIZE')<CR>$/;"	m
SM	.\plugin\cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
smallint	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> smallint <C-R>=SqlIab_ReplaceConditionally('smallint', 'SMALLINT')<CR>$/;"	m
smgr	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> smgr <C-R>=SqlIab_ReplaceConditionally('smgr', 'SMGR')<CR>$/;"	m
sname	.\autoload\rails.vim	/^function! s:sname()$/;"	f
snipMate#expandSnip	.\autoload\snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	.\autoload\snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	.\plugin\snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
SNR	.\autoload\genutils.vim	/^function! s:SNR()$/;"	f
some	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> some <C-R>=SqlIab_ReplaceConditionally('some', 'SOME')<CR>$/;"	m
Sort	.\plugin\EasyGrep.vim	/^function! <sid>Sort()$/;"	f
SortExtension	.\plugin\EasyGrep.vim	/^function! SortExtension(lhs, rhs)$/;"	f
SortExtensionReversed	.\plugin\EasyGrep.vim	/^function! SortExtensionReversed(lhs, rhs)$/;"	f
SortName	.\plugin\EasyGrep.vim	/^function! SortName(lhs, rhs)$/;"	f
SortNameReversed	.\plugin\EasyGrep.vim	/^function! SortNameReversed(lhs, rhs)$/;"	f
specEdit	.\autoload\rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	.\autoload\rails.vim	/^function! s:specList(A,L,P)$/;"	f
SqlIab_ReplaceConditionally	.\ftplugin\sql_iabbr.vim	/^function! SqlIab_ReplaceConditionally(original, replacement)$/;"	f
start	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> start <C-R>=SqlIab_ReplaceConditionally('start', 'START')<CR>$/;"	m
startswith	.\autoload\rails.vim	/^function! s:startswith(string,prefix)$/;"	f
string	.\plugin\autotag.vim	/^import string$/;"	m
strip	.\plugin\proj.vim	/^function! s:strip(text)$/;"	f
stripMarkupFromLine	.\plugin\NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
Strlen	.\autoload\Align.vim	/^fun! s:Strlen(x)$/;"	f
stylesheetEdit	.\autoload\rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	.\autoload\rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	.\autoload\rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	.\plugin\rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
subprocess	.\plugin\autotag.vim	/^   import subprocess$/;"	m
successful	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> successful <C-R>=SqlIab_ReplaceConditionally('successful', 'SUCCESSFUL')<CR>$/;"	m
Sudo	.\plugin\sudo.vim	/^augroup Sudo$/;"	a
SudoRead	.\plugin\sudo.vim	/^command! -nargs=1 SudoRead call SudoRead(<f-args>)$/;"	c
SudoRead	.\plugin\sudo.vim	/^function! SudoRead(url)$/;"	f
SudoWrite	.\plugin\sudo.vim	/^command! -nargs=1 SudoWrite call SudoWrite(<f-args>)$/;"	c
SudoWrite	.\plugin\sudo.vim	/^function! SudoWrite (url) abort$/;"	f
Switch	.\plugin\symfony.vim	/^function! Switch()$/;"	f
SWP	.\plugin\cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
synonym	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> synonym <C-R>=SqlIab_ReplaceConditionally('synonym', 'SYNONYM')<CR>$/;"	m
sys	.\plugin\autotag.vim	/^import sys$/;"	m
sysdate	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> sysdate <C-R>=SqlIab_ReplaceConditionally('sysdate', 'SYSDATE')<CR>$/;"	m
table	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> table <C-R>=SqlIab_ReplaceConditionally('table', 'TABLE')<CR>$/;"	m
tabpagevar	.\plugin\NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
TagList_IsValid	.\plugin\taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	.\plugin\taglist.vim	/^function! TagList_Start()$/;"	f
TagList_title	.\plugin\taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TagList_WrapUp	.\plugin\taglist.vim	/^function! TagList_WrapUp()$/;"	f
taskEdit	.\autoload\rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	.\autoload\rails.vim	/^function! s:taskList(A,L,P)$/;"	f
TBrowseOutput	.\plugin\02tlib.vim	/^command! -nargs=1 -complete=command TBrowseOutput call tlib#cmd#BrowseOutput(<q-args>)$/;"	c
text	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> text <C-R>=SqlIab_ReplaceConditionally('text', 'TEXT')<CR>$/;"	m
TheCWord	.\autoload\rails.vim	/^function! s:TheCWord()$/;"	f
then	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> then <C-R>=SqlIab_ReplaceConditionally('then', 'THEN')<CR>$/;"	m
tid	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> tid <C-R>=SqlIab_ReplaceConditionally('tid', 'TID')<CR>$/;"	m
time	.\plugin\autotag.vim	/^import time$/;"	m
timestamp	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> timestamp <C-R>=SqlIab_ReplaceConditionally('timestamp', 'TIMESTAMP')<CR>$/;"	m
tinterval	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> tinterval <C-R>=SqlIab_ReplaceConditionally('tinterval', 'TINTERVAL')<CR>$/;"	m
TKeyArg	.\plugin\02tlib.vim	/^command! -nargs=+ TKeyArg exec tlib#arg#Key([<args>])$/;"	c
TLet	.\plugin\02tlib.vim	/^command! -nargs=+ TLet if !exists(matchstr(<q-args>, '^[^=[:space:]]\\+')) | exec 'let '. <q-args> | endif$/;"	c
TLib	.\autoload\tlib\autocmdgroup.vim	/^augroup TLib$/;"	a
tlib#agent#AND	.\autoload\tlib\agent.vim	/^function! tlib#agent#AND(world, selected) "{{{3$/;"	f
tlib#agent#Copy	.\autoload\tlib\agent.vim	/^function! tlib#agent#Copy(world, selected) "{{{3$/;"	f
tlib#agent#CopyItems	.\autoload\tlib\agent.vim	/^function! tlib#agent#CopyItems(world, selected) "{{{3$/;"	f
tlib#agent#Cut	.\autoload\tlib\agent.vim	/^function! tlib#agent#Cut(world, selected) "{{{3$/;"	f
tlib#agent#Debug	.\autoload\tlib\agent.vim	/^function! tlib#agent#Debug(world, selected) "{{{3$/;"	f
tlib#agent#DeleteItems	.\autoload\tlib\agent.vim	/^function! tlib#agent#DeleteItems(world, selected) "{{{3$/;"	f
tlib#agent#DoAtLine	.\autoload\tlib\agent.vim	/^function! tlib#agent#DoAtLine(world, selected) "{{{3$/;"	f
tlib#agent#Down	.\autoload\tlib\agent.vim	/^function! tlib#agent#Down(world, selected, ...) "{{{3$/;"	f
tlib#agent#DownN	.\autoload\tlib\agent.vim	/^function! tlib#agent#DownN(world, selected) "{{{3$/;"	f
tlib#agent#EditFile	.\autoload\tlib\agent.vim	/^function! tlib#agent#EditFile(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInSplit	.\autoload\tlib\agent.vim	/^function! tlib#agent#EditFileInSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInTab	.\autoload\tlib\agent.vim	/^function! tlib#agent#EditFileInTab(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInVSplit	.\autoload\tlib\agent.vim	/^function! tlib#agent#EditFileInVSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditItem	.\autoload\tlib\agent.vim	/^function! tlib#agent#EditItem(world, selected) "{{{3$/;"	f
tlib#agent#EditReturnValue	.\autoload\tlib\agent.vim	/^function! tlib#agent#EditReturnValue(world, rv) "{{{3$/;"	f
tlib#agent#Exit	.\autoload\tlib\agent.vim	/^function! tlib#agent#Exit(world, selected) "{{{3$/;"	f
tlib#agent#GotoLine	.\autoload\tlib\agent.vim	/^function! tlib#agent#GotoLine(world, selected) "{{{3$/;"	f
tlib#agent#Help	.\autoload\tlib\agent.vim	/^function! tlib#agent#Help(world, selected) "{{{3$/;"	f
tlib#agent#Input	.\autoload\tlib\agent.vim	/^function! tlib#agent#Input(world, selected) "{{{3$/;"	f
tlib#agent#NewItem	.\autoload\tlib\agent.vim	/^function! tlib#agent#NewItem(world, selected) "{{{3$/;"	f
tlib#agent#OR	.\autoload\tlib\agent.vim	/^function! tlib#agent#OR(world, selected) "{{{3$/;"	f
tlib#agent#PageDown	.\autoload\tlib\agent.vim	/^function! tlib#agent#PageDown(world, selected) "{{{3$/;"	f
tlib#agent#PageUp	.\autoload\tlib\agent.vim	/^function! tlib#agent#PageUp(world, selected) "{{{3$/;"	f
tlib#agent#Paste	.\autoload\tlib\agent.vim	/^function! tlib#agent#Paste(world, selected) "{{{3$/;"	f
tlib#agent#PopFilter	.\autoload\tlib\agent.vim	/^function! tlib#agent#PopFilter(world, selected) "{{{3$/;"	f
tlib#agent#PreviewLine	.\autoload\tlib\agent.vim	/^function! tlib#agent#PreviewLine(world, selected) "{{{3$/;"	f
tlib#agent#ReduceFilter	.\autoload\tlib\agent.vim	/^function! tlib#agent#ReduceFilter(world, selected) "{{{3$/;"	f
tlib#agent#Reset	.\autoload\tlib\agent.vim	/^function! tlib#agent#Reset(world, selected) "{{{3$/;"	f
tlib#agent#Select	.\autoload\tlib\agent.vim	/^function! tlib#agent#Select(world, selected) "{{{3$/;"	f
tlib#agent#SelectAll	.\autoload\tlib\agent.vim	/^function! tlib#agent#SelectAll(world, selected) "{{{3$/;"	f
tlib#agent#SelectDown	.\autoload\tlib\agent.vim	/^function! tlib#agent#SelectDown(world, selected) "{{{3$/;"	f
tlib#agent#SelectUp	.\autoload\tlib\agent.vim	/^function! tlib#agent#SelectUp(world, selected) "{{{3$/;"	f
tlib#agent#ShiftLeft	.\autoload\tlib\agent.vim	/^function! tlib#agent#ShiftLeft(world, selected) "{{{3$/;"	f
tlib#agent#ShiftRight	.\autoload\tlib\agent.vim	/^function! tlib#agent#ShiftRight(world, selected) "{{{3$/;"	f
tlib#agent#ShowInfo	.\autoload\tlib\agent.vim	/^function! tlib#agent#ShowInfo(world, selected)$/;"	f
tlib#agent#Suspend	.\autoload\tlib\agent.vim	/^function! tlib#agent#Suspend(world, selected) "{{{3$/;"	f
tlib#agent#SuspendToParentWindow	.\autoload\tlib\agent.vim	/^function! tlib#agent#SuspendToParentWindow(world, selected) "{{{3$/;"	f
tlib#agent#ToggleScrollbind	.\autoload\tlib\agent.vim	/^function! tlib#agent#ToggleScrollbind(world, selected) "{{{3$/;"	f
tlib#agent#ToggleStickyList	.\autoload\tlib\agent.vim	/^function! tlib#agent#ToggleStickyList(world, selected) "{{{3$/;"	f
tlib#agent#Up	.\autoload\tlib\agent.vim	/^function! tlib#agent#Up(world, selected, ...) "{{{3$/;"	f
tlib#agent#UpN	.\autoload\tlib\agent.vim	/^function! tlib#agent#UpN(world, selected) "{{{3$/;"	f
tlib#agent#ViewFile	.\autoload\tlib\agent.vim	/^function! tlib#agent#ViewFile(world, selected) "{{{3$/;"	f
tlib#arg#Ex	.\autoload\tlib\arg.vim	/^function! tlib#arg#Ex(arg, ...) "{{{3$/;"	f
tlib#arg#Get	.\autoload\tlib\arg.vim	/^function! tlib#arg#Get(n, var, ...) "{{{3$/;"	f
tlib#arg#Key	.\autoload\tlib\arg.vim	/^function! tlib#arg#Key(list, ...) "{{{3$/;"	f
tlib#arg#Let	.\autoload\tlib\arg.vim	/^function! tlib#arg#Let(list, ...) "{{{3$/;"	f
tlib#arg#StringAsKeyArgs	.\autoload\tlib\arg.vim	/^function! tlib#arg#StringAsKeyArgs(string, ...) "{{{1$/;"	f
tlib#autocmdgroup#Init	.\autoload\tlib\autocmdgroup.vim	/^function! tlib#autocmdgroup#Init() "{{{3$/;"	f
tlib#buffer#BufDo	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#BufDo(exec) "{{{3$/;"	f
tlib#buffer#CurrentByte	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#CurrentByte() "{{{3$/;"	f
tlib#buffer#DeleteRange	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#DeleteRange(line1, line2) "{{{3$/;"	f
tlib#buffer#DisableMRU	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#DisableMRU() "{{{3$/;"	f
tlib#buffer#EnableMRU	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#EnableMRU() "{{{3$/;"	f
tlib#buffer#Eval	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#Eval(buffer, code) "{{{3$/;"	f
tlib#buffer#GetList	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#GetList(...)$/;"	f
tlib#buffer#HighlightLine	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#HighlightLine(line) "{{{3$/;"	f
tlib#buffer#InsertText	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#InsertText(text, ...) "{{{3$/;"	f
tlib#buffer#InsertText0	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#InsertText0(text, ...) "{{{3$/;"	f
tlib#buffer#KeepCursorPosition	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#KeepCursorPosition(cmd) "{{{3$/;"	f
tlib#buffer#ReplaceRange	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#ReplaceRange(line1, line2, lines)$/;"	f
tlib#buffer#ScratchEnd	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#ScratchEnd() "{{{3$/;"	f
tlib#buffer#ScratchStart	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#ScratchStart() "{{{3$/;"	f
tlib#buffer#Set	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#Set(buffer) "{{{3$/;"	f
tlib#buffer#ViewLine	.\autoload\tlib\buffer.vim	/^function! tlib#buffer#ViewLine(line, ...) "{{{3$/;"	f
tlib#cache#Filename	.\autoload\tlib\cache.vim	/^function! tlib#cache#Filename(type, ...) "{{{3$/;"	f
tlib#cache#Get	.\autoload\tlib\cache.vim	/^function! tlib#cache#Get(cfile) "{{{3$/;"	f
tlib#cache#Save	.\autoload\tlib\cache.vim	/^function! tlib#cache#Save(cfile, dictionary) "{{{3$/;"	f
tlib#char#Get	.\autoload\tlib\char.vim	/^function! tlib#char#Get(...) "{{{3$/;"	f
tlib#char#GetWithTimeout	.\autoload\tlib\char.vim	/^function! tlib#char#GetWithTimeout(timeout, ...) "{{{3$/;"	f
tlib#char#IsAvailable	.\autoload\tlib\char.vim	/^function! tlib#char#IsAvailable() "{{{3$/;"	f
tlib#cmd#BrowseOutput	.\autoload\tlib\cmd.vim	/^function! tlib#cmd#BrowseOutput(command) "{{{3$/;"	f
tlib#cmd#OutputAsList	.\autoload\tlib\cmd.vim	/^function! tlib#cmd#OutputAsList(command) "{{{3$/;"	f
tlib#cmd#Time	.\autoload\tlib\cmd.vim	/^function! tlib#cmd#Time(cmd) "{{{3$/;"	f
tlib#cmd#UseVertical	.\autoload\tlib\cmd.vim	/^function! tlib#cmd#UseVertical(...) "{{{3$/;"	f
tlib#comments#Comments	.\autoload\tlib\comments.vim	/^function! tlib#comments#Comments(...)$/;"	f
tlib#dir#CanonicName	.\autoload\tlib\dir.vim	/^function! tlib#dir#CanonicName(dirname) "{{{3$/;"	f
tlib#dir#CD	.\autoload\tlib\dir.vim	/^function! tlib#dir#CD(dir, ...) "{{{3$/;"	f
tlib#dir#Ensure	.\autoload\tlib\dir.vim	/^function! tlib#dir#Ensure(dir) "{{{3$/;"	f
tlib#dir#MyRuntime	.\autoload\tlib\dir.vim	/^function! tlib#dir#MyRuntime() "{{{3$/;"	f
tlib#dir#PlainName	.\autoload\tlib\dir.vim	/^function! tlib#dir#PlainName(dirname) "{{{3$/;"	f
tlib#dir#Pop	.\autoload\tlib\dir.vim	/^function! tlib#dir#Pop() "{{{3$/;"	f
tlib#dir#Push	.\autoload\tlib\dir.vim	/^function! tlib#dir#Push(dir, ...) "{{{3$/;"	f
tlib#eval#FormatValue	.\autoload\tlib\eval.vim	/^function! tlib#eval#FormatValue(value, ...) "{{{3$/;"	f
tlib#file#Join	.\autoload\tlib\file.vim	/^function! tlib#file#Join(filename_parts, ...) "{{{3$/;"	f
tlib#file#Relative	.\autoload\tlib\file.vim	/^function! tlib#file#Relative(filename, basedir) "{{{3$/;"	f
tlib#file#Split	.\autoload\tlib\file.vim	/^function! tlib#file#Split(filename) "{{{3$/;"	f
tlib#file#With	.\autoload\tlib\file.vim	/^function! tlib#file#With(fcmd, bcmd, files, ...) "{{{3$/;"	f
tlib#Filter_cnf#New	.\autoload\tlib\Filter_cnf.vim	/^function! tlib#Filter_cnf#New(...) "{{{3$/;"	f
tlib#Filter_cnfd#New	.\autoload\tlib\Filter_cnfd.vim	/^function! tlib#Filter_cnfd#New(...) "{{{3$/;"	f
tlib#Filter_fuzzy#New	.\autoload\tlib\Filter_fuzzy.vim	/^function! tlib#Filter_fuzzy#New(...) "{{{3$/;"	f
tlib#Filter_seq#New	.\autoload\tlib\Filter_seq.vim	/^function! tlib#Filter_seq#New(...) "{{{3$/;"	f
tlib#hook#Run	.\autoload\tlib\hook.vim	/^function! tlib#hook#Run(hook, ...) "{{{3$/;"	f
tlib#input#CommandSelect	.\autoload\tlib\input.vim	/^function! tlib#input#CommandSelect(command, ...) "{{{3$/;"	f
tlib#input#Edit	.\autoload\tlib\input.vim	/^function! tlib#input#Edit(name, value, callback, ...) "{{{3$/;"	f
tlib#input#EditList	.\autoload\tlib\input.vim	/^function! tlib#input#EditList(query, list, ...) "{{{3$/;"	f
tlib#input#List	.\autoload\tlib\input.vim	/^function! tlib#input#List(type, ...) "{{{3$/;"	f
tlib#input#ListD	.\autoload\tlib\input.vim	/^function! tlib#input#ListD(dict) "{{{3$/;"	f
tlib#input#ListW	.\autoload\tlib\input.vim	/^function! tlib#input#ListW(world, ...) "{{{3$/;"	f
tlib#input#Resume	.\autoload\tlib\input.vim	/^function! tlib#input#Resume(name, pick) "{{{3$/;"	f
tlib#list#All	.\autoload\tlib\list.vim	/^function! tlib#list#All(list, expr) "{{{3$/;"	f
tlib#list#Any	.\autoload\tlib\list.vim	/^function! tlib#list#Any(list, expr) "{{{3$/;"	f
tlib#list#Compact	.\autoload\tlib\list.vim	/^function! tlib#list#Compact(list) "{{{3$/;"	f
tlib#list#Find	.\autoload\tlib\list.vim	/^function! tlib#list#Find(list, filter, ...) "{{{3$/;"	f
tlib#list#FindAll	.\autoload\tlib\list.vim	/^function! tlib#list#FindAll(list, filter, ...) "{{{3$/;"	f
tlib#list#Flatten	.\autoload\tlib\list.vim	/^function! tlib#list#Flatten(list) "{{{3$/;"	f
tlib#list#Inject	.\autoload\tlib\list.vim	/^function! tlib#list#Inject(list, value, Function) "{{{3$/;"	f
tlib#list#Remove	.\autoload\tlib\list.vim	/^function! tlib#list#Remove(list, element) "{{{3$/;"	f
tlib#list#RemoveAll	.\autoload\tlib\list.vim	/^function! tlib#list#RemoveAll(list, element) "{{{3$/;"	f
tlib#list#Uniq	.\autoload\tlib\list.vim	/^function! tlib#list#Uniq(list, ...) "{{{3$/;"	f
tlib#list#Zip	.\autoload\tlib\list.vim	/^function! tlib#list#Zip(lists, ...) "{{{3$/;"	f
tlib#normal#WithRegister	.\autoload\tlib\normal.vim	/^function! tlib#normal#WithRegister(cmd, ...) "{{{3$/;"	f
tlib#notify#Echo	.\autoload\tlib\notify.vim	/^function! tlib#notify#Echo(text, ...) "{{{3$/;"	f
tlib#notify#TrimMessage	.\autoload\tlib\notify.vim	/^function! tlib#notify#TrimMessage(message) "{{{3$/;"	f
tlib#Object#New	.\autoload\tlib\Object.vim	/^function! tlib#Object#New(...) "{{{3$/;"	f
tlib#progressbar#Display	.\autoload\tlib\progressbar.vim	/^function! tlib#progressbar#Display(value, ...) "{{{3$/;"	f
tlib#progressbar#Init	.\autoload\tlib\progressbar.vim	/^function! tlib#progressbar#Init(max, ...) "{{{3$/;"	f
tlib#progressbar#Restore	.\autoload\tlib\progressbar.vim	/^function! tlib#progressbar#Restore() "{{{3$/;"	f
tlib#rx#Escape	.\autoload\tlib\rx.vim	/^function! tlib#rx#Escape(text, ...) "{{{3$/;"	f
tlib#rx#EscapeReplace	.\autoload\tlib\rx.vim	/^function! tlib#rx#EscapeReplace(text, ...) "{{{3$/;"	f
tlib#rx#Suffixes	.\autoload\tlib\rx.vim	/^function! tlib#rx#Suffixes(...) "{{{3$/;"	f
tlib#scratch#CloseScratch	.\autoload\tlib\scratch.vim	/^function! tlib#scratch#CloseScratch(keyargs, ...) "{{{3$/;"	f
tlib#scratch#UseScratch	.\autoload\tlib\scratch.vim	/^function! tlib#scratch#UseScratch(...) "{{{3$/;"	f
tlib#string#Chomp	.\autoload\tlib\string.vim	/^function! tlib#string#Chomp(string) "{{{3$/;"	f
tlib#string#Count	.\autoload\tlib\string.vim	/^function! tlib#string#Count(string, rx) "{{{3$/;"	f
tlib#string#Format	.\autoload\tlib\string.vim	/^function! tlib#string#Format(template, dict) "{{{3$/;"	f
tlib#string#Printf1	.\autoload\tlib\string.vim	/^function! tlib#string#Printf1(format, string) "{{{3$/;"	f
tlib#string#RemoveBackslashes	.\autoload\tlib\string.vim	/^function! tlib#string#RemoveBackslashes(text, ...) "{{{3$/;"	f
tlib#string#Strip	.\autoload\tlib\string.vim	/^function! tlib#string#Strip(string) "{{{3$/;"	f
tlib#string#TrimLeft	.\autoload\tlib\string.vim	/^function! tlib#string#TrimLeft(string) "{{{3$/;"	f
tlib#string#TrimRight	.\autoload\tlib\string.vim	/^function! tlib#string#TrimRight(string) "{{{3$/;"	f
tlib#syntax#Collect	.\autoload\tlib\syntax.vim	/^function! tlib#syntax#Collect() "{{{3$/;"	f
tlib#syntax#Names	.\autoload\tlib\syntax.vim	/^function! tlib#syntax#Names(...) "{{{3$/;"	f
tlib#tab#BufMap	.\autoload\tlib\tab.vim	/^function! tlib#tab#BufMap() "{{{3$/;"	f
tlib#tab#Set	.\autoload\tlib\tab.vim	/^function! tlib#tab#Set(tabnr) "{{{3$/;"	f
tlib#tab#TabWinNr	.\autoload\tlib\tab.vim	/^function! tlib#tab#TabWinNr(buffer) "{{{3$/;"	f
tlib#tag#Collect	.\autoload\tlib\tag.vim	/^function! tlib#tag#Collect(constraints, ...) "{{{3$/;"	f
tlib#tag#Format	.\autoload\tlib\tag.vim	/^function! tlib#tag#Format(tag) "{{{3$/;"	f
tlib#tag#Retrieve	.\autoload\tlib\tag.vim	/^function! tlib#tag#Retrieve(rx, ...) "{{{3$/;"	f
tlib#Test#New	.\autoload\tlib\Test.vim	/^function! tlib#Test#New(...) "{{{3$/;"	f
tlib#TestChild#New	.\autoload\tlib\TestChild.vim	/^function! tlib#TestChild#New(...) "{{{3$/;"	f
tlib#time#Diff	.\autoload\tlib\time.vim	/^function! tlib#time#Diff(a, b, ...) "{{{3$/;"	f
tlib#time#DiffMSecs	.\autoload\tlib\time.vim	/^function! tlib#time#DiffMSecs(a, b, ...) "{{{3$/;"	f
tlib#time#MSecs	.\autoload\tlib\time.vim	/^function! tlib#time#MSecs() "{{{3$/;"	f
tlib#time#Now	.\autoload\tlib\time.vim	/^function! tlib#time#Now() "{{{3$/;"	f
tlib#type#IsDictionary	.\autoload\tlib\type.vim	/^function! tlib#type#IsDictionary(expr)$/;"	f
tlib#type#IsFuncref	.\autoload\tlib\type.vim	/^function! tlib#type#IsFuncref(expr)$/;"	f
tlib#type#IsList	.\autoload\tlib\type.vim	/^function! tlib#type#IsList(expr)$/;"	f
tlib#type#IsNumber	.\autoload\tlib\type.vim	/^function! tlib#type#IsNumber(expr)$/;"	f
tlib#type#IsString	.\autoload\tlib\type.vim	/^function! tlib#type#IsString(expr)$/;"	f
tlib#url#Decode	.\autoload\tlib\url.vim	/^function! tlib#url#Decode(url) "{{{3$/;"	f
tlib#url#DecodeChar	.\autoload\tlib\url.vim	/^function! tlib#url#DecodeChar(char) "{{{3$/;"	f
tlib#url#Encode	.\autoload\tlib\url.vim	/^function! tlib#url#Encode(url, ...) "{{{3$/;"	f
tlib#url#EncodeChar	.\autoload\tlib\url.vim	/^function! tlib#url#EncodeChar(char) "{{{3$/;"	f
tlib#var#EGet	.\autoload\tlib\var.vim	/^function! tlib#var#EGet(var, namespace, ...) "{{{3$/;"	f
tlib#var#Get	.\autoload\tlib\var.vim	/^function! tlib#var#Get(var, namespace, ...) "{{{3$/;"	f
tlib#var#Let	.\autoload\tlib\var.vim	/^function! tlib#var#Let(name, val) "{{{3$/;"	f
tlib#var#List	.\autoload\tlib\var.vim	/^function! tlib#var#List(rx, ...) "{{{3$/;"	f
tlib#win#GetLayout	.\autoload\tlib\win.vim	/^function! tlib#win#GetLayout(...) "{{{3$/;"	f
tlib#win#List	.\autoload\tlib\win.vim	/^function! tlib#win#List() "{{{3$/;"	f
tlib#win#Set	.\autoload\tlib\win.vim	/^function! tlib#win#Set(winnr) "{{{3$/;"	f
tlib#win#SetLayout	.\autoload\tlib\win.vim	/^function! tlib#win#SetLayout(layout) "{{{3$/;"	f
tlib#win#Width	.\autoload\tlib\win.vim	/^function! tlib#win#Width(wnr) "{{{3$/;"	f
tlib#World#New	.\autoload\tlib\World.vim	/^function! tlib#World#New(...)$/;"	f
Tlist	.\plugin\taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	.\plugin\taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	.\plugin\taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	.\plugin\taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	.\plugin\taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	.\plugin\taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	.\plugin\taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	.\plugin\taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	.\plugin\taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	.\plugin\taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	.\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	.\plugin\taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	.\plugin\taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	.\plugin\taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	.\plugin\taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	.\plugin\taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	.\plugin\taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	.\plugin\taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	.\plugin\taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	.\plugin\taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	.\plugin\taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	.\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	.\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	.\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	.\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	.\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	.\plugin\taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	.\plugin\taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	.\plugin\taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	.\plugin\taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	.\plugin\taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	.\plugin\taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	.\plugin\taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	.\plugin\taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	.\plugin\taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	.\plugin\taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	.\plugin\taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tagtype	.\plugin\taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_Extract_Tag_Scope	.\plugin\taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_FileType_Init	.\plugin\taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	.\plugin\taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	.\plugin\taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	.\plugin\taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	.\plugin\taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	.\plugin\taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tagname_By_Line	.\plugin\taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Get_Tag_Linenum	.\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	.\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	.\plugin\taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	.\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	.\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	.\plugin\taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	.\plugin\taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	.\plugin\taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	.\plugin\taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	.\plugin\taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	.\plugin\taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	.\plugin\taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	.\plugin\taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	.\plugin\taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	.\plugin\taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	.\plugin\taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	.\plugin\taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	.\plugin\taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_Filelist	.\plugin\taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Process_File_Always	.\plugin\taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Refresh	.\plugin\taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	.\plugin\taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	.\plugin\taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	.\plugin\taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	.\plugin\taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	.\plugin\taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	.\plugin\taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	.\plugin\taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	.\plugin\taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	.\plugin\taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	.\plugin\taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	.\plugin\taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	.\plugin\taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_User_Removed_File	.\plugin\taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Use_Horiz_Window	.\plugin\taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	.\plugin\taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	.\plugin\taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_Vim_Session_Load	.\plugin\taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	.\plugin\taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_Window_Check_Auto_Open	.\plugin\taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	.\plugin\taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	.\plugin\taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	.\plugin\taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	.\plugin\taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	.\plugin\taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	.\plugin\taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	.\plugin\taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	.\plugin\taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	.\plugin\taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	.\plugin\taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	.\plugin\taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	.\plugin\taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	.\plugin\taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	.\plugin\taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	.\plugin\taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	.\plugin\taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	.\plugin\taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	.\plugin\taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	.\plugin\taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	.\plugin\taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	.\plugin\taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	.\plugin\taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	.\plugin\taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	.\plugin\taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	.\plugin\taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	.\plugin\taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	.\plugin\taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
Tlist_WinHeight	.\plugin\taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	.\plugin\taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
to	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> to <C-R>=SqlIab_ReplaceConditionally('to', 'TO')<CR>$/;"	m
toggle	.\plugin\NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
ToggleCommand	.\plugin\EasyGrep.vim	/^function! <sid>ToggleCommand()$/;"	f
ToggleEveryMatch	.\plugin\EasyGrep.vim	/^function! <sid>ToggleEveryMatch()$/;"	f
ToggleHidden	.\plugin\EasyGrep.vim	/^function! <sid>ToggleHidden()$/;"	f
ToggleIgnoreCase	.\plugin\EasyGrep.vim	/^function! <sid>ToggleIgnoreCase()$/;"	f
toggleIgnoreFilter	.\plugin\NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
ToggleJumpToMatch	.\plugin\EasyGrep.vim	/^function! <sid>ToggleJumpToMatch()$/;"	f
ToggleOpenWindow	.\plugin\EasyGrep.vim	/^function! <sid>ToggleOpenWindow()$/;"	f
ToggleOptionsDisplay	.\plugin\EasyGrep.vim	/^function! <sid>ToggleOptionsDisplay()$/;"	f
ToggleRecursion	.\plugin\EasyGrep.vim	/^function! <sid>ToggleRecursion()$/;"	f
toggleShowBookmarks	.\plugin\NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	.\plugin\NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	.\plugin\NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
ToggleWholeWord	.\plugin\EasyGrep.vim	/^function! <sid>ToggleWholeWord()$/;"	f
ToggleWindow	.\plugin\EasyGrep.vim	/^function! <sid>ToggleWindow()$/;"	f
traceback	.\plugin\autotag.vim	/^   import traceback$/;"	m
trans	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> trans <C-R>=SqlIab_ReplaceConditionally('trans', 'TRANSACTION')<CR>$/;"	m
transaction	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> transaction <C-R>=SqlIab_ReplaceConditionally('transaction', 'TRANSACTION')<CR>$/;"	m
TreeDirNode.AbsoluteTreeRoot	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.addChild	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.GetSelected	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.getVisibleChildCount	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.New	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode.open	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openRecursively	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeDirNode._initChildren	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	.\plugin\NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
treeExistsForBuf	.\plugin\NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	.\plugin\NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
TreeFileNode.bookmark	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.equals	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.GetRootLineNum	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.isRoot	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.New	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode.open	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openSplit	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode.strDisplay	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode.strDisplay()$/;"	f
TreeFileNode._renderToString	.\plugin\NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TRequire	.\plugin\02tlib.vim	/^command! -nargs=+ TRequire let s:require = [<f-args>]$/;"	c
trigger	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> trigger <C-R>=SqlIab_ReplaceConditionally('trigger', 'TRIGGER')<CR>$/;"	m
TriggerSnippet	.\plugin\snipMate.vim	/^fun! TriggerSnippet()$/;"	f
Trim	.\plugin\EasyGrep.vim	/^function! s:Trim(s)$/;"	f
true	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> true <C-R>=SqlIab_ReplaceConditionally('true', 'TRUE')<CR>$/;"	m
truncate	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> truncate <C-R>=SqlIab_ReplaceConditionally('truncate', 'TRUNCATE')<CR>$/;"	m
try	.\autoload\rails.vim	/^function! s:try(cmd) abort$/;"	f
TScratch	.\plugin\02tlib.vim	/^command! -bar -nargs=* -bang TScratch call tlib#scratch#UseScratch({'scratch_split': '<bang>' != '!', <args>})$/;"	c
TTags	.\plugin\ttags.vim	/^command! -nargs=* -bang TTags call ttags#List(!empty('<bang>'), <f-args>)$/;"	c
ttags#GotoTag	.\autoload\ttags.vim	/^function! ttags#GotoTag(world, selected) "{{{3$/;"	f
ttags#Highlight	.\autoload\ttags.vim	/^function! ttags#Highlight(tags) "{{{3$/;"	f
ttags#InsertTemplate	.\autoload\ttags.vim	/^function! ttags#InsertTemplate(world, selected) "{{{3$/;"	f
ttags#Kinds	.\autoload\ttags.vim	/^function! ttags#Kinds(...) "{{{3$/;"	f
ttags#List	.\autoload\ttags.vim	/^function! ttags#List(use_extra, ...) "{{{3$/;"	f
ttags#PreviewTag	.\autoload\ttags.vim	/^function! ttags#PreviewTag(world, selected) "{{{3$/;"	f
ttags#RewriteCygwinTag	.\autoload\ttags.vim	/^function! ttags#RewriteCygwinTag(filename) "{{{3$/;"	f
ttags#Select	.\autoload\ttags.vim	/^function! ttags#Select(use_extra, keyargs_as_string) "{{{3$/;"	f
ttags#SelectTags	.\autoload\ttags.vim	/^function! ttags#SelectTags(use_extra, constraints) "{{{3$/;"	f
TTagselect	.\plugin\ttags.vim	/^command! -nargs=* -bang TTagselect call ttags#Select(!empty('<bang>'), <q-args>)$/;"	c
TVarArg	.\plugin\02tlib.vim	/^command! -nargs=+ TVarArg exec tlib#arg#Let([<args>])$/;"	c
type	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> type <C-R>=SqlIab_ReplaceConditionally('type', 'TYPE')<CR>$/;"	m
u	.\autoload\repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
uid	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> uid <C-R>=SqlIab_ReplaceConditionally('uid', 'UID')<CR>$/;"	m
union	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> union <C-R>=SqlIab_ReplaceConditionally('union', 'UNION')<CR>$/;"	m
unique	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> unique <C-R>=SqlIab_ReplaceConditionally('unique', 'UNIQUE')<CR>$/;"	m
unique	.\plugin\EasyGrep.vim	/^function! s:unique(lst)$/;"	f
unique	.\plugin\NERD_tree.vim	/^function! s:unique(list)$/;"	f
UniqValue	.\autoload\tlib\list.vim	/^function! s:UniqValue(value) "{{{3$/;"	f
unittestEdit	.\autoload\rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	.\autoload\rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unknown	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> unknown <C-R>=SqlIab_ReplaceConditionally('unknown', 'UNKNOWN')<CR>$/;"	m
unlisten	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> unlisten <C-R>=SqlIab_ReplaceConditionally('unlisten', 'UNLISTEN')<CR>$/;"	m
update	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> update <C-R>=SqlIab_ReplaceConditionally('update', 'UPDATE')<CR>$/;"	m
Update	.\plugin\dbext.vim	/^command! -nargs=+ Update            :call dbext#DB_execSql("update " . <q-args>)$/;"	c
UpdateAll	.\plugin\EasyGrep.vim	/^function! s:UpdateAll()$/;"	f
UpdateChangedSnip	.\autoload\snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateChoice	.\plugin\EasyGrep.vim	/^function! s:UpdateChoice(choice)$/;"	f
UpdateOptions	.\plugin\EasyGrep.vim	/^function! s:UpdateOptions()$/;"	f
UpdatePlaceholderTabStops	.\autoload\snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateRange	.\plugin\EasyGrep.vim	/^function! s:UpdateRange(first, last)$/;"	f
UpdateTabStops	.\autoload\snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	.\autoload\snipMate.vim	/^fun s:UpdateVars()$/;"	f
upDir	.\plugin\NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
UriRef_getFragment	.\plugin\utl_uri.vim	/^fu! UriRef_getFragment(uriref)$/;"	f
UriRef_getUri	.\plugin\utl_uri.vim	/^fu! UriRef_getUri(uriref)$/;"	f
user	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> user <C-R>=SqlIab_ReplaceConditionally('user', 'USER')<CR>$/;"	m
using	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> using <C-R>=SqlIab_ReplaceConditionally('using', 'USING')<CR>$/;"	m
utilLookup	.\plugin\utl.vim	/^fu! s:utilLookup(dict,key)$/;"	f
Utl	.\plugin\utl.vim	/^command -complete=custom,s:completeArgs -range -nargs=* Utl call Utl(<f-args>)$/;"	c
Utl	.\plugin\utl.vim	/^fu! Utl(...)$/;"	f
UtlUri_abs	.\plugin\utl_uri.vim	/^fu! UtlUri_abs(uri, base)$/;"	f
UtlUri_authority	.\plugin\utl_uri.vim	/^fu! UtlUri_authority(uri)$/;"	f
UtlUri_build	.\plugin\utl_uri.vim	/^fu! UtlUri_build(scheme, authority, path, query, fragment)$/;"	f
UtlUri_build_2	.\plugin\utl_uri.vim	/^fu! UtlUri_build_2(absUriRef, fragment)$/;"	f
UtlUri_fragment	.\plugin\utl_uri.vim	/^fu! UtlUri_fragment(uri)$/;"	f
UtlUri_opaque	.\plugin\utl_uri.vim	/^fu! UtlUri_opaque(uri)$/;"	f
UtlUri_parse	.\plugin\utl_uri.vim	/^fu! s:UtlUri_parse(uri, idx)$/;"	f
UtlUri_path	.\plugin\utl_uri.vim	/^fu! UtlUri_path(uri)$/;"	f
UtlUri_query	.\plugin\utl_uri.vim	/^fu! UtlUri_query(uri)$/;"	f
UtlUri_scheme	.\plugin\utl_uri.vim	/^fu! UtlUri_scheme(uri)$/;"	f
UtlUri_unescape	.\plugin\utl_uri.vim	/^fu! UtlUri_unescape(esc)$/;"	f
Utl_AddressScheme_config	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_config(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_file	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_file(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_foot	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_foot(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_ftp	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_ftp(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_http	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_http(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_https	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_https(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_mail	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_mail(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_mailto	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_mailto(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_man	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_man(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_scp	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_scp(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_vimhelp	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_vimhelp(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_vimscript	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_vimscript(auri, fragment, dispMode)$/;"	f
Utl_AddressScheme_vimtip	.\plugin\utl_scm.vim	/^fu! Utl_AddressScheme_vimtip(auri, fragment, dispMode)$/;"	f
Utl_checkHeuristicAbsUrl	.\plugin\utl.vim	/^fu! s:Utl_checkHeuristicAbsUrl(uri)$/;"	f
Utl_checkMediaType	.\plugin\utl.vim	/^fu! s:Utl_checkMediaType(path)$/;"	f
Utl_displayFile	.\plugin\utl.vim	/^fu! s:Utl_displayFile(localPath, dispMode)$/;"	f
Utl_escapeCmdLineSpecialChars	.\plugin\utl.vim	/^fu! s:Utl_escapeCmdLineSpecialChars(fileName)$/;"	f
Utl_extractUrlByPattern	.\plugin\utl.vim	/^fu! s:Utl_extractUrlByPattern(linestr, icurs, pat)$/;"	f
Utl_getUrlUnderCursor	.\plugin\utl.vim	/^fu! Utl_getUrlUnderCursor()$/;"	f
Utl_goUrl	.\plugin\utl.vim	/^fu! s:Utl_goUrl(dispMode)$/;"	f
Utl_if_hdl_mt_application_msword__word	.\plugin\utl.vim	/^fu! Utl_if_hdl_mt_application_msword__word(path,fragment)$/;"	f
Utl_if_hdl_mt_application_pdf_acrobat	.\plugin\utl.vim	/^fu! Utl_if_hdl_mt_application_pdf_acrobat(path,fragment)$/;"	f
Utl_if_hdl_scm_http__wget	.\plugin\utl.vim	/^fu! Utl_if_hdl_scm_http__wget(url)$/;"	f
Utl_if_hdl_scm_mail__outlook	.\plugin\utl.vim	/^fu! Utl_if_hdl_scm_mail__outlook(authority, path, date, from, subject)$/;"	f
utl_lib#Postinstall	.\autoload\utl_lib.vim	/^function! utl_lib#Postinstall()$/;"	f
utl_opt_highlight_urls	.\plugin\utl.vim	/^    let utl_opt_highlight_urls='yes'$/;"	v
utl_opt_verbose	.\plugin\utl.vim	/^    let utl_opt_verbose=0$/;"	v
Utl_processFragmentText	.\plugin\utl.vim	/^fu! s:Utl_processFragmentText(fragment, fragMode)$/;"	f
Utl_processUrl	.\plugin\utl.vim	/^fu! s:Utl_processUrl(uriref, dispMode)$/;"	f
Utl_setHighl	.\plugin\utl.vim	/^fu! s:Utl_setHighl()$/;"	f
Utl_trace	.\plugin\utl.vim	/^fu! Utl_trace(msg, ...)$/;"	f
Utl_utilBack2FwdSlashes	.\plugin\utl.vim	/^fu! Utl_utilBack2FwdSlashes(str)$/;"	f
Utl_utilCopyExtract	.\plugin\utl.vim	/^fu! Utl_utilCopyExtract(srcFile, outFile, mark)$/;"	f
Utl_utilExpandConvSpec	.\plugin\utl.vim	/^fu! Utl_utilExpandConvSpec(str, convSpecDict)$/;"	f
Utl_utilFwd2BackSlashes	.\plugin\utl.vim	/^fu! Utl_utilFwd2BackSlashes(str)$/;"	f
utl__file_rc	.\plugin\utl_rc.vim	/^let utl__file_rc =    expand("<sfile>")	    " Do not remove this line$/;"	v
vacuum	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> vacuum <C-R>=SqlIab_ReplaceConditionally('vacuum', 'VACUUM')<CR>$/;"	m
Valid	.\plugin\proj.vim	/^function! s:Valid(project)$/;"	f
validate	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> validate <C-R>=SqlIab_ReplaceConditionally('validate', 'VALIDATE')<CR>$/;"	m
values	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> values <C-R>=SqlIab_ReplaceConditionally('values', 'VALUES')<CR>$/;"	m
varchar	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> varchar <C-R>=SqlIab_ReplaceConditionally('varchar', 'VARCHAR')<CR>$/;"	m
varchar2	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> varchar2 <C-R>=SqlIab_ReplaceConditionally('varchar2', 'VARCHAR2')<CR>$/;"	m
varray	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> varray <C-R>=SqlIab_ReplaceConditionally('varray', 'VARRAY')<CR>$/;"	m
VerifyText	.\plugin\showmarks.vim	/^fun! s:VerifyText(which)$/;"	f
VerifyText	plugin/showmarks.vim	/^fun! s:VerifyText(which)$/;"	f
view	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> view <C-R>=SqlIab_ReplaceConditionally('view', 'VIEW')<CR>$/;"	m
viewEdit	.\autoload\rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	.\autoload\rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	.\autoload\rails.vim	/^function! s:viewspattern()$/;"	f
vim	.\plugin\autotag.vim	/^import vim$/;"	m
warn	.\autoload\rails.vim	/^function! s:warn(str)$/;"	f
Warn	.\plugin\diffchanges.vim	/^function! s:Warn(message) "{{{1$/;"	f
Warning	.\plugin\EasyGrep.vim	/^function! s:Warning(message)$/;"	f
WarnNoMatches	.\plugin\EasyGrep.vim	/^function! s:WarnNoMatches(pattern)$/;"	f
whenever	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> whenever <C-R>=SqlIab_ReplaceConditionally('whenever', 'WHENEVER')<CR>$/;"	m
where	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> where <C-R>=SqlIab_ReplaceConditionally('where', 'WHERE')<CR>$/;"	m
Wholematch	.\plugin\matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
with	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> with <C-R>=SqlIab_ReplaceConditionally('with', 'WITH')<CR>$/;"	m
wrap	.\autoload\repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	.\plugin\surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	.\plugin\surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
xid	.\ftplugin\sql_iabbr.vim	/^inoreabbr <silent> <buffer> xid <C-R>=SqlIab_ReplaceConditionally('xid', 'XID')<CR>$/;"	m
ys	.\plugin\surround.vim	/^    nmap          ys   <Plug>Ysurround$/;"	m
ySs	.\plugin\surround.vim	/^    nmap          ySs  <Plug>YSsurround$/;"	m
ZoomWin	.\plugin\ZoomWinPlugin.vim	/^com! ZoomWin :set lz|silent call ZoomWin#ZoomWin()|set nolz$/;"	c
ZoomWin	.\plugin\ZoomWinPlugin.vim	/^fun! ZoomWin()$/;"	f
ZoomWin#CleanupSessionFile	.\autoload\ZoomWin.vim	/^fun! ZoomWin#CleanupSessionFile()$/;"	f
ZoomWin#ZoomWin	.\autoload\ZoomWin.vim	/^fun! ZoomWin#ZoomWin()$/;"	f
ZoomWinPreserve	.\autoload\ZoomWin.vim	/^fun! s:ZoomWinPreserve(open)$/;"	f
[%	.\plugin\matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	.\plugin\matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	.\plugin\matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
\sm	.\plugin\showmarks.vim	/^noremap <unique> <script> \\sm m$/;"	m
\sm	plugin/showmarks.vim	/^noremap <unique> <script> \\sm m$/;"	m
]%	.\plugin\matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	.\plugin\matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	.\plugin\matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
_makeArgumentList	.\autoload\genutils.vim	/^function! s:_makeArgumentList()$/;"	f
_makeArgumentString	.\autoload\genutils.vim	/^function! s:_makeArgumentString()$/;"	f
