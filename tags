!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
%	plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
.	autoload/repeat.vim	/^nnoremap <silent> .     :<C-U>call <SID>repeat(v:count)<CR>$/;"	m
<C-G>S	plugin/surround.vim	/^    imap        <C-G>S <Plug>ISurround$/;"	m
<C-G>s	plugin/surround.vim	/^    imap        <C-G>s <Plug>Isurround$/;"	m
<C-R>	autoload/repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call <SID>wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<C-S>	plugin/surround.vim	/^        imap     <C-S> <Plug>Isurround$/;"	m
<F8>	additional_scripts/cream-statusline-prototype.vim	/^imap <silent> <F8> <C-o>:call Cream_statusline_prototype_toggle()<CR>$/;"	m
<F8>	additional_scripts/cream-statusline-prototype.vim	/^nmap <silent> <F8>      :call Cream_statusline_prototype_toggle()<CR>$/;"	m
<F8>	additional_scripts/cream-statusline-prototype.vim	/^vmap <silent> <F8> :<C-u>call Cream_statusline_prototype_toggle()<CR>$/;"	m
<Leader>rwp	plugin/cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>sE	plugin/dbext.vim	/^    nmap <unique> <Leader>sE <Plug>DBExecSQLUnderTopXCursor$/;"	m
<Leader>sT	plugin/dbext.vim	/^        nmap <unique> <Leader>sT <Plug>DBSelectFromTopXTable$/;"	m
<Leader>sal	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>sal :.,.DBVarRangeAssign<CR>$/;"	m
<Leader>sap	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>sap :'<,'>DBVarRangeAssign<CR>$/;"	m
<Leader>sas	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>sas :1,$DBVarRangeAssign<CR>$/;"	m
<Leader>sbp	plugin/dbext.vim	/^    nmap <unique> <Leader>sbp <Plug>DBPromptForBufferParameters$/;"	m
<Leader>sdp	plugin/dbext.vim	/^        nmap <unique> <Leader>sdp <Plug>DBDescribeProcedure$/;"	m
<Leader>sdpa	plugin/dbext.vim	/^    nmap <unique> <Leader>sdpa <Plug>DBDescribeProcedureAskName$/;"	m
<Leader>sdt	plugin/dbext.vim	/^        nmap <unique> <Leader>sdt <Plug>DBDescribeTable$/;"	m
<Leader>sdta	plugin/dbext.vim	/^    nmap <unique> <Leader>sdta <Plug>DBDescribeTableAskName$/;"	m
<Leader>se	plugin/dbext.vim	/^    nmap <unique> <Leader>se <Plug>DBExecSQLUnderCursor$/;"	m
<Leader>sea	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>sea :1,$DBExecRangeSQL<CR>$/;"	m
<Leader>sel	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>sel :.,.DBExecRangeSQL<CR>$/;"	m
<Leader>sep	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>sep :'<,'>DBExecRangeSQL<CR>$/;"	m
<Leader>sh	plugin/dbext.vim	/^    nmap <unique> <Leader>sh <Plug>DBHistory$/;"	m
<Leader>slc	plugin/dbext.vim	/^        nmap <unique> <Leader>slc <Plug>DBListColumn$/;"	m
<Leader>slp	plugin/dbext.vim	/^    nmap <unique> <Leader>slp <Plug>DBListProcedure$/;"	m
<Leader>slr	plugin/dbext.vim	/^        nmap <unique> <silent> <Leader>slr :DBListVar<CR>$/;"	m
<Leader>slt	plugin/dbext.vim	/^    nmap <unique> <Leader>slt <Plug>DBListTable$/;"	m
<Leader>slv	plugin/dbext.vim	/^    nmap <unique> <Leader>slv <Plug>DBListView$/;"	m
<Leader>so	plugin/dbext.vim	/^    nmap <unique> <Leader>so <Plug>DBOrientationToggle$/;"	m
<Leader>sq	plugin/dbext.vim	/^    nmap <unique> <Leader>sq <Plug>DBExecSQL$/;"	m
<Leader>st	plugin/dbext.vim	/^        nmap <unique> <Leader>st <Plug>DBSelectFromTable$/;"	m
<Leader>sta	plugin/dbext.vim	/^    nmap <unique> <Leader>sta <Plug>DBSelectFromTableAskName$/;"	m
<Leader>stcl	plugin/dbext.vim	/^        nmap <unique> <Leader>stcl <Plug>DBListColumn$/;"	m
<Leader>stw	plugin/dbext.vim	/^    nmap <unique> <Leader>stw <Plug>DBSelectFromTableWithWhere$/;"	m
<Leader>swp	plugin/cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<Plug>AM_Htd	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Plug>AM_T|	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T#	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T,	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T:	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T;	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T<	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T=	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/;"	m
<Plug>AM_T?	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T@	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_Tab	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_Ts,	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_Tsp	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_T~	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a(	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/;"	m
<Plug>AM_a<		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_a=		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Plug>AM_a?		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Plug>AM_abox		<SID>WS:let	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_afnc		:<c-u>set	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/;"	m
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/;"	m
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_t|		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t#		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t,		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t:		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t;		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t<		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t=		<SID>WS:call	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/;"	m
<Plug>AM_t?		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t@		<SID>WS::call	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/;"	m
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Plug>AM_tml		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts:		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts;		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts<		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts=		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tt		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t~		<SID>WS:AlignCtrl	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AlignMapsWrapperEnd	:call	plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:<c-u>set	plugin/AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/;"	m
<Plug>Csurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DBDescribeProcedure	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeProcedure :DBDescribeProcedure<CR>$/;"	m
<Plug>DBDescribeProcedureAskName	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeProcedureAskName$/;"	m
<Plug>DBDescribeTable	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeTable :DBDescribeTable<CR>$/;"	m
<Plug>DBDescribeTableAskName	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBDescribeTableAskName$/;"	m
<Plug>DBExecSQL	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBExecSQL :DBExecSQL<CR>$/;"	m
<Plug>DBExecSQLUnderCursor	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBExecSQLUnderCursor :DBExecSQLUnderCursor<CR>$/;"	m
<Plug>DBExecSQLUnderTopXCursor	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBExecSQLUnderTopXCursor :DBExecSQLUnderCursorTopX<CR>$/;"	m
<Plug>DBHistory	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBHistory :DBHistory<CR>$/;"	m
<Plug>DBListColumn	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBListColumn :DBListColumn<CR>$/;"	m
<Plug>DBListProcedure	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBListProcedure$/;"	m
<Plug>DBListTable	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBListTable$/;"	m
<Plug>DBListView	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBListView$/;"	m
<Plug>DBOrientationToggle	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBOrientationToggle :DBOrientationToggle<CR>$/;"	m
<Plug>DBPromptForBufferParameters	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBPromptForBufferParameters$/;"	m
<Plug>DBSelectFromTable	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTable :DBSelectFromTable<CR>$/;"	m
<Plug>DBSelectFromTableAskName	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTableAskName$/;"	m
<Plug>DBSelectFromTableWithWhere	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTableWithWhere$/;"	m
<Plug>DBSelectFromTopXTable	plugin/dbext.vim	/^    nmap <unique> <script> <Plug>DBSelectFromTopXTable :DBSelectFromTableTopX<CR>$/;"	m
<Plug>Dsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>RestoreWinPosn	:call	plugin/cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	plugin/cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>VSurround	plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc2(visualmode())<CR>$/;"	m
<Plug>Vsurround	plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>ZoomWin	plugin/ZoomWinPlugin.vim	/^nnoremap <silent> <script> <Plug>ZoomWin :set lz<CR>:silent call ZoomWin#ZoomWin()<CR>:set nolz<CR>$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	plugin/AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	plugin/AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>xx	autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<c-r><tab>	after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-w>o	plugin/ZoomWinPlugin.vim	/^ nmap <unique> <c-w>o  <Plug>ZoomWin$/;"	m
<s-tab>	after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
Abbrev	autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
AddBracketExpand	autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddParenExpand	autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddSelectiveExpand	autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
Align	plugin/AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
Align#Align	autoload/Align.vim	/^fun! Align#Align(hasctrl,...) range$/;"	f
Align#AlignCtrl	autoload/Align.vim	/^fun! Align#AlignCtrl(...)$/;"	f
Align#AlignPop	autoload/Align.vim	/^fun! Align#AlignPop()$/;"	f
Align#AlignPush	autoload/Align.vim	/^fun! Align#AlignPush()$/;"	f
Align#AlignReplaceQuotedSpaces	autoload/Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/;"	f
AlignCtrl	plugin/AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignMaps#Afnc	autoload/AlignMaps.vim	/^fun! AlignMaps#Afnc()$/;"	f
AlignMaps#CharJoiner	autoload/AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/;"	f
AlignMaps#Equals	autoload/AlignMaps.vim	/^fun! AlignMaps#Equals() range$/;"	f
AlignMaps#FixMultiDec	autoload/AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/;"	f
AlignMaps#StdAlign	autoload/AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/;"	f
AlignMaps#WrapperEnd	autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/;"	f
AlignMaps#WrapperStart	autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/;"	f
AlignPop	plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	plugin/AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
Alter	plugin/dbext.vim	/^command! -nargs=+ Alter             :call dbext#DB_execSql("alter " . <q-args>)$/;"	c
Alternate	autoload/rails.vim	/^function! s:Alternate(bang,cmd,...)$/;"	f
AlternateFile	autoload/rails.vim	/^function! s:AlternateFile()$/;"	f
BackwardsSnippet	plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
BinSearchToAppend	autoload/genutils.vim	/^function! s:BinSearchToAppend(start, end, line, cmp, direction)$/;"	f
BinSearchToAppend2	autoload/genutils.vim	/^function! s:BinSearchToAppend2(start, end, line, cmp, direction, accessor,$/;"	f
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BufAbbreviations	autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufInit	plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufLineAccessor	autoload/genutils.vim	/^function! s:BufLineAccessor(line, context)$/;"	f
BufLineMover	autoload/genutils.vim	/^function! s:BufLineMover(from, to, context)$/;"	f
BufLineSwapper	autoload/genutils.vim	/^function! s:BufLineSwapper(line1, line2, context)$/;"	f
BufMappings	autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufScriptWrappers	autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSyntax	autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BuildTabStops	autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
Call	plugin/dbext.vim	/^command! -nargs=+ Call              :call dbext#DB_execSql("call " . <q-args>)$/;"	c
Char2Num	autoload/genutils.vim	/^function! s:Char2Num(c)$/;"	f
Choose	plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
CleanUp	plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
CleanupMarkErrors	plugin/cuteErrorMarker.vim	/^command! CleanupMarkErrors call CleanupMarkErrors()$/;"	c
CleanupMarkErrors	plugin/cuteErrorMarker.vim	/^fun! CleanupMarkErrors() "{{{$/;"	f
Close	ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CommandEdit	autoload/rails.vim	/^function! s:CommandEdit(bang,cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandList	autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CompilerSet	compiler/php.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Complete_cd	autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_ruby	autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
Count	autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
Count	plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
Cream_prototype	additional_scripts/cream-statusline-prototype.vim	/^function! Cream_prototype()$/;"	f
Cream_statusline	additional_scripts/cream-statusline-prototype.vim	/^function! s:Cream_statusline()$/;"	f
Cream_statusline_global	additional_scripts/cream-statusline-prototype.vim	/^function! Cream_statusline_global()$/;"	f
Cream_statusline_prototype_toggle	additional_scripts/cream-statusline-prototype.vim	/^function! Cream_statusline_prototype_toggle()$/;"	f
Create	plugin/dbext.vim	/^command! -nargs=+ Create            :call dbext#DB_execSql("create " . <q-args>)$/;"	c
CreateMenus	plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CustomComplete	autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
DBCheckModeline	plugin/dbext.vim	/^    command! -nargs=0 DBCheckModeline$/;"	c
DBCommit	plugin/dbext.vim	/^command! -nargs=0 DBCommit          :call dbext#DB_commit()$/;"	c
DBCompleteProcedures	plugin/dbext.vim	/^    command! -nargs=0 -bang DBCompleteProcedures$/;"	c
DBCompleteTables	plugin/dbext.vim	/^    command! -nargs=0 -bang DBCompleteTables$/;"	c
DBCompleteViews	plugin/dbext.vim	/^    command! -nargs=0 -bang DBCompleteViews$/;"	c
DBConnect	plugin/dbext.vim	/^command! -nargs=0 DBConnect         :call dbext#DB_connect()$/;"	c
DBDescribeProcedure	plugin/dbext.vim	/^    command! -nargs=* -range DBDescribeProcedure$/;"	c
DBDescribeProcedureAskName	plugin/dbext.vim	/^    command! -nargs=0 DBDescribeProcedureAskName$/;"	c
DBDescribeTable	plugin/dbext.vim	/^    command! -nargs=* -range DBDescribeTable$/;"	c
DBDescribeTableAskName	plugin/dbext.vim	/^    command! -nargs=0 DBDescribeTableAskName$/;"	c
DBDisconnect	plugin/dbext.vim	/^command! -nargs=0 DBDisconnect      :call dbext#DB_disconnect()$/;"	c
DBExecRangeSQL	plugin/dbext.vim	/^command! -range -nargs=0 DBExecRangeSQL <line1>,<line2>call dbext#DB_execRangeSql()$/;"	c
DBExecSQL	plugin/dbext.vim	/^    command! -nargs=0 DBExecSQL$/;"	c
DBExecSQL	plugin/dbext.vim	/^command! -nargs=+ DBExecSQL         :call dbext#DB_execSql(<q-args>)$/;"	c
DBExecSQLTopX	plugin/dbext.vim	/^command! -nargs=+ DBExecSQLTopX     :call dbext#DB_execSqlTopX(<q-args>)$/;"	c
DBExecSQLUnderCursor	plugin/dbext.vim	/^    command! -nargs=0 DBExecSQLUnderCursor$/;"	c
DBExecSQLUnderCursorTopX	plugin/dbext.vim	/^    command! -nargs=0 DBExecSQLUnderCursorTopX$/;"	c
DBExecVisualSQL	plugin/dbext.vim	/^    command! -nargs=0 -range DBExecVisualSQL :call dbext#DB_execSql(DB_getVisualBlock())$/;"	c
DBExecVisualSQLTopX	plugin/dbext.vim	/^    command! -nargs=0 -range DBExecVisualSQLTopX :call dbext#DB_execSqlTopX(DB_getVisualBlock())$/;"	c
DBGetOption	plugin/dbext.vim	/^command! -nargs=* -complete=customlist,dbext#DB_completeSettings DBGetOption :echo DB_listOption(<q-args>)$/;"	c
DBGetOption	plugin/dbext.vim	/^command! -nargs=? DBGetOption       :echo DB_listOption(<q-args>)$/;"	c
DBHistory	plugin/dbext.vim	/^    command! -nargs=0 DBHistory$/;"	c
DBListColumn	plugin/dbext.vim	/^    command! -nargs=* DBListColumn$/;"	c
DBListConnections	plugin/dbext.vim	/^command! -nargs=0 DBListConnections :call dbext#DB_getListConnections()$/;"	c
DBListProcedure	plugin/dbext.vim	/^    command! -nargs=? DBListProcedure$/;"	c
DBListTable	plugin/dbext.vim	/^    command! -nargs=? DBListTable$/;"	c
DBListVar	plugin/dbext.vim	/^command! -nargs=0 DBListVar         :call dbext#DB_sqlVarList()$/;"	c
DBListView	plugin/dbext.vim	/^    command! -nargs=? DBListView$/;"	c
DBOrientationToggle	plugin/dbext.vim	/^    command! -nargs=0 DBOrientationToggle$/;"	c
DBPromptForBufferParameters	plugin/dbext.vim	/^    command! -nargs=0 DBPromptForBufferParameters$/;"	c
DBResultsClose	plugin/dbext.vim	/^    command! -nargs=0 DBResultsClose$/;"	c
DBResultsOpen	plugin/dbext.vim	/^    command! -nargs=0 DBResultsOpen$/;"	c
DBResultsRefresh	plugin/dbext.vim	/^    command! -nargs=0 DBResultsRefresh$/;"	c
DBResultsToggleResize	plugin/dbext.vim	/^    command! -nargs=0 DBResultsToggleResize$/;"	c
DBRollback	plugin/dbext.vim	/^command! -nargs=0 DBRollback        :call dbext#DB_rollback()$/;"	c
DBSelectFromTable	plugin/dbext.vim	/^    command! -nargs=* -range DBSelectFromTable$/;"	c
DBSelectFromTableAskName	plugin/dbext.vim	/^    command! -nargs=0 DBSelectFromTableAskName$/;"	c
DBSelectFromTableTopX	plugin/dbext.vim	/^    command! -nargs=* -range DBSelectFromTableTopX$/;"	c
DBSelectFromTableWithWhere	plugin/dbext.vim	/^    command! -nargs=0 DBSelectFromTableWithWhere$/;"	c
DBSetOption	plugin/dbext.vim	/^command! -nargs=* -complete=customlist,dbext#DB_completeSettings DBSetOption :call dbext#DB_setMultipleOptions(<q-args>)$/;"	c
DBSetOption	plugin/dbext.vim	/^command! -nargs=1 DBSetOption       :call dbext#DB_setMultipleOptions(<q-args>)$/;"	c
DBSetVar	plugin/dbext.vim	/^command! -nargs=* -complete=customlist,dbext#DB_completeVariable DBSetVar :call dbext#DB_sqlVarAssignment(<bang>0, 'set '.<q-args>)$/;"	c
DBSetVar	plugin/dbext.vim	/^command! -nargs=1 -bang DBSetVar    :call dbext#DB_sqlVarAssignment(<bang>0, 'set '.<q-args>)$/;"	c
DBVarRangeAssign	plugin/dbext.vim	/^command! -range -nargs=0 -bang DBVarRangeAssign <line1>,<line2>call dbext#DB_sqlVarRangeAssignment(<bang>0)$/;"	c
DB_ASA_describeProcedure	autoload/dbext.vim	/^function! s:DB_ASA_describeProcedure(proc_name)$/;"	f
DB_ASA_describeTable	autoload/dbext.vim	/^function! s:DB_ASA_describeTable(table_name)$/;"	f
DB_ASA_execSql	autoload/dbext.vim	/^function! s:DB_ASA_execSql(str)$/;"	f
DB_ASA_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_ASA_getDictionaryProcedure() $/;"	f
DB_ASA_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_ASA_getDictionaryTable() $/;"	f
DB_ASA_getDictionaryView	autoload/dbext.vim	/^function! s:DB_ASA_getDictionaryView() $/;"	f
DB_ASA_getListColumn	autoload/dbext.vim	/^function! s:DB_ASA_getListColumn(table_name) $/;"	f
DB_ASA_getListProcedure	autoload/dbext.vim	/^function! s:DB_ASA_getListProcedure(proc_prefix)$/;"	f
DB_ASA_getListTable	autoload/dbext.vim	/^function! s:DB_ASA_getListTable(table_prefix)$/;"	f
DB_ASA_getListView	autoload/dbext.vim	/^function! s:DB_ASA_getListView(view_prefix)$/;"	f
DB_ASA_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_ASA_stripHeaderFooter(result)$/;"	f
DB_ASE_describeProcedure	autoload/dbext.vim	/^function! s:DB_ASE_describeProcedure(procedure_name)$/;"	f
DB_ASE_describeTable	autoload/dbext.vim	/^function! s:DB_ASE_describeTable(table_name)$/;"	f
DB_ASE_execSql	autoload/dbext.vim	/^function! s:DB_ASE_execSql(str)$/;"	f
DB_ASE_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_ASE_getDictionaryProcedure() "{{{$/;"	f
DB_ASE_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_ASE_getDictionaryTable() "{{{$/;"	f
DB_ASE_getDictionaryView	autoload/dbext.vim	/^function! s:DB_ASE_getDictionaryView() "{{{$/;"	f
DB_ASE_getListColumn	autoload/dbext.vim	/^function! s:DB_ASE_getListColumn(table_name) "{{{$/;"	f
DB_ASE_getListProcedure	autoload/dbext.vim	/^function! s:DB_ASE_getListProcedure(proc_prefix)$/;"	f
DB_ASE_getListTable	autoload/dbext.vim	/^function! s:DB_ASE_getListTable(table_prefix)$/;"	f
DB_ASE_getListView	autoload/dbext.vim	/^function! s:DB_ASE_getListView(view_prefix)$/;"	f
DB_ASE_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_ASE_stripHeaderFooter(result) "{{{$/;"	f
DB_DB2_describeProcedure	autoload/dbext.vim	/^function! s:DB_DB2_describeProcedure(procedure_name)$/;"	f
DB_DB2_describeTable	autoload/dbext.vim	/^function! s:DB_DB2_describeTable(table_name)$/;"	f
DB_DB2_execSql	autoload/dbext.vim	/^function! s:DB_DB2_execSql(str)$/;"	f
DB_DB2_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_DB2_getDictionaryProcedure()$/;"	f
DB_DB2_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_DB2_getDictionaryTable()$/;"	f
DB_DB2_getDictionaryView	autoload/dbext.vim	/^function! s:DB_DB2_getDictionaryView() $/;"	f
DB_DB2_getListColumn	autoload/dbext.vim	/^function! s:DB_DB2_getListColumn(table_name) $/;"	f
DB_DB2_getListProcedure	autoload/dbext.vim	/^function! s:DB_DB2_getListProcedure(proc_prefix)$/;"	f
DB_DB2_getListTable	autoload/dbext.vim	/^function! s:DB_DB2_getListTable(table_prefix)$/;"	f
DB_DB2_getListView	autoload/dbext.vim	/^function! s:DB_DB2_getListView(view_prefix)$/;"	f
DB_DB2_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_DB2_stripHeaderFooter(result) $/;"	f
DB_DBI_Autoload	autoload/dbext.vim	/^function! s:DB_DBI_Autoload()$/;"	f
DB_DBI_describeProcedure	autoload/dbext.vim	/^function! s:DB_DBI_describeProcedure(procedure_name)$/;"	f
DB_DBI_describeTable	autoload/dbext.vim	/^function! s:DB_DBI_describeTable(table_name)$/;"	f
DB_DBI_execSql	autoload/dbext.vim	/^function! s:DB_DBI_execSql(str)$/;"	f
DB_DBI_execStr	autoload/dbext.vim	/^function! s:DB_DBI_execStr(str)$/;"	f
DB_DBI_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_DBI_getDictionaryProcedure() "{{{$/;"	f
DB_DBI_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_DBI_getDictionaryTable() "{{{$/;"	f
DB_DBI_getDictionaryView	autoload/dbext.vim	/^function! s:DB_DBI_getDictionaryView() "{{{$/;"	f
DB_DBI_getListColumn	autoload/dbext.vim	/^function! s:DB_DBI_getListColumn(table_name)$/;"	f
DB_DBI_getListProcedure	autoload/dbext.vim	/^function! s:DB_DBI_getListProcedure(proc_prefix)$/;"	f
DB_DBI_getListTable	autoload/dbext.vim	/^function! s:DB_DBI_getListTable(table_prefix)$/;"	f
DB_DBI_getListView	autoload/dbext.vim	/^function! s:DB_DBI_getListView(view_prefix)$/;"	f
DB_DBI_setOption	autoload/dbext.vim	/^function! s:DB_DBI_setOption(option_name, value) "{{{$/;"	f
DB_DBI_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_DBI_stripHeaderFooter(result)$/;"	f
DB_DictionaryCreate	plugin/dbext.vim	/^function! DB_DictionaryCreate( drop_dict, which ) $/;"	f
DB_DictionaryDelete	autoload/dbext.vim	/^function! s:DB_DictionaryDelete( which ) "{{{$/;"	f
DB_FIREBIRD_describeProcedure	autoload/dbext.vim	/^function! s:DB_FIREBIRD_describeProcedure(procedure_name)$/;"	f
DB_FIREBIRD_describeTable	autoload/dbext.vim	/^function! s:DB_FIREBIRD_describeTable(table_name)$/;"	f
DB_FIREBIRD_execSql	autoload/dbext.vim	/^function! s:DB_FIREBIRD_execSql(str)$/;"	f
DB_FIREBIRD_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getDictionaryProcedure() "{{{$/;"	f
DB_FIREBIRD_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getDictionaryTable() "{{{$/;"	f
DB_FIREBIRD_getDictionaryView	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getDictionaryView() "{{{$/;"	f
DB_FIREBIRD_getListColumn	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getListColumn(table_name) "{{{$/;"	f
DB_FIREBIRD_getListProcedure	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getListProcedure(proc_prefix)$/;"	f
DB_FIREBIRD_getListTable	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getListTable(table_prefix)$/;"	f
DB_FIREBIRD_getListView	autoload/dbext.vim	/^function! s:DB_FIREBIRD_getListView(view_prefix)$/;"	f
DB_FIREBIRD_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_FIREBIRD_stripHeaderFooter(result) "{{{$/;"	f
DB_INGRES_describeProcedure	autoload/dbext.vim	/^function! s:DB_INGRES_describeProcedure(procedure_name)$/;"	f
DB_INGRES_describeTable	autoload/dbext.vim	/^function! s:DB_INGRES_describeTable(table_name)$/;"	f
DB_INGRES_execSql	autoload/dbext.vim	/^function! s:DB_INGRES_execSql(str)$/;"	f
DB_INGRES_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_INGRES_getDictionaryProcedure() $/;"	f
DB_INGRES_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_INGRES_getDictionaryTable() $/;"	f
DB_INGRES_getDictionaryView	autoload/dbext.vim	/^function! s:DB_INGRES_getDictionaryView() $/;"	f
DB_INGRES_getListColumn	autoload/dbext.vim	/^function! s:DB_INGRES_getListColumn(table_name) $/;"	f
DB_INGRES_getListProcedure	autoload/dbext.vim	/^function! s:DB_INGRES_getListProcedure(proc_prefix)$/;"	f
DB_INGRES_getListTable	autoload/dbext.vim	/^function! s:DB_INGRES_getListTable(table_prefix)$/;"	f
DB_INGRES_getListView	autoload/dbext.vim	/^function! s:DB_INGRES_getListView(view_prefix)$/;"	f
DB_INGRES_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_INGRES_stripHeaderFooter(result)$/;"	f
DB_INTERBASE_describeProcedure	autoload/dbext.vim	/^function! s:DB_INTERBASE_describeProcedure(procedure_name)$/;"	f
DB_INTERBASE_describeTable	autoload/dbext.vim	/^function! s:DB_INTERBASE_describeTable(table_name)$/;"	f
DB_INTERBASE_execSql	autoload/dbext.vim	/^function! s:DB_INTERBASE_execSql(str)$/;"	f
DB_INTERBASE_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_INTERBASE_getDictionaryProcedure() $/;"	f
DB_INTERBASE_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_INTERBASE_getDictionaryTable() $/;"	f
DB_INTERBASE_getDictionaryView	autoload/dbext.vim	/^function! s:DB_INTERBASE_getDictionaryView() $/;"	f
DB_INTERBASE_getListColumn	autoload/dbext.vim	/^function! s:DB_INTERBASE_getListColumn(table_name) $/;"	f
DB_INTERBASE_getListProcedure	autoload/dbext.vim	/^function! s:DB_INTERBASE_getListProcedure(proc_prefix)$/;"	f
DB_INTERBASE_getListTable	autoload/dbext.vim	/^function! s:DB_INTERBASE_getListTable(table_prefix)$/;"	f
DB_INTERBASE_getListView	autoload/dbext.vim	/^function! s:DB_INTERBASE_getListView(view_prefix)$/;"	f
DB_INTERBASE_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_INTERBASE_stripHeaderFooter(result)$/;"	f
DB_MYSQL_describeProcedure	autoload/dbext.vim	/^function! s:DB_MYSQL_describeProcedure(procedure_name)$/;"	f
DB_MYSQL_describeTable	autoload/dbext.vim	/^function! s:DB_MYSQL_describeTable(table_name)$/;"	f
DB_MYSQL_execSql	autoload/dbext.vim	/^function! s:DB_MYSQL_execSql(str)$/;"	f
DB_MYSQL_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_MYSQL_getDictionaryProcedure() "{{{$/;"	f
DB_MYSQL_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_MYSQL_getDictionaryTable() "{{{$/;"	f
DB_MYSQL_getDictionaryView	autoload/dbext.vim	/^function! s:DB_MYSQL_getDictionaryView() "{{{$/;"	f
DB_MYSQL_getListColumn	autoload/dbext.vim	/^function! s:DB_MYSQL_getListColumn(table_name) "{{{$/;"	f
DB_MYSQL_getListProcedure	autoload/dbext.vim	/^function! s:DB_MYSQL_getListProcedure(proc_prefix)$/;"	f
DB_MYSQL_getListTable	autoload/dbext.vim	/^function! s:DB_MYSQL_getListTable(table_prefix)$/;"	f
DB_MYSQL_getListView	autoload/dbext.vim	/^function! s:DB_MYSQL_getListView(view_prefix)$/;"	f
DB_MYSQL_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_MYSQL_stripHeaderFooter(result) "{{{$/;"	f
DB_ODBC_describeProcedure	autoload/dbext.vim	/^function! s:DB_ODBC_describeProcedure(procedure_name)$/;"	f
DB_ODBC_describeTable	autoload/dbext.vim	/^function! s:DB_ODBC_describeTable(table_name)$/;"	f
DB_ODBC_execSql	autoload/dbext.vim	/^function! s:DB_ODBC_execSql(str)$/;"	f
DB_ODBC_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_ODBC_getDictionaryProcedure() "{{{$/;"	f
DB_ODBC_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_ODBC_getDictionaryTable() "{{{$/;"	f
DB_ODBC_getDictionaryView	autoload/dbext.vim	/^function! s:DB_ODBC_getDictionaryView() "{{{$/;"	f
DB_ODBC_getListColumn	autoload/dbext.vim	/^function! s:DB_ODBC_getListColumn(table_name)$/;"	f
DB_ODBC_getListProcedure	autoload/dbext.vim	/^function! s:DB_ODBC_getListProcedure(proc_prefix)$/;"	f
DB_ODBC_getListTable	autoload/dbext.vim	/^function! s:DB_ODBC_getListTable(table_prefix)$/;"	f
DB_ODBC_getListView	autoload/dbext.vim	/^function! s:DB_ODBC_getListView(view_prefix)$/;"	f
DB_ODBC_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_ODBC_stripHeaderFooter(result)$/;"	f
DB_ORA_describeProcedure	autoload/dbext.vim	/^function! s:DB_ORA_describeProcedure(procedure_name)$/;"	f
DB_ORA_describeTable	autoload/dbext.vim	/^function! s:DB_ORA_describeTable(table_name)$/;"	f
DB_ORA_execSql	autoload/dbext.vim	/^function! s:DB_ORA_execSql(str)$/;"	f
DB_ORA_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_ORA_getDictionaryProcedure() "{{{$/;"	f
DB_ORA_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_ORA_getDictionaryTable() "{{{$/;"	f
DB_ORA_getDictionaryView	autoload/dbext.vim	/^function! s:DB_ORA_getDictionaryView() "{{{$/;"	f
DB_ORA_getListColumn	autoload/dbext.vim	/^function! s:DB_ORA_getListColumn(table_name) "{{{$/;"	f
DB_ORA_getListProcedure	autoload/dbext.vim	/^function! s:DB_ORA_getListProcedure(proc_prefix)$/;"	f
DB_ORA_getListTable	autoload/dbext.vim	/^function! s:DB_ORA_getListTable(table_prefix)$/;"	f
DB_ORA_getListView	autoload/dbext.vim	/^function! s:DB_ORA_getListView(view_prefix)$/;"	f
DB_ORA_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_ORA_stripHeaderFooter(result) "{{{$/;"	f
DB_PGSQL_describeProcedure	autoload/dbext.vim	/^function! s:DB_PGSQL_describeProcedure(procedure_name)$/;"	f
DB_PGSQL_describeTable	autoload/dbext.vim	/^function! s:DB_PGSQL_describeTable(table_name)$/;"	f
DB_PGSQL_execSql	autoload/dbext.vim	/^function! s:DB_PGSQL_execSql(str)$/;"	f
DB_PGSQL_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_PGSQL_getDictionaryProcedure() $/;"	f
DB_PGSQL_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_PGSQL_getDictionaryTable() $/;"	f
DB_PGSQL_getDictionaryView	autoload/dbext.vim	/^function! s:DB_PGSQL_getDictionaryView() $/;"	f
DB_PGSQL_getListColumn	autoload/dbext.vim	/^function! s:DB_PGSQL_getListColumn(table_name) $/;"	f
DB_PGSQL_getListProcedure	autoload/dbext.vim	/^function! s:DB_PGSQL_getListProcedure(proc_prefix)$/;"	f
DB_PGSQL_getListTable	autoload/dbext.vim	/^function! s:DB_PGSQL_getListTable(table_prefix)$/;"	f
DB_PGSQL_getListView	autoload/dbext.vim	/^function! s:DB_PGSQL_getListView(view_prefix)$/;"	f
DB_PGSQL_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_PGSQL_stripHeaderFooter(result)$/;"	f
DB_RDB_describeProcedure	autoload/dbext.vim	/^function! s:DB_RDB_describeProcedure(procedure_name) "{{{$/;"	f
DB_RDB_describeTable	autoload/dbext.vim	/^function! s:DB_RDB_describeTable(table_name) "{{{$/;"	f
DB_RDB_execSql	autoload/dbext.vim	/^function! s:DB_RDB_execSql(str) "{{{$/;"	f
DB_RDB_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_RDB_getDictionaryProcedure() "{{{$/;"	f
DB_RDB_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_RDB_getDictionaryTable() "{{{$/;"	f
DB_RDB_getDictionaryView	autoload/dbext.vim	/^function! s:DB_RDB_getDictionaryView() "{{{$/;"	f
DB_RDB_getListColumn	autoload/dbext.vim	/^function! s:DB_RDB_getListColumn(table_name) "{{{$/;"	f
DB_RDB_getListProcedure	autoload/dbext.vim	/^function! s:DB_RDB_getListProcedure(proc_prefix) "{{{$/;"	f
DB_RDB_getListTable	autoload/dbext.vim	/^function! s:DB_RDB_getListTable(table_prefix) "{{{$/;"	f
DB_RDB_getListView	autoload/dbext.vim	/^function! s:DB_RDB_getListView(view_prefix) "{{{$/;"	f
DB_RDB_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_RDB_stripHeaderFooter(result) "{{{$/;"	f
DB_SQLITE_describeProcedure	autoload/dbext.vim	/^function! s:DB_SQLITE_describeProcedure(procedure_name)$/;"	f
DB_SQLITE_describeTable	autoload/dbext.vim	/^function! s:DB_SQLITE_describeTable(table_name)$/;"	f
DB_SQLITE_execSql	autoload/dbext.vim	/^function! s:DB_SQLITE_execSql(str)$/;"	f
DB_SQLITE_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_SQLITE_getDictionaryProcedure() $/;"	f
DB_SQLITE_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_SQLITE_getDictionaryTable()$/;"	f
DB_SQLITE_getDictionaryView	autoload/dbext.vim	/^function! s:DB_SQLITE_getDictionaryView()$/;"	f
DB_SQLITE_getListColumn	autoload/dbext.vim	/^function! s:DB_SQLITE_getListColumn(table_name)$/;"	f
DB_SQLITE_getListProcedure	autoload/dbext.vim	/^function! s:DB_SQLITE_getListProcedure(proc_prefix)$/;"	f
DB_SQLITE_getListTable	autoload/dbext.vim	/^function! s:DB_SQLITE_getListTable(table_prefix)$/;"	f
DB_SQLITE_getListView	autoload/dbext.vim	/^function! s:DB_SQLITE_getListView(view_prefix)$/;"	f
DB_SQLITE_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_SQLITE_stripHeaderFooter(result)$/;"	f
DB_SQLSRV_describeProcedure	autoload/dbext.vim	/^function! s:DB_SQLSRV_describeProcedure(procedure_name)$/;"	f
DB_SQLSRV_describeTable	autoload/dbext.vim	/^function! s:DB_SQLSRV_describeTable(table_name)$/;"	f
DB_SQLSRV_execSql	autoload/dbext.vim	/^function! s:DB_SQLSRV_execSql(str)$/;"	f
DB_SQLSRV_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_SQLSRV_getDictionaryProcedure() "{{{$/;"	f
DB_SQLSRV_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_SQLSRV_getDictionaryTable() "{{{$/;"	f
DB_SQLSRV_getDictionaryView	autoload/dbext.vim	/^function! s:DB_SQLSRV_getDictionaryView() "{{{$/;"	f
DB_SQLSRV_getListColumn	autoload/dbext.vim	/^function! s:DB_SQLSRV_getListColumn(table_name)$/;"	f
DB_SQLSRV_getListProcedure	autoload/dbext.vim	/^function! s:DB_SQLSRV_getListProcedure(proc_prefix)$/;"	f
DB_SQLSRV_getListTable	autoload/dbext.vim	/^function! s:DB_SQLSRV_getListTable(table_prefix)$/;"	f
DB_SQLSRV_getListView	autoload/dbext.vim	/^function! s:DB_SQLSRV_getListView(view_prefix)$/;"	f
DB_SQLSRV_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_SQLSRV_stripHeaderFooter(result)$/;"	f
DB_ULTRALITE_describeProcedure	autoload/dbext.vim	/^function! s:DB_ULTRALITE_describeProcedure(proc_name)$/;"	f
DB_ULTRALITE_describeTable	autoload/dbext.vim	/^function! s:DB_ULTRALITE_describeTable(table_name)$/;"	f
DB_ULTRALITE_execSql	autoload/dbext.vim	/^function! s:DB_ULTRALITE_execSql(str)$/;"	f
DB_ULTRALITE_getDictionaryProcedure	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getDictionaryProcedure() $/;"	f
DB_ULTRALITE_getDictionaryTable	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getDictionaryTable() $/;"	f
DB_ULTRALITE_getDictionaryView	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getDictionaryView() $/;"	f
DB_ULTRALITE_getListColumn	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getListColumn(table_name) $/;"	f
DB_ULTRALITE_getListProcedure	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getListProcedure(proc_prefix)$/;"	f
DB_ULTRALITE_getListTable	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getListTable(table_prefix)$/;"	f
DB_ULTRALITE_getListView	autoload/dbext.vim	/^function! s:DB_ULTRALITE_getListView(view_prefix)$/;"	f
DB_ULTRALITE_stripHeaderFooter	autoload/dbext.vim	/^function! s:DB_ULTRALITE_stripHeaderFooter(result)$/;"	f
DB_addBufDictList	autoload/dbext.vim	/^function! s:DB_addBufDictList( buf_nbr ) "{{{$/;"	f
DB_addToResultBuffer	autoload/dbext.vim	/^function! s:DB_addToResultBuffer(output, do_clear)$/;"	f
DB_buildLists	autoload/dbext.vim	/^function! s:DB_buildLists()$/;"	f
DB_checkModeline	plugin/dbext.vim	/^function! s:DB_checkModeline()$/;"	f
DB_delBufDictList	autoload/dbext.vim	/^function! s:DB_delBufDictList( buf_nbr ) "{{{$/;"	f
DB_errorMsg	autoload/dbext.vim	/^function! s:DB_errorMsg(msg)$/;"	f
DB_escapeStr	autoload/dbext.vim	/^function! s:DB_escapeStr(value)$/;"	f
DB_execCmd	plugin/dbext.vim	/^function! DB_execCmd(name, ...)$/;"	f
DB_fullPath2Bin	autoload/dbext.vim	/^function! s:DB_fullPath2Bin(executable_name) $/;"	f
DB_get	autoload/dbext.vim	/^function! s:DB_get(name, ...)$/;"	f
DB_getCommentChars	autoload/dbext.vim	/^function! s:DB_getCommentChars()$/;"	f
DB_getDefault	autoload/dbext.vim	/^function! s:DB_getDefault(name)$/;"	f
DB_getDictionaryName	plugin/dbext.vim	/^function! DB_getDictionaryName( which ) $/;"	f
DB_getInput	autoload/dbext.vim	/^function! s:DB_getInput(prompt, default_value, cancel_value)$/;"	f
DB_getListColumn	plugin/dbext.vim	/^function! DB_getListColumn(...) $/;"	f
DB_getLoginScript	autoload/dbext.vim	/^function! s:DB_getLoginScript(filename)$/;"	f
DB_getObjectAndQuote	autoload/dbext.vim	/^function! s:DB_getObjectAndQuote(object) "{{{ $/;"	f
DB_getObjectName	autoload/dbext.vim	/^function! s:DB_getObjectName(object) "{{{ $/;"	f
DB_getObjectOwner	autoload/dbext.vim	/^function! s:DB_getObjectOwner(object) "{{{$/;"	f
DB_getParameters	autoload/dbext.vim	/^function! s:DB_getParameters(scope)$/;"	f
DB_getTblAlias	autoload/dbext.vim	/^function! s:DB_getTblAlias(table_name) $/;"	f
DB_getTitle	autoload/dbext.vim	/^function! s:DB_getTitle() $/;"	f
DB_getVisualBlock	plugin/dbext.vim	/^function! DB_getVisualBlock() range$/;"	f
DB_historyAdd	autoload/dbext.vim	/^function! s:DB_historyAdd(sql)$/;"	f
DB_historyDel	autoload/dbext.vim	/^function! s:DB_historyDel(line)$/;"	f
DB_historyOpen	autoload/dbext.vim	/^function! s:DB_historyOpen()$/;"	f
DB_historySave	autoload/dbext.vim	/^function! s:DB_historySave(auto_hide)$/;"	f
DB_historyUse	autoload/dbext.vim	/^function! s:DB_historyUse(line)$/;"	f
DB_listOption	plugin/dbext.vim	/^function! DB_listOption(...) $/;"	f
DB_option	autoload/dbext.vim	/^function! s:DB_option(param, value, separator)$/;"	f
DB_pad	autoload/dbext.vim	/^function! s:DB_pad(side, length, value)$/;"	f
DB_parseHostVariables	autoload/dbext.vim	/^function! s:DB_parseHostVariables(query)$/;"	f
DB_parseJProperties	autoload/dbext.vim	/^function! s:DB_parseJProperties(query)$/;"	f
DB_parseJava	autoload/dbext.vim	/^function! s:DB_parseJava(query)$/;"	f
DB_parsePHP	autoload/dbext.vim	/^function! s:DB_parsePHP(query)$/;"	f
DB_parsePerl	autoload/dbext.vim	/^function! s:DB_parsePerl(query)$/;"	f
DB_parseProfile	autoload/dbext.vim	/^function! s:DB_parseProfile(value)$/;"	f
DB_parseSQL	autoload/dbext.vim	/^function! s:DB_parseSQL(query)$/;"	f
DB_parseVB	autoload/dbext.vim	/^function! s:DB_parseVB(query)$/;"	f
DB_parseVim	autoload/dbext.vim	/^function! s:DB_parseVim(query)$/;"	f
DB_promptForParameters	autoload/dbext.vim	/^function! s:DB_promptForParameters(...)$/;"	f
DB_removeEmptyLines	autoload/dbext.vim	/^function! s:DB_removeEmptyLines(sql)$/;"	f
DB_resBufName	autoload/dbext.vim	/^function! s:DB_resBufName()$/;"	f
DB_resetBufferParameters	autoload/dbext.vim	/^function! s:DB_resetBufferParameters(use_defaults)$/;"	f
DB_resetGlobalParameters	autoload/dbext.vim	/^function! s:DB_resetGlobalParameters()$/;"	f
DB_restoreConnParameters	autoload/dbext.vim	/^function! s:DB_restoreConnParameters()$/;"	f
DB_runCmd	autoload/dbext.vim	/^function! s:DB_runCmd(cmd, sql, result)$/;"	f
DB_saveConnParameters	autoload/dbext.vim	/^function! s:DB_saveConnParameters()$/;"	f
DB_saveSize	autoload/dbext.vim	/^function! s:DB_saveSize(buf_name)$/;"	f
DB_searchReplace	autoload/dbext.vim	/^function! s:DB_searchReplace(str, exp_find_str, exp_get_value, count_matches)$/;"	f
DB_set	autoload/dbext.vim	/^function! s:DB_set(name, value)$/;"	f
DB_setGlobal	autoload/dbext.vim	/^function! s:DB_setGlobal(name, value)$/;"	f
DB_setWType	autoload/dbext.vim	/^function! s:DB_setWType(name, value)$/;"	f
DB_sqlVarInit	autoload/dbext.vim	/^function! s:DB_sqlVarInit()$/;"	f
DB_sqlVarRemoveTemp	autoload/dbext.vim	/^function! s:DB_sqlVarRemoveTemp()$/;"	f
DB_sqlVarSet	autoload/dbext.vim	/^function! s:DB_sqlVarSet(name, value, temporary)$/;"	f
DB_sqlVarSubstitute	autoload/dbext.vim	/^function! s:DB_sqlVarSubstitute(sql)$/;"	f
DB_stripComments	autoload/dbext.vim	/^function! s:DB_stripComments(mdl_options)$/;"	f
DB_stripLeadFollowQuotesSpace	autoload/dbext.vim	/^function! s:DB_stripLeadFollowQuotesSpace(str)$/;"	f
DB_stripLeadFollowSpaceLines	autoload/dbext.vim	/^function! s:DB_stripLeadFollowSpaceLines(str)$/;"	f
DB_switchToBuffer	autoload/dbext.vim	/^function! s:DB_switchToBuffer(buf_name, buf_file, get_buf_nr_name)$/;"	f
DB_validateBufferParameters	autoload/dbext.vim	/^function! s:DB_validateBufferParameters()$/;"	f
DB_varToString	autoload/dbext.vim	/^function! s:DB_varToString(name)$/;"	f
DB_warningMsg	autoload/dbext.vim	/^function! s:DB_warningMsg(msg)$/;"	f
DM	plugin/cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
Decho	plugin/Decho.vim	/^com! -nargs=+ -complete=expression Decho	call Decho(<args>)$/;"	c
Decho	plugin/Decho.vim	/^fun! Decho(...)$/;"	f
DechoDepth	plugin/Decho.vim	/^fun! DechoDepth(depth)$/;"	f
DechoMsg	plugin/Decho.vim	/^fun! s:DechoMsg(onoff,...)$/;"	f
DechoMsgOff	plugin/Decho.vim	/^com! -nargs=0 DechoMsgOff					call s:DechoMsg(0)$/;"	c
DechoMsgOn	plugin/Decho.vim	/^com! -nargs=0 DechoMsgOn					call s:DechoMsg(1,expand("<sfile>"))$/;"	c
DechoOff	plugin/Decho.vim	/^com! -nargs=0 -range=% DechoOff				call DechoOff(<line1>,<line2>)$/;"	c
DechoOff	plugin/Decho.vim	/^fun! DechoOff(line1,line2)$/;"	f
DechoOn	plugin/Decho.vim	/^com! -nargs=0 -range=% DechoOn				call DechoOn(<line1>,<line2>)$/;"	c
DechoOn	plugin/Decho.vim	/^fun! DechoOn(line1,line2)$/;"	f
DechoPause	plugin/Decho.vim	/^com! -nargs=0 DechoPause					call DechoPause()$/;"	c
DechoPause	plugin/Decho.vim	/^fun! DechoPause()$/;"	f
DechoRemOff	plugin/Decho.vim	/^ com! -nargs=0 DechoRemOff					call s:DechoRemote(0)$/;"	c
DechoRemOn	plugin/Decho.vim	/^ com! -nargs=0 DechoRemOn					call s:DechoRemote(1,expand("<sfile>"))$/;"	c
DechoRemote	plugin/Decho.vim	/^ fun! s:DechoRemote(mode,...)$/;"	f
DechoSep	plugin/Decho.vim	/^com! -nargs=? DechoSep						call DechoSep(<args>)$/;"	c
DechoSep	plugin/Decho.vim	/^fun! DechoSep(...)$/;"	f
DechoTab	plugin/Decho.vim	/^ fun! s:DechoTab(mode,...)$/;"	f
DechoTabOff	plugin/Decho.vim	/^ com! -nargs=? DechoTabOff                  set lz|call s:DechoTab(0)|set nolz$/;"	c
DechoTabOn	plugin/Decho.vim	/^ com! -nargs=? DechoTabOn                   set lz|call s:DechoTab(1,expand("<sfile>"))|set nolz$/;"	c
DechoVarOff	plugin/Decho.vim	/^com! -nargs=0 DechoVarOff					call s:DechoVarOff()$/;"	c
DechoVarOff	plugin/Decho.vim	/^fun! s:DechoVarOff()$/;"	f
DechoVarOn	plugin/Decho.vim	/^com! -nargs=? DechoVarOn					call s:DechoVarOn(expand("<sfile>"),<args>)$/;"	c
DechoVarOn	plugin/Decho.vim	/^fun! s:DechoVarOn(...)$/;"	f
DefineSnips	plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
Delete	plugin/dbext.vim	/^command! -nargs=+ Delete            :call dbext#DB_execSql("delete " . <q-args>)$/;"	c
DestroyMark	plugin/cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detect	plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
Dfunc	plugin/Decho.vim	/^fun! Dfunc(...)$/;"	f
Dhide	plugin/Decho.vim	/^com! -nargs=0 Dhide    						call s:Dhide(1)$/;"	c
Dhide	plugin/Decho.vim	/^fun! <SID>Dhide(hide)$/;"	f
Doc	autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
Dredir	plugin/Decho.vim	/^com! -nargs=+ -complete=expression Dredir	call Dredir(<args>)$/;"	c
Dredir	plugin/Decho.vim	/^fun! Dredir(...)$/;"	f
Dret	plugin/Decho.vim	/^fun! Dret(...)$/;"	f
Drop	plugin/dbext.vim	/^command! -nargs=+ Drop              :call dbext#DB_execSql("drop " . <q-args>)$/;"	c
Dsep	plugin/Decho.vim	/^com! -nargs=? Dsep						    call DechoSep(<args>)$/;"	c
Dshow	plugin/Decho.vim	/^com! -nargs=0 Dshow    						call s:Dhide(0)$/;"	c
EchoError	plugin/symfony.vim	/^function! g:EchoError(msg)$/;"	f
Edit	autoload/rails.vim	/^function! s:Edit(bang,count,arg,...)$/;"	f
EditSimpleRb	autoload/rails.vim	/^function! s:EditSimpleRb(bang,cmd,name,target,prefix,suffix,...)$/;"	f
ExecWinCmdNoEa	autoload/genutils.vim	/^function! s:ExecWinCmdNoEa(winCmd)$/;"	f
Extract	autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractSnips	plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
Filename	autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
Find	autoload/rails.vim	/^function! s:Find(bang,count,arg,...)$/;"	f
FindBufferForName	autoload/genutils.vim	/^function! s:FindBufferForName(fileName)$/;"	f
FindCurrentAction	plugin/symfony.vim	/^function! FindCurrentAction()$/;"	f
FindCurrentFileName	plugin/symfony.vim	/^function! FindCurrentFileName()$/;"	f
GUDebugEcho	autoload/genutils.vim	/^command! -complete=file -nargs=* GUDebugEcho :echo <q-args>$/;"	c
GetActionNameFromAction	plugin/symfony.vim	/^function! GetActionNameFromAction(action_name)$/;"	f
GetActionNameFromActionFileName	plugin/symfony.vim	/^function! GetActionNameFromActionFileName(action_file_name)$/;"	f
GetComponentNameFromComponentFileName	plugin/symfony.vim	/^function! GetComponentNameFromComponentFileName(component_file_name)$/;"	f
GetCurrentWord	plugin/words_tools.vim	/^function! GetCurrentWord()$/;"	f
GetExecuteActionNameFromAction	plugin/symfony.vim	/^function! GetExecuteActionNameFromAction(action_name)$/;"	f
GetFileName	plugin/symfony.vim	/^function! GetFileName(file)$/;"	f
GetLatestVimScripts	autoload/getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetNearestWord	plugin/words_tools.vim	/^function! GetNearestWord()$/;"	f
GetNextWinnrInStack	autoload/genutils.vim	/^function! s:GetNextWinnrInStack(dir)$/;"	f
GetOneScript	autoload/getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
GetPhpIndent	indent/php.vim	/^function GetPhpIndent()$/;"	f
GetPreviousWord	plugin/words_tools.vim	/^function! GetPreviousWord()$/;"	f
GetScript	autoload/getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
GetScripts	plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetSnippet	plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetSuccessTemplateFromAction	plugin/symfony.vim	/^function! GetSuccessTemplateFromAction(action_name)$/;"	f
GetSuccessTemplateFromComponent	plugin/symfony.vim	/^function! GetSuccessTemplateFromComponent(component_name)$/;"	f
GetWinDim	autoload/genutils.vim	/^function! s:GetWinDim(dir, win)$/;"	f
GoWinbufnr	plugin/cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
GotoWinNum	autoload/ZoomWin.vim	/^fun! s:GotoWinNum(winnum)$/;"	f
HLTest	syntax/Decho.vim	/^  fun! s:HLTest(hlname)$/;"	f
HiDefaults	autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	syntax/jquery.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jquery.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HtmlIndentClose	indent/php.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
HtmlIndentCloseAlt	indent/php.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentOpen	indent/php.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentOpenAlt	indent/php.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	indent/php.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	indent/php.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
ImAmInAComponent	plugin/symfony.vim	/^function! ImAmInAComponent() $/;"	f
ImAmInAComponentTemplate	plugin/symfony.vim	/^function! ImAmInAComponentTemplate()$/;"	f
ImAmInAModule	plugin/symfony.vim	/^function! ImAmInAModule() $/;"	f
ImAmInAnAction	plugin/symfony.vim	/^function! ImAmInAnAction() $/;"	f
ImAmInAnActionTemplate	plugin/symfony.vim	/^function! ImAmInAnActionTemplate()$/;"	f
InitStatusline	autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
InjectIntoStatusline	autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
Insert	plugin/dbext.vim	/^command! -nargs=+ Insert            :call dbext#DB_execSql("insert " . <q-args>)$/;"	c
InsertRefs	plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
Invert	autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
InvokeFuncs	autoload/genutils.vim	/^function! s:InvokeFuncs(funcList)$/;"	f
LocalModelines	autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
MakeSnip	plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MakeSpace	autoload/Align.vim	/^fun! s:MakeSpace(spacecnt)$/;"	f
MarkErrors	plugin/cuteErrorMarker.vim	/^command! MarkErrors call MarkErrors()$/;"	c
MarkErrors	plugin/cuteErrorMarker.vim	/^fun! MarkErrors() "{{{$/;"	f
Match	autoload/genutils.vim	/^function! s:Match(expr, pat, start)$/;"	f
MatchDebug	plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
Match_debug	plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
MultiMatch	plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeGetCurrentNode	plugin/NERD_tree.vim	/^function! NERDTreeGetCurrentNode()$/;"	f
NERDTreeGetCurrentPath	plugin/NERD_tree.vim	/^function! NERDTreeGetCurrentPath()$/;"	f
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
Navcommand	autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NewProject	autoload/rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	autoload/rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
ParseSkip	plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseWords	plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getPathTrunk	plugin/NERD_tree.vim	/^function! s:Path.getPathTrunk()$/;"	f
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(esc)$/;"	f
Path.strAbs	plugin/NERD_tree.vim	/^function! s:Path.strAbs()$/;"	f
Path.strDisplay	plugin/NERD_tree.vim	/^function! s:Path.strDisplay()$/;"	f
Path.strForCd	plugin/NERD_tree.vim	/^function! s:Path.strForCd()$/;"	f
Path.strForEditCmd	plugin/NERD_tree.vim	/^function! s:Path.strForEditCmd()$/;"	f
Path.strForGlob	plugin/NERD_tree.vim	/^function! s:Path.strForGlob()$/;"	f
Path.strForOS	plugin/NERD_tree.vim	/^function! s:Path.strForOS(esc)$/;"	f
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PersistentVarName	autoload/genutils.vim	/^function! s:PersistentVarName(pluginName, persistentVar)$/;"	f
PlaceErrorMarkersHook	plugin/cuteErrorMarker.vim	/^fun! PlaceErrorMarkersHook() "{{{$/;"	f
Pos	additional_scripts/cream-statusline-prototype.vim	/^function! s:Pos(...)$/;"	f
Preview	autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
ProcessFile	plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Project	autoload/rails.vim	/^function! s:Project(bang,arg)$/;"	f
ProjectMenu	plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
QArgSplitter	autoload/Align.vim	/^fun! s:QArgSplitter(qarg)$/;"	f
QArgSplitter	plugin/cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
QSortR	autoload/genutils.vim	/^function! s:QSortR(start, end, cmp, direction, accessor, swapper, context)$/;"	f
RM	plugin/cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RWP	plugin/cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
Rails	plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsEval	autoload/rails.vim	/^function! RailsEval(ruby,...) abort$/;"	f
RailsFile	autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	autoload/rails.vim	/^function! RailsRoot()$/;"	f
RailsSTATUSLINE	autoload/rails.vim	/^function! RailsSTATUSLINE()$/;"	f
RailsStatusline	autoload/rails.vim	/^function! RailsStatusline()$/;"	f
Rake	autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
ReconfigPaths	plugin/symfony.vim	/^function! ReconfigPaths()$/;"	f
Ref	plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Refresh	autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
Related	autoload/rails.vim	/^function! s:Related(bang,cmd,...)$/;"	f
RelatedFile	autoload/rails.vim	/^function! s:RelatedFile()$/;"	f
RemoveErrorMarkersHook	plugin/cuteErrorMarker.vim	/^fun! RemoveErrorMarkersHook() "{{{$/;"	f
RemoveSnippet	autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ResetSnippets	plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
Resolve	plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreMark	plugin/cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestorePosn	autoload/ZoomWin.vim	/^fun! s:RestorePosn(savedposn)$/;"	f
RestoreUserMaps	plugin/cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreWinPosn	plugin/cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
RestoreWindowSettings2	autoload/genutils.vim	/^function! s:RestoreWindowSettings2(id)$/;"	f
S	plugin/surround.vim	/^            vmap  S    <Plug>VSurround$/;"	m
SM	plugin/cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SNR	autoload/genutils.vim	/^function! s:SNR()$/;"	f
SWP	plugin/cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	plugin/cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SavePosn	autoload/ZoomWin.vim	/^fun! s:SavePosn(savewinhoriz)$/;"	f
SaveUserMaps	plugin/cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	plugin/cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
Select	plugin/dbext.vim	/^command! -nargs=+ Select            :call dbext#DB_execSql("select " . <q-args>)$/;"	c
SelectClass	plugin/cuteErrorMarker.vim	/^fun! s:SelectClass( error ) "{{{$/;"	f
SelectWord	autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Set	autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetAppConfig	plugin/symfony.vim	/^function! SetAppConfig()$/;"	f
SetBasePath	autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetModuleConfig	plugin/symfony.vim	/^function! SetModuleConfig()$/;"	f
SetOptDefault	plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetProjectConfig	plugin/symfony.vim	/^function! SetProjectConfig()$/;"	f
SfPluginLoad	plugin/symfony.vim	/^command! -nargs=1 -complete=dir SfPluginLoad :call SfPluginLoad(<args>)$/;"	c
SfPluginLoad	plugin/symfony.vim	/^function! SfPluginLoad(path)$/;"	f
SfSwitchView	plugin/symfony.vim	/^command! -n=? -complete=dir SfSwitchView :call Switch()$/;"	c
ShowAvailableSnips	plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
Stlp	additional_scripts/cream-statusline-prototype.vim	/^command! -nargs=0 Stlp call Cream_statusline_prototype_toggle()$/;"	c
Strlen	autoload/Align.vim	/^fun! s:Strlen(x)$/;"	f
Switch	plugin/symfony.vim	/^function! Switch()$/;"	f
TagList_IsValid	plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TheCWord	autoload/rails.vim	/^function! s:TheCWord()$/;"	f
Tlist	plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
Tlist_prototype_get	additional_scripts/cream-statusline-prototype.vim	/^function! s:Tlist_prototype_get()$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode.strDisplay	plugin/NERD_tree.vim	/^function! s:TreeFileNode.strDisplay()$/;"	f
TriggerSnippet	plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
U	autoload/repeat.vim	/^nnoremap <silent> U     :<C-U>call <SID>wrap('U',v:count)<CR>$/;"	m
Update	plugin/dbext.vim	/^command! -nargs=+ Update            :call dbext#DB_execSql("update " . <q-args>)$/;"	c
UpdateChangedSnip	autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
Wholematch	plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
ZoomWin	plugin/ZoomWinPlugin.vim	/^com! ZoomWin :set lz|silent call ZoomWin#ZoomWin()|set nolz$/;"	c
ZoomWin	plugin/ZoomWinPlugin.vim	/^fun! ZoomWin()$/;"	f
ZoomWin#CleanupSessionFile	autoload/ZoomWin.vim	/^fun! ZoomWin#CleanupSessionFile()$/;"	f
ZoomWin#ZoomWin	autoload/ZoomWin.vim	/^fun! ZoomWin#ZoomWin()$/;"	f
ZoomWinPreserve	autoload/ZoomWin.vim	/^fun! s:ZoomWinPreserve(open)$/;"	f
[%	plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
]%	plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
_makeArgumentList	autoload/genutils.vim	/^function! s:_makeArgumentList()$/;"	f
_makeArgumentString	autoload/genutils.vim	/^function! s:_makeArgumentString()$/;"	f
a%	plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add_methods	autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
addfilecmds	autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addprojectdir	autoload/rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
addtostatus	autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
apiEdit	autoload/rails.vim	/^function! s:apiEdit(bang,cmd,...)$/;"	f
apiList	autoload/rails.vim	/^function! s:apiList(A,L,P)$/;"	f
app_background_ruby_command	autoload/rails.vim	/^function! s:app_background_ruby_command(cmd) dict abort$/;"	f
app_calculate_file_type	autoload/rails.vim	/^function! s:app_calculate_file_type(path) dict$/;"	f
app_dbext_settings	autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_destroy_command	autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_ruby_command	autoload/rails.vim	/^function! s:app_execute_ruby_command(cmd) dict abort$/;"	f
app_find_file	autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_server_command	autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
autocamelize	autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoload	plugin/rails.vim	/^function! s:autoload(...)$/;"	f
b:current_syntax	syntax/jquery.vim	/^let b:current_syntax = 'javascript.jquery'$/;"	v
b:did_indent	indent/php.vim	/^let b:did_indent = 1$/;"	v
b:php_noindent_switch	indent/php.vim	/^   let b:php_noindent_switch = 1$/;"	v
beep	plugin/surround.vim	/^function! s:beep()$/;"	f
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
cache_clear	autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changesurround	plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
compact	autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completion_filter	autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
controller	autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	autoload/rails.vim	/^function! s:controllerEdit(bang,cmd,...)$/;"	f
controllerList	autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
copyNode	plugin/NERD_tree.vim	/^function! s:copyNode()$/;"	f
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
cs	plugin/surround.vim	/^    nmap          cs   <Plug>Csurround$/;"	m
current_compiler	compiler/php.vim	/^let current_compiler = "php"$/;"	v
current_compiler	compiler/tidy.vim	/^let current_compiler = "tidy"$/;"	v
dbext	plugin/dbext.vim	/^augroup dbext$/;"	a
dbext#DB_DictionaryCreate	autoload/dbext.vim	/^function! dbext#DB_DictionaryCreate( drop_dict, which ) "{{{$/;"	f
dbext#DB_auBufDelete	autoload/dbext.vim	/^function! dbext#DB_auBufDelete(del_buf_nr) "{{{$/;"	f
dbext#DB_auVimLeavePre	autoload/dbext.vim	/^function! dbext#DB_auVimLeavePre() "{{{$/;"	f
dbext#DB_auVimLeavePreOld	autoload/dbext.vim	/^function! dbext#DB_auVimLeavePreOld() "{{{$/;"	f
dbext#DB_checkModeline	autoload/dbext.vim	/^function! dbext#DB_checkModeline()$/;"	f
dbext#DB_commit	autoload/dbext.vim	/^function! dbext#DB_commit()$/;"	f
dbext#DB_completeSettings	autoload/dbext.vim	/^function! dbext#DB_completeSettings(ArgLead, CmdLine, CursorPos)$/;"	f
dbext#DB_completeVariable	autoload/dbext.vim	/^function! dbext#DB_completeVariable(ArgLead, CmdLine, CursorPos)$/;"	f
dbext#DB_connect	autoload/dbext.vim	/^function! dbext#DB_connect()$/;"	f
dbext#DB_describeProcedure	autoload/dbext.vim	/^function! dbext#DB_describeProcedure(...)$/;"	f
dbext#DB_describeProcedurePrompt	autoload/dbext.vim	/^function! dbext#DB_describeProcedurePrompt()$/;"	f
dbext#DB_describeTable	autoload/dbext.vim	/^function! dbext#DB_describeTable(...)$/;"	f
dbext#DB_describeTablePrompt	autoload/dbext.vim	/^function! dbext#DB_describeTablePrompt()$/;"	f
dbext#DB_disconnect	autoload/dbext.vim	/^function! dbext#DB_disconnect()$/;"	f
dbext#DB_execFuncTypeWCheck	autoload/dbext.vim	/^function! dbext#DB_execFuncTypeWCheck(name,...)$/;"	f
dbext#DB_execFuncWCheck	autoload/dbext.vim	/^function! dbext#DB_execFuncWCheck(name,...)$/;"	f
dbext#DB_execRangeSql	autoload/dbext.vim	/^function! dbext#DB_execRangeSql() range$/;"	f
dbext#DB_execSql	autoload/dbext.vim	/^function! dbext#DB_execSql(query)$/;"	f
dbext#DB_execSqlTopX	autoload/dbext.vim	/^function! dbext#DB_execSqlTopX(...)$/;"	f
dbext#DB_execSqlWithDefault	autoload/dbext.vim	/^function! dbext#DB_execSqlWithDefault(...)$/;"	f
dbext#DB_getDictionaryName	autoload/dbext.vim	/^function! dbext#DB_getDictionaryName( which ) "{{{$/;"	f
dbext#DB_getListColumn	autoload/dbext.vim	/^function! dbext#DB_getListColumn(table_name, silent_mode, use_newline_sep ) $/;"	f
dbext#DB_getListConnections	autoload/dbext.vim	/^function! dbext#DB_getListConnections()$/;"	f
dbext#DB_getListProcedure	autoload/dbext.vim	/^function! dbext#DB_getListProcedure(...)$/;"	f
dbext#DB_getListTable	autoload/dbext.vim	/^function! dbext#DB_getListTable(...)$/;"	f
dbext#DB_getListView	autoload/dbext.vim	/^function! dbext#DB_getListView(...)$/;"	f
dbext#DB_getQueryUnderCursor	autoload/dbext.vim	/^function! dbext#DB_getQueryUnderCursor()$/;"	f
dbext#DB_getSqlWithDefault	autoload/dbext.vim	/^function! dbext#DB_getSqlWithDefault(...)$/;"	f
dbext#DB_getWType	autoload/dbext.vim	/^function! dbext#DB_getWType(name)$/;"	f
dbext#DB_historyList	autoload/dbext.vim	/^function! dbext#DB_historyList()$/;"	f
dbext#DB_listOption	autoload/dbext.vim	/^function! dbext#DB_listOption(...)$/;"	f
dbext#DB_orientationToggle	autoload/dbext.vim	/^function! dbext#DB_orientationToggle(...)$/;"	f
dbext#DB_parseQuery	autoload/dbext.vim	/^function! dbext#DB_parseQuery(query)$/;"	f
dbext#DB_removeVariable	autoload/dbext.vim	/^function! dbext#DB_removeVariable() range$/;"	f
dbext#DB_rollback	autoload/dbext.vim	/^function! dbext#DB_rollback()$/;"	f
dbext#DB_runPrevCmd	autoload/dbext.vim	/^function! dbext#DB_runPrevCmd(...)$/;"	f
dbext#DB_selectTablePrompt	autoload/dbext.vim	/^function! dbext#DB_selectTablePrompt()$/;"	f
dbext#DB_setMultipleOptions	autoload/dbext.vim	/^function! dbext#DB_setMultipleOptions(multi_options)$/;"	f
dbext#DB_setTitle	autoload/dbext.vim	/^function! dbext#DB_setTitle() $/;"	f
dbext#DB_sqlVarAssignment	autoload/dbext.vim	/^function! dbext#DB_sqlVarAssignment(drop_var, stmt)$/;"	f
dbext#DB_sqlVarList	autoload/dbext.vim	/^function! dbext#DB_sqlVarList(...)$/;"	f
dbext#DB_sqlVarRangeAssignment	autoload/dbext.vim	/^function! dbext#DB_sqlVarRangeAssignment(remove_var) range$/;"	f
dbext#DB_switchPrevBuf	autoload/dbext.vim	/^function! dbext#DB_switchPrevBuf()$/;"	f
dbext#DB_windowClose	autoload/dbext.vim	/^function! dbext#DB_windowClose(buf_name)$/;"	f
dbext#DB_windowOpen	autoload/dbext.vim	/^function! dbext#DB_windowOpen()$/;"	f
dbext#DB_windowResize	autoload/dbext.vim	/^function! dbext#DB_windowResize()$/;"	f
dbext_dbi#DBI_load_perl_subs	autoload/dbext_dbi.vim	/^function! dbext_dbi#DBI_load_perl_subs()$/;"	f
debug	autoload/rails.vim	/^function! s:debug(str)$/;"	f
default_rake_task	autoload/rails.vim	/^function! s:default_rake_task(lnum)$/;"	f
defaultpreview	autoload/rails.vim	/^function! s:defaultpreview(lnum)$/;"	f
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
deleteNode	plugin/NERD_tree.vim	/^function! s:deleteNode()$/;"	f
did_drchip_decho_syntax	syntax/Decho.vim	/^  let did_drchip_decho_syntax= 1$/;"	v
did_lisp_syntax_inits	syntax/jquery.vim	/^    let did_lisp_syntax_inits = 1$/;"	v
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
djump	autoload/rails.vim	/^function! s:djump(def)$/;"	f
dosurround	plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
ds	plugin/surround.vim	/^    nmap          ds   <Plug>Dsurround$/;"	m
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
edit	autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
editcmdfor	autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
endof	autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
environment	autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	autoload/rails.vim	/^function! s:environmentEdit(bang,cmd,...)$/;"	f
environmentList	autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	autoload/rails.vim	/^function! s:error(str)$/;"	f
error	plugin/rails.vim	/^function! s:error(str)$/;"	f
escarg	autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	plugin/rails.vim	/^function! s:escvar(r)$/;"	f
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
executeNode	plugin/NERD_tree.vim	/^function! s:executeNode()$/;"	f
extractafter	plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
findamethod	autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findedit	autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findfromview	autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findview	autoload/rails.vim	/^function! s:findview(name)$/;"	f
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	autoload/rails.vim	/^function! s:fixturesEdit(bang,cmd,...)$/;"	f
fixturesList	autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
format	autoload/rails.vim	/^function! s:format(...)$/;"	f
function	autoload/rails.vim	/^function! s:function(name)$/;"	f
functionaltestEdit	autoload/rails.vim	/^function! s:functionaltestEdit(bang,cmd,...)$/;"	f
functionaltestList	autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g%	plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:Align_xstrlen	autoload/Align.vim	/^  let g:Align_xstrlen= 0$/;"	v
g:Align_xstrlen	autoload/Align.vim	/^  let g:Align_xstrlen= 1$/;"	v
g:DrChipTopLvlMenu	plugin/AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:GetLatestVimScripts_allowautoinstall	autoload/getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:ST_WIN_CMD	autoload/genutils.vim	/^let g:ST_WIN_CMD = 0 | let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2$/;"	v
g:__CUTEERRORMARKER_VIM__	plugin/cuteErrorMarker.vim	/^let g:__CUTEERRORMARKER_VIM__ = 1$/;"	v
g:autoloaded_rails	autoload/rails.vim	/^let g:autoloaded_rails = '3.4'$/;"	v
g:colors_name	colors/elflord.vim	/^let g:colors_name = "elflord-custom"$/;"	v
g:colors_name	colors/leo.vim	/^let g:colors_name = "leo256"$/;"	v
g:dbext_dbi_debug	autoload/dbext_dbi.vim	/^   let g:dbext_dbi_debug = 0$/;"	v
g:dbext_dbi_max_rows	autoload/dbext_dbi.vim	/^   let g:dbext_dbi_max_rows = 300$/;"	v
g:dbext_dbi_msg	autoload/dbext_dbi.vim	/^   let g:dbext_dbi_msg = ""$/;"	v
g:dbext_dbi_result	autoload/dbext_dbi.vim	/^   let g:dbext_dbi_result = -1$/;"	v
g:dbext_dbi_sql	autoload/dbext_dbi.vim	/^   let g:dbext_dbi_sql = ""$/;"	v
g:dbext_dbi_trace_level	autoload/dbext_dbi.vim	/^   let g:dbext_dbi_trace_level = 0$/;"	v
g:dbext_default_dbi_column_delimiter	autoload/dbext_dbi.vim	/^   let g:dbext_default_dbi_column_delimiter = "  "$/;"	v
g:dbext_default_menu_mode	plugin/dbext.vim	/^    let g:dbext_default_menu_mode = 3$/;"	v
g:decho_bufenter	plugin/Decho.vim	/^ let g:decho_bufenter= 0$/;"	v
g:decho_bufname	plugin/Decho.vim	/^ let g:decho_bufname= "DBG"$/;"	v
g:decho_winheight	plugin/Decho.vim	/^ let g:decho_winheight= 5$/;"	v
g:dechomode	plugin/Decho.vim	/^ let g:dechomode= s:DECHOWIN$/;"	v
g:dechovarname	plugin/Decho.vim	/^ let g:dechovarname = "g:dechovar"$/;"	v
g:did_ft	plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:did_info_syntax_inits	syntax/info.vim	/^  let g:did_info_syntax_inits = 1$/;"	v
g:getscript_cygwin	autoload/getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	autoload/getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	autoload/getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:getscript_shq	autoload/getscript.vim	/^   let g:getscript_shq= "'"$/;"	v
g:getscript_shq	autoload/getscript.vim	/^   let g:getscript_shq= '"'$/;"	v
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= "'"$/;"	v
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= &shq$/;"	v
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= &sxq$/;"	v
g:getscript_shq	autoload/getscript.vim	/^ let g:getscript_shq= g:netrw_shq$/;"	v
g:last_action_line	plugin/symfony.vim	/^let g:last_action_line = []$/;"	v
g:last_template_line	plugin/symfony.vim	/^let g:last_template_line = []$/;"	v
g:loaded_Align	autoload/Align.vim	/^let g:loaded_Align = "v35"$/;"	v
g:loaded_AlignMaps	autoload/AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/;"	v
g:loaded_AlignMapsPlugin	plugin/AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/;"	v
g:loaded_AlignPlugin	plugin/AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/;"	v
g:loaded_Decho	plugin/Decho.vim	/^let g:loaded_Decho = "v20"$/;"	v
g:loaded_ZoomWin	autoload/ZoomWin.vim	/^let g:loaded_ZoomWin = "v23"$/;"	v
g:loaded_ZoomWinPlugin	plugin/ZoomWinPlugin.vim	/^let g:loaded_ZoomWinPlugin = "v23"$/;"	v
g:loaded_cecutil	plugin/cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_dbext	plugin/dbext.vim	/^let g:loaded_dbext = 1000$/;"	v
g:loaded_dbext_auto	autoload/dbext.vim	/^let g:loaded_dbext_auto = 1000$/;"	v
g:loaded_dbext_dbi	autoload/dbext_dbi.vim	/^    let g:loaded_dbext_dbi = -1$/;"	v
g:loaded_dbext_dbi	autoload/dbext_dbi.vim	/^let g:loaded_dbext_dbi = 1000$/;"	v
g:loaded_dbext_dbi_msg	autoload/dbext_dbi.vim	/^    let g:loaded_dbext_dbi_msg = 'Vim does not have perl support enabled'$/;"	v
g:loaded_getscript	autoload/getscript.vim	/^let g:loaded_getscript= "v29"$/;"	v
g:loaded_getscriptPlugin	plugin/getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v29"$/;"	v
g:loaded_rails	plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_repeat	autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_surround	plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntax_info	syntax/info.vim	/^let g:loaded_syntax_info= "v1"$/;"	v
g:makeArgumentList	autoload/genutils.vim	/^let g:makeArgumentList = 'exec genutils#MakeArgumentList()'$/;"	v
g:makeArgumentString	autoload/genutils.vim	/^let g:makeArgumentString = 'exec genutils#MakeArgumentString()'$/;"	v
g:repeat_tick	autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:sf_app_name	plugin/symfony.vim	/^let g:sf_app_name      = ""$/;"	v
g:sf_module_name	plugin/symfony.vim	/^let g:sf_module_name   = "" $/;"	v
genutils#AddNotifyWindowClose	autoload/genutils.vim	/^function! genutils#AddNotifyWindowClose(windowTitle, functionName)$/;"	f
genutils#AddToFCShellPre	autoload/genutils.vim	/^function! genutils#AddToFCShellPre(funcName)$/;"	f
genutils#AlignWordWithWordInPreviousLine	autoload/genutils.vim	/^function! genutils#AlignWordWithWordInPreviousLine()$/;"	f
genutils#ArrayVarExists	autoload/genutils.vim	/^function! genutils#ArrayVarExists(varName, index)$/;"	f
genutils#BinInsertSort	autoload/genutils.vim	/^function! genutils#BinInsertSort(cmp, direction) range$/;"	f
genutils#BinInsertSort2	autoload/genutils.vim	/^function! genutils#BinInsertSort2(start, end, cmp, direction, accessor, mover, context)$/;"	f
genutils#BinSearchForInsert	autoload/genutils.vim	/^function! genutils#BinSearchForInsert(start, end, line, cmp, direction)$/;"	f
genutils#BinSearchForInsert2	autoload/genutils.vim	/^function! genutils#BinSearchForInsert2(start, end, line, cmp, direction,$/;"	f
genutils#BinSearchList	autoload/genutils.vim	/^function! genutils#BinSearchList(list, start, end, item, cmp)$/;"	f
genutils#CenterWordInSpace	autoload/genutils.vim	/^function! genutils#CenterWordInSpace()$/;"	f
genutils#CheckWindowClose	autoload/genutils.vim	/^function! genutils#CheckWindowClose()$/;"	f
genutils#CleanDiffOptions	autoload/genutils.vim	/^function! genutils#CleanDiffOptions()$/;"	f
genutils#CleanupFileName	autoload/genutils.vim	/^function! genutils#CleanupFileName(fileName)$/;"	f
genutils#CleanupFileName2	autoload/genutils.vim	/^function! genutils#CleanupFileName2(fileName, win32ProtectedChars)$/;"	f
genutils#ClearAllSigns	autoload/genutils.vim	/^function! genutils#ClearAllSigns()$/;"	f
genutils#CloseWinNoEa	autoload/genutils.vim	/^function! genutils#CloseWinNoEa(winnr, force)$/;"	f
genutils#CloseWindow	autoload/genutils.vim	/^function! genutils#CloseWindow(win, force)$/;"	f
genutils#CmpByLength	autoload/genutils.vim	/^function! genutils#CmpByLength(line1, line2, ...)$/;"	f
genutils#CmpByLineLengthNname	autoload/genutils.vim	/^function! genutils#CmpByLineLengthNname(line1, line2, ...)$/;"	f
genutils#CmpByNumber	autoload/genutils.vim	/^function! genutils#CmpByNumber(line1, line2, ...)$/;"	f
genutils#CmpByString	autoload/genutils.vim	/^function! genutils#CmpByString(line1, line2, ...)$/;"	f
genutils#CmpByStringIgnoreCase	autoload/genutils.vim	/^function! genutils#CmpByStringIgnoreCase(line1, line2, ...)$/;"	f
genutils#CmpJavaImports	autoload/genutils.vim	/^function! genutils#CmpJavaImports(line1, line2, ...)$/;"	f
genutils#CommonPath	autoload/genutils.vim	/^function! genutils#CommonPath(path1, path2, ...)$/;"	f
genutils#CommonString	autoload/genutils.vim	/^function! genutils#CommonString(str1, str2)$/;"	f
genutils#CrUnProtectedCharsPattern	autoload/genutils.vim	/^function! genutils#CrUnProtectedCharsPattern(chars, ...)$/;"	f
genutils#CreateArgString	autoload/genutils.vim	/^function! genutils#CreateArgString(argList, sep, ...)$/;"	f
genutils#CurLineHasSign	autoload/genutils.vim	/^function! genutils#CurLineHasSign()$/;"	f
genutils#DeEscape	autoload/genutils.vim	/^function! genutils#DeEscape(str)$/;"	f
genutils#DebugShowArgs	autoload/genutils.vim	/^function! genutils#DebugShowArgs(...)$/;"	f
genutils#DefFCShellInstall	autoload/genutils.vim	/^function! genutils#DefFCShellInstall()$/;"	f
genutils#DefFCShellUninstall	autoload/genutils.vim	/^function! genutils#DefFCShellUninstall()$/;"	f
genutils#DefFileChangedShell	autoload/genutils.vim	/^function! genutils#DefFileChangedShell()$/;"	f
genutils#EatChar	autoload/genutils.vim	/^function! genutils#EatChar(pat)$/;"	f
genutils#Escape	autoload/genutils.vim	/^function! genutils#Escape(str, chars)$/;"	f
genutils#EscapeCommand	autoload/genutils.vim	/^function! genutils#EscapeCommand(cmd, args, pipe)$/;"	f
genutils#ExpandStr	autoload/genutils.vim	/^function! genutils#ExpandStr(str)$/;"	f
genutils#ExtractFuncListing	autoload/genutils.vim	/^function! genutils#ExtractFuncListing(funcName, hLines, tLines)$/;"	f
genutils#FindBufferForName	autoload/genutils.vim	/^function! genutils#FindBufferForName(fileName)$/;"	f
genutils#FindWindowForBuffer	autoload/genutils.vim	/^function! genutils#FindWindowForBuffer(bufferName, checkUnlisted)$/;"	f
genutils#GetBufNameForAu	autoload/genutils.vim	/^function! genutils#GetBufNameForAu(bufName)$/;"	f
genutils#GetColPosition	autoload/genutils.vim	/^function! genutils#GetColPosition(id)$/;"	f
genutils#GetLastWinnrInStack	autoload/genutils.vim	/^function! genutils#GetLastWinnrInStack(dir)$/;"	f
genutils#GetLinePosition	autoload/genutils.vim	/^function! genutils#GetLinePosition(id)$/;"	f
genutils#GetNextWinnrInStack	autoload/genutils.vim	/^function! genutils#GetNextWinnrInStack(dir)$/;"	f
genutils#GetPersistentVar	autoload/genutils.vim	/^function! genutils#GetPersistentVar(pluginName, persistentVar, default)$/;"	f
genutils#GetPreviewWinnr	autoload/genutils.vim	/^function! genutils#GetPreviewWinnr()$/;"	f
genutils#GetSelectedIndex	autoload/genutils.vim	/^function! genutils#GetSelectedIndex()$/;"	f
genutils#GetShellEnvType	autoload/genutils.vim	/^function! genutils#GetShellEnvType()$/;"	f
genutils#GetSpacer	autoload/genutils.vim	/^function! genutils#GetSpacer(width)$/;"	f
genutils#GetVimCmdOutput	autoload/genutils.vim	/^function! genutils#GetVimCmdOutput(cmd)$/;"	f
genutils#IsOnlyHorizontalWindow	autoload/genutils.vim	/^function! genutils#IsOnlyHorizontalWindow()$/;"	f
genutils#IsOnlyVerticalWindow	autoload/genutils.vim	/^function! genutils#IsOnlyVerticalWindow()$/;"	f
genutils#IsPositionSet	autoload/genutils.vim	/^function! genutils#IsPositionSet(id)$/;"	f
genutils#MakeArgumentList	autoload/genutils.vim	/^function! genutils#MakeArgumentList(...)$/;"	f
genutils#MakeArgumentString	autoload/genutils.vim	/^function! genutils#MakeArgumentString(...)$/;"	f
genutils#MapAppendCascaded	autoload/genutils.vim	/^function! genutils#MapAppendCascaded(lhs, rhs, mapMode)$/;"	f
genutils#MarkActiveWindow	autoload/genutils.vim	/^function! genutils#MarkActiveWindow()$/;"	f
genutils#MoveCurLineToWinLine	autoload/genutils.vim	/^function! genutils#MoveCurLineToWinLine(n)$/;"	f
genutils#MoveCursorToLastInWinStack	autoload/genutils.vim	/^function! genutils#MoveCursorToLastInWinStack(dir)$/;"	f
genutils#MoveCursorToNextInWinStack	autoload/genutils.vim	/^function! genutils#MoveCursorToNextInWinStack(dir)$/;"	f
genutils#MoveCursorToWindow	autoload/genutils.vim	/^function! genutils#MoveCursorToWindow(winno)$/;"	f
genutils#NumberOfWindows	autoload/genutils.vim	/^function! genutils#NumberOfWindows()$/;"	f
genutils#OnMS	autoload/genutils.vim	/^function! genutils#OnMS()$/;"	f
genutils#OpenWinNoEa	autoload/genutils.vim	/^function! genutils#OpenWinNoEa(winOpenCmd)$/;"	f
genutils#OptClearBuffer	autoload/genutils.vim	/^function! genutils#OptClearBuffer()$/;"	f
genutils#PathIsAbsolute	autoload/genutils.vim	/^function! genutils#PathIsAbsolute(path)$/;"	f
genutils#PathIsFileNameOnly	autoload/genutils.vim	/^function! genutils#PathIsFileNameOnly(path)$/;"	f
genutils#PromptForElement	autoload/genutils.vim	/^function! genutils#PromptForElement(array, default, msg, skip, useDialog,$/;"	f
genutils#PutPersistentVar	autoload/genutils.vim	/^function! genutils#PutPersistentVar(pluginName, persistentVar, value)$/;"	f
genutils#QSort	autoload/genutils.vim	/^function! genutils#QSort(cmp, direction) range$/;"	f
genutils#QSort2	autoload/genutils.vim	/^function! genutils#QSort2(start, end, cmp, direction, accessor, swapper, context)$/;"	f
genutils#QuoteStr	autoload/genutils.vim	/^function! genutils#QuoteStr(str)$/;"	f
genutils#RelPathFromDir	autoload/genutils.vim	/^function! genutils#RelPathFromDir(srcDir, tgtFile)$/;"	f
genutils#RelPathFromFile	autoload/genutils.vim	/^function! genutils#RelPathFromFile(srcFile, tgtFile)$/;"	f
genutils#RemoveFromFCShellPre	autoload/genutils.vim	/^function! genutils#RemoveFromFCShellPre(funcName)$/;"	f
genutils#RemoveNotifyWindowClose	autoload/genutils.vim	/^function! genutils#RemoveNotifyWindowClose(windowTitle)$/;"	f
genutils#ResetHardPosition	autoload/genutils.vim	/^function! genutils#ResetHardPosition(id)$/;"	f
genutils#ResetHardPositionWithContext	autoload/genutils.vim	/^function! genutils#ResetHardPositionWithContext(id)$/;"	f
genutils#ResetSoftPosition	autoload/genutils.vim	/^function! genutils#ResetSoftPosition(id)$/;"	f
genutils#ResetWindowSettings	autoload/genutils.vim	/^function! genutils#ResetWindowSettings()$/;"	f
genutils#ResetWindowSettings2	autoload/genutils.vim	/^function! genutils#ResetWindowSettings2(id)$/;"	f
genutils#RestoreActiveWindow	autoload/genutils.vim	/^function! genutils#RestoreActiveWindow()$/;"	f
genutils#RestoreHardPosition	autoload/genutils.vim	/^function! genutils#RestoreHardPosition(id)$/;"	f
genutils#RestoreHardPositionWithContext	autoload/genutils.vim	/^function! genutils#RestoreHardPositionWithContext(id)$/;"	f
genutils#RestoreSoftPosition	autoload/genutils.vim	/^function! genutils#RestoreSoftPosition(id)$/;"	f
genutils#RestoreVisualSelection	autoload/genutils.vim	/^function! genutils#RestoreVisualSelection(id)$/;"	f
genutils#RestoreWindowSettings	autoload/genutils.vim	/^function! genutils#RestoreWindowSettings()$/;"	f
genutils#RestoreWindowSettings2	autoload/genutils.vim	/^function! genutils#RestoreWindowSettings2(id)$/;"	f
genutils#Roman2Decimal	autoload/genutils.vim	/^function! genutils#Roman2Decimal(str)$/;"	f
genutils#SaveHardPosition	autoload/genutils.vim	/^function! genutils#SaveHardPosition(id)$/;"	f
genutils#SaveHardPositionWithContext	autoload/genutils.vim	/^function! genutils#SaveHardPositionWithContext(id)$/;"	f
genutils#SaveSoftPosition	autoload/genutils.vim	/^function! genutils#SaveSoftPosition(id)$/;"	f
genutils#SaveVisualSelection	autoload/genutils.vim	/^function! genutils#SaveVisualSelection(id)$/;"	f
genutils#SaveWindowSettings	autoload/genutils.vim	/^function! genutils#SaveWindowSettings()$/;"	f
genutils#SaveWindowSettings2	autoload/genutils.vim	/^function! genutils#SaveWindowSettings2(id, overwrite)$/;"	f
genutils#SetupScratchBuffer	autoload/genutils.vim	/^function! genutils#SetupScratchBuffer()$/;"	f
genutils#ShiftWordInSpace	autoload/genutils.vim	/^function! genutils#ShiftWordInSpace(dir)$/;"	f
genutils#ShowLinesWithSyntax	autoload/genutils.vim	/^function! genutils#ShowLinesWithSyntax() range$/;"	f
genutils#SilentDelete	autoload/genutils.vim	/^function! genutils#SilentDelete(arg1, ...)$/;"	f
genutils#SilentSubstitute	autoload/genutils.vim	/^function! genutils#SilentSubstitute(pat, cmd)$/;"	f
genutils#UnEscape	autoload/genutils.vim	/^function! genutils#UnEscape(str, chars)$/;"	f
genutils#UserDirComplete2	autoload/genutils.vim	/^function! genutils#UserDirComplete2(ArgLead, CmdLine, CursorPos, ...)$/;"	f
genutils#UserFileComplete	autoload/genutils.vim	/^function! genutils#UserFileComplete(ArgLead, CmdLine, CursorPos, smartSlash,$/;"	f
genutils#UserFileComplete2	autoload/genutils.vim	/^function! genutils#UserFileComplete2(ArgLead, CmdLine, CursorPos, ...)$/;"	f
genutils#UserFileExpand	autoload/genutils.vim	/^function! genutils#UserFileExpand(fileArgs)$/;"	f
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSelectedBookmark	plugin/NERD_tree.vim	/^function! s:getSelectedBookmark()$/;"	f
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
getchar	plugin/surround.vim	/^function! s:getchar()$/;"	f
getopt	autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getpidfor	autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
getscript#GetLatestVimScripts	autoload/getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
gsub	autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
helperEdit	autoload/rails.vim	/^function! s:helperEdit(bang,cmd,...)$/;"	f
helperList	autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	autoload/rails.vim	/^function! s:helpermethods()$/;"	f
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initializerEdit	autoload/rails.vim	/^function! s:initializerEdit(bang,cmd,...)$/;"	f
initializerList	autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
inputreplacement	plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insertNewNode	plugin/NERD_tree.vim	/^function! s:insertNewNode()$/;"	f
integrationtestEdit	autoload/rails.vim	/^function! s:integrationtestEdit(bang,cmd,...)$/;"	f
integrationtestList	autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
invertrange	autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
javascriptEdit	autoload/rails.vim	/^function! s:javascriptEdit(bang,cmd,...)$/;"	f
javascriptList	autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
lastformat	autoload/rails.vim	/^function! s:lastformat()$/;"	f
lastmethod	autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	autoload/rails.vim	/^function! s:lastmethodline(...)$/;"	f
lastopeningline	autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,...)$/;"	f
lastrespondtoline	autoload/rails.vim	/^function! s:lastrespondtoline(...)$/;"	f
layoutEdit	autoload/rails.vim	/^function! s:layoutEdit(bang,cmd,...)$/;"	f
layoutList	autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
leader	plugin/dbext.vim	/^        let leader = g:mapleader$/;"	v
leader	plugin/dbext.vim	/^    let leader = '\\'$/;"	v
leader	plugin/dbext.vim	/^    let leader = escape(leader, '\\')$/;"	v
lib#CursorIsInsidePhpMarkup	autoload/lib.vim	/^function! lib#CursorIsInsidePhpMarkup()$/;"	f
libEdit	autoload/rails.vim	/^function! s:libEdit(bang,cmd,...)$/;"	f
libList	autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
linepeak	autoload/rails.vim	/^function! s:linepeak()$/;"	f
loaded_genutils	plugin/genutils.vim	/^let loaded_genutils = 205$/;"	v
loaded_matchit	plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
makewithruby	autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
matchcursor	autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
menuBufEnter	plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menuRoot	plugin/dbext.vim	/^        let menuRoot = '&Plugin.&dbext'$/;"	v
menuRoot	plugin/dbext.vim	/^        let menuRoot = '&dbext'$/;"	v
menuRoot	plugin/dbext.vim	/^        let menuRoot = 'dbext'$/;"	v
menucmd	plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
metalEdit	autoload/rails.vim	/^function! s:metalEdit(bang,cmd,...)$/;"	f
metalList	autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	autoload/rails.vim	/^function! s:migrationEdit(bang,cmd,...)$/;"	f
migrationList	autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	autoload/rails.vim	/^function! s:migspc(line)$/;"	f
mkeep	autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
model	autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	autoload/rails.vim	/^function! s:modelEdit(bang,cmd,...)$/;"	f
modelList	autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
observerEdit	autoload/rails.vim	/^function! s:observerEdit(bang,cmd,...)$/;"	f
observerList	autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
opfunc	plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
opts	autoload/rails.vim	/^function! s:opts()$/;"	f
pathjoin	autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
pathsplit	autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
perdirvimrc_loaded	additional_scripts/perdirvimrc.vim	/^let perdirvimrc_loaded = 1$/;"	v
php_baselib	ftplugin/php.vim	/^let php_baselib = 1$/;"	v
php_folding	ftplugin/php.vim	/^let php_folding = 1$/;"	v
php_htmlInStrings	ftplugin/php.vim	/^let php_htmlInStrings = 1$/;"	v
php_noindent_switch	indent/php.vim	/^let php_noindent_switch = 0    " set this to '1' to not try to indent switch\/case statements$/;"	v
pluginEdit	autoload/rails.vim	/^function! s:pluginEdit(bang,cmd,...)$/;"	f
pluginList	autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pop_command	autoload/rails.vim	/^function! s:pop_command()$/;"	f
prephelp	autoload/rails.vim	/^function! s:prephelp()$/;"	f
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
process	plugin/surround.vim	/^function! s:process(string)$/;"	f
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
push_chdir	autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
rails#app	autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#cache_clear	autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#underscore	autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
railsPluginAuto	autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
readfile	autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
redraw	plugin/surround.vim	/^function! s:redraw()$/;"	f
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
reindent	plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relglob	autoload/rails.vim	/^function! s:relglob(...)$/;"	f
renameCurrent	plugin/NERD_tree.vim	/^function! s:renameCurrent()$/;"	f
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repeat	autoload/repeat.vim	/^function! s:repeat(count)$/;"	f
repeat	plugin/surround.vim	/^function! s:repeat(str,count)$/;"	f
repeat#set	autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeatPlugin	autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
resetomnicomplete	autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rquote	autoload/rails.vim	/^function! s:rquote(str)$/;"	f
s	plugin/surround.vim	/^            vmap  s    <Plug>Vsurround$/;"	m
s:Bookmark	plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:C	autoload/genutils.vim	/^let s:C = 100$/;"	v
s:D	autoload/genutils.vim	/^let s:D = 500$/;"	v
s:DECHOMSG	plugin/Decho.vim	/^ let s:DECHOMSG = 2$/;"	v
s:DECHOREM	plugin/Decho.vim	/^ let s:DECHOREM = 4$/;"	v
s:DECHOTAB	plugin/Decho.vim	/^ let s:DECHOTAB = 5$/;"	v
s:DECHOVAR	plugin/Decho.vim	/^ let s:DECHOVAR = 3$/;"	v
s:DECHOWIN	plugin/Decho.vim	/^ let s:DECHOWIN = 1$/;"	v
s:I	autoload/genutils.vim	/^let s:I = 1$/;"	v
s:L	autoload/genutils.vim	/^let s:L = 50$/;"	v
s:M	autoload/genutils.vim	/^let s:M = 1000$/;"	v
s:NERDTreeBufName	plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	plugin/NERD_tree.vim	/^let s:NERD_tree_version = '3.1.1'$/;"	v
s:Path	plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Tlist_Skip_Refresh	plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:UNPROTECTED_CHAR_PRFX	autoload/genutils.vim	/^let s:UNPROTECTED_CHAR_PRFX = '\\%(\\%([^\\\\]\\|^\\)\\\\\\%(\\\\\\\\\\)*\\)\\@<!' " Doesn't eat slashes.$/;"	v
s:V	autoload/genutils.vim	/^let s:V = 5$/;"	v
s:X	autoload/genutils.vim	/^let s:X = 10$/;"	v
s:app_prototype	autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:autoinstall	autoload/getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	autoload/getscript.vim	/^let s:autoinstall= ""$/;"	v
s:cache_prototype	autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:cpo_save	autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/php.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:dbext_buffer_last	autoload/dbext.vim	/^let s:dbext_buffer_last       = -1$/;"	v
s:dbext_buffer_last_winnr	autoload/dbext.vim	/^let s:dbext_buffer_last_winnr = -1$/;"	v
s:dbext_buffers_with_dict_files	autoload/dbext.vim	/^let s:dbext_buffers_with_dict_files = []$/;"	v
s:dbext_prev_sql	autoload/dbext.vim	/^let s:dbext_prev_sql     = ''$/;"	v
s:dbext_result_count	autoload/dbext.vim	/^let s:dbext_result_count = 0$/;"	v
s:dbext_tempfile	autoload/dbext.vim	/^let s:dbext_tempfile = fnamemodify(tempname(), ":h").$/;"	v
s:decho_depth	plugin/Decho.vim	/^ let s:decho_depth  = 0$/;"	v
s:defFCShellInstalled	autoload/genutils.vim	/^let s:defFCShellInstalled = 0$/;"	v
s:did_snip_helper	ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:dir_separator	additional_scripts/perdirvimrc.vim	/^	let s:dir_separator = '\/'$/;"	v
s:dir_separator	additional_scripts/perdirvimrc.vim	/^	let s:dir_separator = '\\'$/;"	v
s:dirlist	additional_scripts/perdirvimrc.vim	/^let s:dirlist = split(getcwd(), s:dir_separator) $/;"	v
s:dotvim	autoload/getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	autoload/getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:efm	autoload/rails.vim	/^let s:efm='%D(in\\ %f),'$/;"	v
s:efm	autoload/rails.vim	/^let s:efm=s:efm$/;"	v
s:efm_backtrace	autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:emapleader	plugin/AlignMapsPlugin.vim	/^  let s:emapleader= escape(s:mapleader,'\\ ')$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:ext	plugin/cuteErrorMarker.vim	/^    let s:ext = '.ico'$/;"	v
s:ext	plugin/cuteErrorMarker.vim	/^    let s:ext = '.png'$/;"	v
s:fcShellPreFuncs	autoload/genutils.vim	/^  let s:fcShellPreFuncs = {}$/;"	v
s:fg_hlname	syntax/Decho.vim	/^  let s:fg_hlname= synIDattr(synIDtrans(s:id_hlname),"fg")$/;"	v
s:file	autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:filename	additional_scripts/perdirvimrc.vim	/^    let s:filename = join(s:subdir, s:dir_separator).s:dir_separator.s:vimrc[s:k]$/;"	v
s:firstmenu	plugin/AlignMapsPlugin.vim	/^ let s:firstmenu= 1$/;"	v
s:id_hlname	syntax/Decho.vim	/^  let s:id_hlname= hlID("Warning")$/;"	v
s:j	additional_scripts/perdirvimrc.vim	/^  let s:j = s:j + 1$/;"	v
s:j	additional_scripts/perdirvimrc.vim	/^let s:j = 0$/;"	v
s:k	additional_scripts/perdirvimrc.vim	/^    let s:k = s:k + 1$/;"	v
s:k	additional_scripts/perdirvimrc.vim	/^  let s:k = 0$/;"	v
s:keepcpo	autoload/Align.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	autoload/AlignMaps.vim	/^let s:keepcpo         = &cpo$/;"	v
s:keepcpo	autoload/ZoomWin.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	autoload/getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	plugin/AlignMapsPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	plugin/AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	plugin/Decho.vim	/^let s:keepcpo      = &cpo$/;"	v
s:keepcpo	plugin/ZoomWinPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	plugin/cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	plugin/getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:last_mps	plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:makeArgumentList	autoload/genutils.vim	/^let s:makeArgumentList = ''$/;"	v
s:makeArgumentString	autoload/genutils.vim	/^let s:makeArgumentString = ''$/;"	v
s:mapleader	plugin/AlignMapsPlugin.vim	/^  let s:mapleader = exists("g:mapleader")? g:mapleader : '\\'$/;"	v
s:menu_char_prefix	plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modifier	plugin/cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	plugin/cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:mySNR	autoload/genutils.vim	/^let s:mySNR = ''$/;"	v
s:next_buffer_number	plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:notifyWindow	autoload/genutils.vim	/^let s:notifyWindow = {}$/;"	v
s:notslash	plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:old_cpo	plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:os_slash	plugin/NERD_tree.vim	/^    let s:os_slash = '\\'$/;"	v
s:os_slash	plugin/NERD_tree.vim	/^let s:os_slash = '\/'$/;"	v
s:path	plugin/cuteErrorMarker.vim	/^let s:path = globpath( &rtp, 'signs\/err' . s:ext )$/;"	v
s:running_windows	plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	autoload/dbext_dbi.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	autoload/genutils.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:selection	autoload/genutils.vim	/^let s:selection = -1$/;"	v
s:sid	autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:signCount	plugin/cuteErrorMarker.vim	/^let s:signCount = 0$/;"	v
s:signId	plugin/cuteErrorMarker.vim	/^let s:signId = 33000$/;"	v
s:snippets	plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:spacer	autoload/genutils.vim	/^let s:spacer= "                                                               ".$/;"	v
s:subdir	additional_scripts/perdirvimrc.vim	/^let s:subdir = []$/;"	v
s:tlist_app_name	plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:view_types	autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:vimrc	additional_scripts/perdirvimrc.vim	/^	let s:vimrc = ['.vim', '.vimrc', '_vimrc', '_vim']$/;"	v
s:vimrc	additional_scripts/perdirvimrc.vim	/^	let s:vimrc = ['_vimrc', '_vim', '.vim', '.vimrc']$/;"	v
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
scanlineforuri	autoload/rails.vim	/^function! s:scanlineforuri(lnum)$/;"	f
scrub	autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
selectiveexpand	autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
setopt	autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
showFileSystemMenu	plugin/NERD_tree.vim	/^function! s:showFileSystemMenu()$/;"	f
sname	autoload/rails.vim	/^function! s:sname()$/;"	f
snipMate#expandSnip	autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
specEdit	autoload/rails.vim	/^function! s:specEdit(bang,cmd,...)$/;"	f
specList	autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
startswith	autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stylesheetEdit	autoload/rails.vim	/^function! s:stylesheetEdit(bang,cmd,...)$/;"	f
stylesheetList	autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
taskEdit	autoload/rails.vim	/^function! s:taskEdit(bang,cmd,...)$/;"	f
taskList	autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
try	autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
u	autoload/repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unittestEdit	autoload/rails.vim	/^function! s:unittestEdit(bang,cmd,...)$/;"	f
unittestList	autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
viewEdit	autoload/rails.vim	/^function! s:viewEdit(bang,cmd,...)$/;"	f
viewList	autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	autoload/rails.vim	/^function! s:viewspattern()$/;"	f
warn	autoload/rails.vim	/^function! s:warn(str)$/;"	f
wrap	autoload/repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
yS	plugin/surround.vim	/^    nmap          yS   <Plug>YSurround$/;"	m
ySS	plugin/surround.vim	/^    nmap          ySS  <Plug>YSsurround$/;"	m
ySs	plugin/surround.vim	/^    nmap          ySs  <Plug>YSsurround$/;"	m
ys	plugin/surround.vim	/^    nmap          ys   <Plug>Ysurround$/;"	m
yss	plugin/surround.vim	/^    nmap          yss  <Plug>Yssurround$/;"	m
