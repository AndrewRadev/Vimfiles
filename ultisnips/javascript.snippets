snippet {,
{
	${1}
},
endsnippet

snippet fun
function ${1:function_name}(${2:argument}) {
	${3}
}
endsnippet

snippet f
function(${1}) {${2}};
endsnippet

snippet ff
function(${1}) {
	${2}
}
endsnippet

snippet ff;
function(${1}) {
	${2}
};
endsnippet

snippet ff)
function(${1}) {
	${2}
});
endsnippet

snippet ff,
function(${1}) {
	${2}
},
endsnippet

snippet if
if (${1:true}) {
	${2}
}
endsnippet

snippet ife
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet

snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet switch
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
# case
endsnippet

snippet case
case '${1:case}':
	${2:// code}
	break;
${3}
endsnippet

snippet wh
while (${1:/* condition */}) {
	${2:/* code */}
}
# do...while
endsnippet

snippet do
do {
	${2:/* code */}
} while (${1:/* condition */});
endsnippet

snippet :f
${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet

snippet timeout
setTimeout(function() {
	${2}
}, ${1:1000});
endsnippet

snippet promise
new Promise(function(resolve, reject) {
	${1}
});
endsnippet

snippet usestate
const [${1}, set`!p snip.rv = t[1][:1].upper() + t[1][1:]`] = React.useState(${2});
endsnippet
