snippet macro
macro_rules! ${1:frobble} {
	(${2}) => {

	}
}
endsnippet

snippet fn
fn ${1:function_name}(${2}) -> Type {
	${3}
}
endsnippet

snippet impl
impl ${1:StructName} {
	fn new(${2}) -> Self {
		$1 { ${3} }
	}
}
endsnippet

snippet implfor
impl ${1:TraitName} for ${2:TypeName} {

}
endsnippet

snippet implfrom
impl From<${1:Source}> for ${2:Output} {
	fn from(source: $1) -> Self {
		${3}
	}
}
endsnippet

snippet impldisplay
impl fmt::Display for ${1:Type} {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_fmt(format_args!("{}", ${2:self.prop}))
	}
}
endsnippet

snippet impliter
impl Iterator for ${1:SomeType} {
	type Item = ${2:SomeItem};

	fn next(&mut self) -> Option<Self::Item> {

	}
}
endsnippet

snippet implwrite
impl Write for ${1:MockIO} {
	fn write(&mut self, buf: &[u8]) -> io::Result<usize> {

	}

	fn flush(&mut self) -> io::Result<()> {

	}
}
endsnippet

snippet implderef
impl Deref for ${1:Container} {
	type Target = ${2:Target};

	fn deref(&self) -> &Self::Target {
		&self.${3:property}
	}
}
endsnippet

snippet test
#[test]
fn test_${1:something}() {
	${2}
}
endsnippet

snippet modtest
#[cfg(test)]
mod tests {
	use super::*;

	${1}
}
endsnippet

snippet main
fn main() {
	${1}
}
endsnippet

snippet p
println!("${1:text}", ${2:param});
endsnippet

snippet pp
println!("{:?}", ${1:something});
endsnippet

snippet dbg
dbg!(&${1:var_name});
endsnippet

snippet der
#[derive(${1:Debug})]
endsnippet

snippet matchsome
match $1 {
	Some(value) => ${2:value},
	None => ${3:return},
};
endsnippet

snippet matchok
match $1 {
	Ok(value) => ${2:value},
	Err(e) => ${3:return Err(e)},
};
endsnippet

snippet eq
assert_eq!(${1:left}, ${2:right});
endsnippet
