# Relations
snippet bt
	belongs_to ${1}
snippet hm
	has_many ${1}
snippet habtm
	has_and_belongs_to_many ${1}
# Validations
snippet vpo
	validates_presence_of ${1}
snippet vuo
	validates_uniqueness_of ${1}
snippet vno
	validates_numericality_of ${1}
snippet vfo
	validates_format_of ${1}
# Shoulda macros
snippet isbt
	it { should belong_to(${1}) }
snippet ishm
	it { should have_many(${1}) }
snippet ishabtm
	it { should have_and_belong_to_many(${1}) }
snippet isvpo
	it { should validate_presence_of(${1}) }
snippet isvuo
	it { should validate_uniqueness_of(${1}) }
snippet isvno
	it { should validate_numericality_of(${1}) }
snippet ishaf
	it { should have_attached_file(${1}) }
# Migrations
snippet addcol
	add_column :${1:table}, :${2:column}, :${3:type}
snippet dropcol
	remove_column :${1:table}, :${2:column}
snippet join
	create_table :$1s_$2s, :id => false do |t|
		t.references :${1:foo}, :${2:bar}
	end
# Factory girl
snippet facdef
	Factory.define(:${1:model}) do |${2:m}|
		${3}
	end
snippet fac
	Factory(:${1:model})
snippet facb
	Factory.build(:${1:model})
snippet faca
	Factory.attributes_for(:${1:model})
# Helpers
snippet lt
	link_to "${1:Label}", ${2:home_path}
snippet lt=
	<%= link_to "${1:Label}", ${2:home_path} %>
snippet ltd
	<% link_to ${1:home_path} do %>
		${2}
	<% end %>
snippet cf
	<% content_for(:${1:head}) do %>
		${2}
	<% end %>
snippet part
	<%= render :partial => "${1}"${2} %>
# Controllers
snippet bf
	before_filter :${1:method}
snippet rt
	respond_to do |format|
		format.html
		format.js
	end
# Basic REST
snippet defindex
	def index
		@${1:model} = ${2:Model}.all
	end
snippet defshow
	def show
		@${1:model} = ${2:Model}.find(params[:id])
	end
snippet defnew
	def new
		@${1:model} = ${2:Model}.new
	end
snippet defcreate
	def create
		@${1:model} = ${2:Model}.new(params[:$1])

		if @$1.save
			flash[:notice] = '$2 was successfully created.'
			redirect_to @$1
		else
			render :action => 'new'
		end
	end
snippet defedit
	def edit
		@${1:model} = ${2:Model}.find(params[:id])
	end
snippet defupdate
	def update
		@${1:model} = ${2:Model}.find(params[:id])

		if @$1.update_attributes(params[:$1])
			flash[:notice] = '$2 was successfully updated.'
			redirect_to @$1
		else
			render :action => 'edit'
		end
	end
snippet defdestroy
	def destroy
		@${1:model} = ${2:Model}.find(params[:id])
		@$1.destroy

		redirect_to $1s_url
	end
# Basic REST specs
snippet desshow
	describe "show" do
		it "should render show template" do
			get :show, :id => Factory(:${1:model})
			response.should render_template(:show)
		end
	end
snippet desnew
	describe "new" do
		it "should render new template" do
			get :new
			response.should render_template(:new)
		end
	end
snippet descreate
	describe "create" do
		it "should render new template when ${1:model} is invalid" do
			${2:Model}.any_instance.stubs(:valid?).returns(false)
			post :create
			response.should render_template(:new)
		end

		it "should redirect to created $1 when it is valid" do
			post :create, :$1 => Factory.build(:$1).attributes
			response.should redirect_to($1_path assigns[:$1])
		end

		it "should create new $1" do
			proc do
				post :create, :$1 => Factory.build(:$1).attributes
			end.should change($2, :count).by(1)
		end
	end
snippet desedit
	describe "edit" do
		it "should render edit template" do
			get :edit, :id => Factory(:${1:model})
			response.should render_template(:edit)
		end
	end
snippet desupdate
	describe "update" do
		before(:each) do
			@${1:model} = Factory(:$1)
		end

		it "should render edit template when $1 is invalid" do
			${2:Model}.any_instance.stubs(:valid?).returns(false)
			put :update, :id => @$1, :$1 => @$1.attributes
			response.should render_template(:edit)
		end

		it "should redirect when $1 is valid" do
			put :update, :id => @$1, :$1 => @$1.attributes
			response.should redirect_to($1_url assigns[:$1])
		end
	end
snippet desdestroy
	describe "destroy" do
		it "should destroy the given ${1:model}" do
			@$1 = Factory(:$1)
			delete :destroy, :id => @$1
			${2:Model}.exists?(@$1.id).should be_false
		end
	end
# Other skeleton tests
snippet basicjs
	it "should be accessible by javascript" do
		${1}, :format => :js
		response.should be_success
	end
