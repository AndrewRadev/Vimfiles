# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet class
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};
# C snippets, with some modifications:
# main()
snippet main
	int main(int argc, const char *argv[]) {
		${1}

		return 0;
	}
# #include <...>
snippet inc
	#include <${1:cstdlib}>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED'))`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet else
	else {
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3}) {
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:new_type} ${2:old_type};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
snippet debug
	cout << "debug" << endl;
snippet .
	[${1}]${2}
