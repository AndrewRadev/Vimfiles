snippet -
	<?php ${1} ?>
snippet =
	<?php echo ${1} ?>
snippet debug
	echo "<pre>";
	print_r($${1:'var'});
	echo "</pre>";
	die;
snippet inc
	include '${1:file}';${2}
snippet inc.
	include dirname(__FILE__).'${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet inc1.
	include_once dirname(__FILE__).'${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req.
	require dirname(__FILE__).'${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
snippet req1.
	require_once dirname(__FILE__).'${1:file}';${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
snippet cla
	/**
	 * ${2}
	 **/
	class ${1:ClassName}
	{
		function ${3:__construct}(${4:argument}) {
			${5:// code...}
		}
	}
snippet if
	if (${1:/* condition */})
	{
		${2:// code...}
	}
snippet if=
	<?php if (${1:/* condition */}): ?>
		${2:<!-- code -->}
	<?php endif ?>
snippet ife
	if (${1:/* condition */})
	{
		${2:// code...}
	}
	else
	{
		${3:// code...}
	}
	${4}
snippet ife=
	<?php if (${1:/* condition */}): ?>
		${2:<!-- code -->}
	<?php else: ?>
		${3:<!-- code -->}
	<?php endif; ?>
snippet e
	else
	{
		${1:// code...}
	}
snippet eif
	elseif (${1:/* condition */})
	{
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet each
	foreach ($${1:variable} as $${2:value})
	{
		${3:// code...}
	}${4}
snippet each=
	<?php foreach ($${1:variable} as $${2:key}): ?>
		<?php echo $$2 ?>
	<?php endforeach ?>${4}
snippet fun
	/**
	 * ${4:@todo Write description}
	 */
	${1:public }function ${2:FunctionName}(${3})
	{
		${5:// code...}
	}
snippet .
	['${1}']${2}
snippet get
	$_GET['${1}']
snippet post
	$_POST['${1}']
snippet request
	$_REQUEST['${1}']
snippet tos
	public function __toString()
	{
		return ${1}
	}
