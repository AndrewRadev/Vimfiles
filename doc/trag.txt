*trag.txt*          A slightly language-aware alternative to grep
                    Author: Tom Link, micathom at gmail com

You can think of this plugin either as some kind of ad-hoc 
tags/cescope-like solution or as a project-oriented and slightly 
programming-language-aware alternative to grep that should support poor 
dynamic programmers with refactoring. Like grep it scans files only as 
needed and doesn't build a database, which is ok for smaller projects 
and fast hard disks. It's more flexible and easier to configure (vim 
only, no external program required) than tags/cescope. Apart from the 
basic grep-like functionality, it can be used to find locations where a 
variable is defined, where it is assigned to another variable, where a 
method is called and stuff like that. At least that's the idea. The 
plugin hasn't reached the point yet to be 100% useful.


Usage~

First, define which files belong to your project. Most likely your 
project's source files are already registered in your tags files, which 
will be used by default. So, if you use tags, there is nothing more you 
need to do. Alternatively you can set the variable [wbg]:trag_files to a 
list of files that will be used instead. (Setting this variable will 
prevent the use of tags.)

Secondly, perform certain operations on these files, like:

    - Select a file to edit (using :TRagfile)
    - Scan files for an expression (using :TRag, :TRagsearch, or 
      :TRaggrep): You can restrict searches to certain "kinds" like only 
      variable definitions or only function calls.


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball (vimscript 
#1502) installed.

This script requires tlib (vimscript #1863) to be installed.

Suggested maps (best set in ~/vimfiles/after/plugin/trag.vim): >

    noremap <Leader>r. :TRag * 
    noremap <Leader>r- :TRagfile<cr>
    noremap <silent> <Leader>r# :TRag #w <c-r>=trag#CWord()<cr><cr>
    for c in keys(g:trag_kinds)
        if len(c) == 1
            exec "nnoremap <Leader>r". c .' :TRag #'. c .' <c-r>=trag#CWord()<cr><cr>'
            exec "vnoremap <Leader>r". c .' y<esc>:TRag #'. c .' <c-r>"<cr>'
        endif
    endfor


-----------------------------------------------------------------------
                                                    *trag-kinds*
Kinds~

Certain commands take a "kind" as argument. A "kind" in the context of 
trag means a way how the expression is interpreted and (in the future) 
how the lines are scanned. The meaning of the letter is specific for a 
certain filetype. In general, the following list should serve as a 
common base:

    c ... class definitions
    d ... function/method definitions
    f ... function calls
    i ... ignored lines, comments etc.
    l ... variable definition
    m ... module definitions
    r ... variable assignment (e.g. "= WORD")
    w ... find as word
    x ... subclasses

    fuzzy ... use a typo-tolerant regexp
    todo  ... TODO markers etc.

Modifiers:
    # ... escape a literal expression as regexp (place it somewhere in the 
          kinds argument)

Negation: -, ! ... negate/skip uninteresting lines.

Positive (must match) and negative (must not match) patterns are joined 
with "-" or "!". Positive and negative conditions must both be 
satisfied. The positive regexp determines the speed of the operation. 
I.e. trag first searches for matching lines and only then decides 
whether to skip "bad" ones.

    POSITIVE1,POSITIVE2a.POSITIVE2b...-NEGATIVE...

Note: If you use negations, you should also give a positive kind (use . 
as fallback). The use of negations causes trag to use it's own grep 
procedure which is slightly slower than the standard vimgrep command.

EXPERIMENTAL: Kinds can be joined as comma-separated list (OR) of 
period-seprated list (CONTAIN). This may be unintuitive but that's the 
way it is. Order in CONTAIN-patterns matters, i.e. w.i doesn't make too 
much sense (a word that CONTAINs a comment, which could only be the word 
itself) but i.w does (a comment that CONTAINs a word, which is quite 
possible).

The way this has done has changed from version 0.1 to 0.2 with the 
effect that the current solution is less well tested. If you stumble 
over wrong search result, please tell me about the problem. Most likely 
it's a problem with the regexp not being properly updated.

Example:
    i   ... comment/ignored text that CONTAINs a word
    i.w ... comment/ignored text that CONTAINs a word
    l,r ... a word either on the left OR right hand side of an 
            assignment
    w-i ... word that is NOT contained in a comment
    w-i,l,r ... word but NOT in assignments (left OR right hand) OR in 
            comments

More examples:
    File contents: >
        #1 function Foo() {}
        #2 function FooBar() {}
        #3 let x = FooBar()
        #4 let x = Foo()
<
    :TRag * Foo
    => Find "Foo": 1-4

    :TRag w Foo
    => Find the __w__ords "Foo": 1, 4

    :TRag d Foo
    => Find __d__efinitions of "Foo": 1, 2

    :TRag d.w Foo
    => Find __d__efinitions of the __w__ord "Foo": 1

    :TRag f Foo
    => Find (__f__unction) calls of "Foo": 3, 4

    :TRag f.w Foo
    => Find (__f__unction) calls of the __w__ord "Foo": 4


Not every kind is defined for every filetype. Currenty, support for 
the following filetype(s) is somewhat above average:
    - ruby
    - vim

Note: I'd appreciate if you sent me sophisticated kind definitions for 
more filetypes so that I can include them in future releases.

A kind is best defined using the |:TRagDefKind| command.
Take a look at ../plugin/trag.vim to find out more.

If you want to run a command without kinds, use "*" or "." as 
argument, whatever if more convenient to type on your keyboard.

See |trag#Grep()| for details of how to use this.


========================================================================
Contents~

        g:trag_search_mode ....... |g:trag_search_mode|
        g:trag_get_files ......... |g:trag_get_files|
        g:trag_get_files_java .... |g:trag_get_files_java|
        g:trag_get_files_c ....... |g:trag_get_files_c|
        g:trag_get_files_cpp ..... |g:trag_get_files_cpp|
        :TRagDefKind ............. |:TRagDefKind|
        :TRagKeyword ............. |:TRagKeyword|
        :TRagDefFiletype ......... |:TRagDefFiletype|
        :TRag .................... |:TRag|
        :Trag .................... |:Trag|
        :TRagfile ................ |:TRagfile|
        :Tragfile ................ |:Tragfile|
        :TRagcw .................. |:TRagcw|
        :Tragcw .................. |:Tragcw|
        :Traglw .................. |:Traglw|
        :TRagsearch .............. |:TRagsearch|
        :Tragsearch .............. |:Tragsearch|
        :TRaggrep ................ |:TRaggrep|
        :Traggrep ................ |:Traggrep|
        g:trag_files ............. |g:trag_files|
        g:trag_glob .............. |g:trag_glob|
        g:trag_project_ruby ...... |g:trag_project_ruby|
        g:trag_project ........... |g:trag_project|
        g:trag_git ............... |g:trag_git|
        :TRagsetfiles ............ |:TRagsetfiles|
        :TRagaddfiles ............ |:TRagaddfiles|
        :TRagclearfiles .......... |:TRagclearfiles|
        :TRagGitFiles ............ |:TRagGitFiles|
        trag#ClearFiles .......... |trag#ClearFiles()|
        trag#AddFiles ............ |trag#AddFiles()|
        trag#GetProjectFiles ..... |trag#GetProjectFiles()|
        trag#GetGitFiles ......... |trag#GetGitFiles()|
        trag#SetGitFiles ......... |trag#SetGitFiles()|
        trag#SetFiles ............ |trag#SetFiles()|
        trag#FindGitRepos ........ |trag#FindGitRepos()|
        trag#Edit ................ |trag#Edit()|
        trag#Grep ................ |trag#Grep()|
        trag#ClearCachedRx ....... |trag#ClearCachedRx()|
        trag#QuickList ........... |trag#QuickList()|
        trag#LocList ............. |trag#LocList()|
        trag#AgentEditQFE ........ |trag#AgentEditQFE()|
        trag#AgentPreviewQFE ..... |trag#AgentPreviewQFE()|
        trag#AgentGotoQFE ........ |trag#AgentGotoQFE()|
        trag#AgentWithSelected ... |trag#AgentWithSelected()|
        trag#RunCmdOnSelected .... |trag#RunCmdOnSelected()|
        trag#AgentSplitBuffer .... |trag#AgentSplitBuffer()|
        trag#AgentTabBuffer ...... |trag#AgentTabBuffer()|
        trag#AgentVSplitBuffer ... |trag#AgentVSplitBuffer()|
        trag#AgentRefactor ....... |trag#AgentRefactor()|
        trag#CWord ............... |trag#CWord()|
        trag#RefactorRename ...... |trag#RefactorRename()|
        trag#SetFollowCursor ..... |trag#SetFollowCursor()|


========================================================================
plugin/trag.vim~

                                                    *g:trag_search_mode*
g:trag_search_mode             (default: 2)
    0 ... use the built-in search.
    1 ... use vimgrep.
    2 ... use vimgrep but set 'ei' to all; this means special file 
          encodings won't be detected
    Please not, this is only in effect with simple searches (as for 0.3 
    all searches are simple). For more complex multi-line patterns, the 
    built-in search will be used (some day in the future).

                                                    *g:trag_get_files*
g:trag_get_files               (default: 'split(glob("*"), "\n")')
    If no project files are defined, evaluate this expression as 
    fallback-strategy.

                                                    *g:trag_get_files_java*
g:trag_get_files_java          (default: 'split(glob("**/*.java"), "\n")')

                                                    *g:trag_get_files_c*
g:trag_get_files_c             (default: 'split(glob("**/*.[ch]"), "\n")')

                                                    *g:trag_get_files_cpp*
g:trag_get_files_cpp           (default: 'split(glob("**/*.[ch]"), "\n")')

                                                    *:TRagDefKind*
:TRagDefKind KIND FILETYPE /REGEXP_FORMAT/
    The regexp argument is no real regexp but a format string. % thus have 
    to be escaped with % (see |printf()| for details). The REGEXP_FORMAT 
    should contain at least one %s.
    Examples: >
      TRagDefKind v * /\C\<%s\>\s*=[^=~<>]/
      TRagDefKind v ruby /\C\<%s\>\(\s*,\s*[[:alnum:]_@$]\+\s*\)*\s*=[^=~<>]/
<

                                                    *:TRagKeyword*
TRagKeyword FILETYPE KEYWORD_CHARS
    Override 'iskeyword' for a certain filetype. See also |trag#CWord()|.

                                                    *:TRagDefFiletype*
TRagDefFiletype FILETYPE EXTENSION ... FILENAME ...
    In order to recognize files based on their extension, you have to 
    declare filetypes first.
    If a file has no extension, the whole filename is used.
    Examples: >
      TRagDefFiletype html html htm xhtml
<

                                                    *:TRag*
:TRag[!] KIND [REGEXP]
    Run |:TRagsearch| and instantly display the result with |:TRagcw|.
    See |trag#Grep()| for help on the arguments.
    If the kind rx doesn't contain %s (e.g. todo), you can skip the 
    regexp.
    
    Examples: >
        " Find any matches
        TRag . foo
    
        " Find variable definitions (word on the left-hand): foo = 1
        TRag l foo
    
        " Find variable __or__ function/method definitions
        TRag d,l foo
    
        " Find function calls like: foo(a, b)
        TRag f foo
    
        " Find TODO markers
        TRag todo
<

                                                    *:Trag*
:Trag

                                                    *:TRagfile*
:TRagfile
    Edit a file registered in your tag files.

                                                    *:Tragfile*
:Tragfile

                                                    *:TRagcw*
:TRagcw
    Display a quick fix list using |tlib#input#ListD()|.

                                                    *:Tragcw*
:Tragcw

                                                    *:Traglw*
:Traglw
    Display a |location-list| using |tlib#input#ListD()|.

                                                    *:TRagsearch*
:TRagsearch[!] KIND REGEXP
    Scan the files registered in your tag files for REGEXP. Generate a 
    quickfix list. With [!], append to the given list. The quickfix list 
    can be viewed with commands like |:cw| or |:TRagcw|.
    
    The REGEXP has to match a single line. This uses |readfile()| and the 
    scans the lines. This is an alternative to |:vimgrep|.
    If you choose your identifiers wisely, this should guide you well 
    through your sources.
    See |trag#Grep()| for help on the arguments.

                                                    *:Tragsearch*
:Tragsearch

                                                    *:TRaggrep*
:TRaggrep REGEXP [GLOBPATTERN]
    A 99%-replacement for grep. The glob pattern is optional.
    
    Example: >
      :TRaggrep foo *.vim
      :TRaggrep bar
<

                                                    *:Traggrep*
:Traggrep


The following variables provide alternatives to collecting 
your project's file list on the basis of you tags files.

These variables are tested in the order as listed here. If the value 
of a variable is non-empty, this one will be used instead of the other 
methods.

The tags file is used as a last ressort.

                                                    *g:trag_files*
g:trag_files                   (default: [])
    1. A list of files. Can be buffer local.

                                                    *g:trag_glob*
g:trag_glob                    (default: '')
    2. A glob pattern -- this should be an absolute path and may contain ** 
    (see |glob()| and |wildcards|). Can be buffer local.

                                                    *g:trag_project_ruby*
g:trag_project_ruby            (default: 'Manifest.txt')
    3. Filetype-specific project files.

                                                    *g:trag_project*
g:trag_project                 (default: '')
    4. The name of a file containing the projects file list. This file could be 
    generated via make. Can be buffer local.

                                                    *g:trag_git*
g:trag_git                     (default: '')
    5. The name of a git repository that includes all files of interest. 
    If the value is "*", trag will search from the current directory 
    (|getcwd()|) upwards for a .git directory.
    If the value is "finddir", use |finddir()| to find a .git directory.
    Can be buffer local.

                                                    *:TRagsetfiles*
:TRagsetfiles [FILELIST]
    The file list is set only once per buffer. If the list of the project 
    files has changed, you have to run this command on order to reset the 
    per-buffer list.
    
    If no filelist is given, collect the files in your tags files.
    
    Examples: >
      :TRagsetfiles
      :TRagsetfiles split(glob('foo*.txt'), '\n')
<

                                                    *:TRagaddfiles*
:TRagaddfiles FILELIST
    Add more files to the project list.

                                                    *:TRagclearfiles*
:TRagclearfiles
    Remove any files from the project list.

                                                    *:TRagGitFiles*
:TRagGitFiles GIT_REPOS


========================================================================
autoload/trag.vim~

                                                    *trag#ClearFiles()*
trag#ClearFiles()

                                                    *trag#AddFiles()*
trag#AddFiles(files)

                                                    *trag#GetProjectFiles()*
trag#GetProjectFiles(manifest)

                                                    *trag#GetGitFiles()*
trag#GetGitFiles(repos)

                                                    *trag#SetGitFiles()*
trag#SetGitFiles(repos)
    Set the files list from the files included in a given git repository.

                                                    *trag#SetFiles()*
trag#SetFiles(?files=[])

                                                    *trag#FindGitRepos()*
trag#FindGitRepos()

                                                    *trag#Edit()*
trag#Edit()
    Edit a file from the project catalog. See |g:trag_project| and 
    |:TRagfile|.

                                                    *trag#Grep()*
trag#Grep(args, ?replace=1, ?files=[])
    args: A string with the format:
      KIND REGEXP
      KIND1,KIND2 REGEXP
    
    If the variables [bg]:trag_rxf_{kind}_{&filetype} or 
    [bg]:trag_rxf_{kind} exist, these will be taken as format string (see 
    |printf()|) to format REGEXP.
    
    EXAMPLE:
    trag#Grep('v foo') will find by default take g:trag_rxf_v and find 
    lines that looks like "\<foo\>\s*=[^=~]", which most likely is a 
    variable definition in many programming languages. I.e. it will find 
    lines like: >
      foo = 1
<     but not: >
      def foo(bar)
      call foo(bar)
      if foo == 1
<

                                                    *trag#ClearCachedRx()*
trag#ClearCachedRx()

                                                    *trag#QuickList()*
trag#QuickList(?world={})
    Display the |quickfix| list with |tlib#input#ListW()|.

                                                    *trag#LocList()*
trag#LocList(...)
    Display the |location-list| with |tlib#input#ListW()|.

                                                    *trag#AgentEditQFE()*
trag#AgentEditQFE(world, selected, ...)

                                                    *trag#AgentPreviewQFE()*
trag#AgentPreviewQFE(world, selected)

                                                    *trag#AgentGotoQFE()*
trag#AgentGotoQFE(world, selected)

                                                    *trag#AgentWithSelected()*
trag#AgentWithSelected(world, selected)

                                                    *trag#RunCmdOnSelected()*
trag#RunCmdOnSelected(world, selected, cmd)

                                                    *trag#AgentSplitBuffer()*
trag#AgentSplitBuffer(world, selected)

                                                    *trag#AgentTabBuffer()*
trag#AgentTabBuffer(world, selected)

                                                    *trag#AgentVSplitBuffer()*
trag#AgentVSplitBuffer(world, selected)

                                                    *trag#AgentRefactor()*
trag#AgentRefactor(world, selected)
    Invoke an refactor command.
    Currently only one command is supported: rename

                                                    *trag#CWord()*
trag#CWord()

                                                    *trag#RefactorRename()*
trag#RefactorRename(world, selected)

                                                    *trag#SetFollowCursor()*
trag#SetFollowCursor(world, selected)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
